{"version":3,"file":"5769.980b07dce48bd2408741.js","mappings":"iRA0DO,SAASA,EACdC,GAEG,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM,OAAEK,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,OAAKE,GAAWC,GAIhBV,GAASY,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAOG,EAAWN,GAC3EP,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,OAAUG,OAAWA,OAAWA,EAAWN,IAJzFP,CAMX,EAzDAe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAMG,EAAWN,EAAM,KAGhFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOlB,EAAqBC,EAAQO,EAAM,KAG5CQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvC,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMS,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,IAAiBC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgB,gBAAgBC,gBAAgBL,IAAkB,CAAC,EAQjH,OANID,IAAUG,IACZrB,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,EAAUe,EAAAA,OAAkBZ,OAAWA,EAAWN,KAGlGK,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,EAAMQ,EAAOX,EAEzD,KAGfQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,UAAES,EAAS,MAAEnB,GAAQC,EAAAA,EAAAA,OAAsBS,GAC3C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOiB,EAAAA,EAAAA,IAA2B3B,EAAQS,EAAQC,EAAUgB,EAAWnB,EAAM,I,2BCzC/EQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,GACJW,EAAE,SACFlB,EAAWmB,EAAAA,GAAc,KACzBC,EAAO,SAAQ,qBACfC,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjB1B,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAEtD4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAmCxC,GAlCI4B,EAASC,cAAcC,OAASF,EAASC,cAAcE,SACzDtC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,IACTD,EAASC,aACZE,QAAQ,IAET/B,IAGA2B,GACHA,EAAmBzB,SAAWmB,GAC3BM,EAAmBxB,WAAaA,GAChCwB,EAAmBJ,OAASA,IAE3BF,IACF5B,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQ4B,EAAIlB,EAAU,aAAc,GAAIH,GAEvEP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiB,CAAC,GACjBlC,IAILP,EAASD,EADTC,GAAS0C,EAAAA,EAAAA,IAAsB1C,EAAQO,GACDA,GAEtCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2C,mBAAmB,EACnBC,0BAAsB/B,KAClBe,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAAgBC,UAAY,CACnED,gBAAiB,CAAC,IAEnBtC,IAGDqB,EAAI,CACN,MAAMmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ4B,GAE5BmB,GAAME,UAAYhB,EACpBjB,EAAQkC,eAAe,CAAEzC,OAAQmB,EAAKrB,UAC7BqB,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4C,kBAC9CnC,EAAQoC,gBAAgB,CAAE7C,SAE9B,CAIA,OAFAS,EAAQqC,gBAAgB,CAAE9C,WAEnB+C,EAAAA,EAAAA,IAAyBtD,EAAQ4B,EAAIlB,EAAUoB,EAAMC,EAAsBC,EAAmBzB,EAAM,KAG7GQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,SAAEC,EAAWmB,EAAAA,IAAmBZ,EAE9CsC,OAAOC,MAAKC,EAAAA,EAAAA,IAAqBhD,EAAQ,SAAUC,GAAW,SAAS,KAGzEK,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OADAD,EAAQqC,gBAAgB,CAAE9C,WACnB+C,EAAAA,EAAAA,IAAyBtD,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,EAAM,KAGvGQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,KAC3BsB,EAAAA,EAAAA,IAAetB,EAAQO,GAC1BmD,iBAAiB,GAChBnD,GACHP,EAAS,IAAKA,EAAQ2D,qBAAqB,IAC3CC,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ6C,SAAS,IAAK5C,EAASV,SAAQ,KAGzCQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,KAAEqD,EAAI,SAAEpD,EAAQ,MAAEqD,EAAK,MAAExD,GAAQC,EAAAA,EAAAA,OACrCS,EAMJ,OAJIR,GACFO,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,WAAUH,WAGpCgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgE,eAAgB,CACdvD,SACAqD,OACAC,UAEDxD,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BiE,kBAAcpD,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,uBAAEiD,EAAsB,MAAE3D,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkE,0BACC3D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,iBAAEkD,EAAgB,WAAEC,EAAU,MAAE7D,GAAQC,EAAAA,EAAAA,OAAsBS,GAE9D,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EAEH,YADAO,EAAQ6C,SAAS,CAAEjC,GAAIwC,EAAW,GAAI7D,UAIxC,MAAM8D,EAAWD,EAAWE,QAAQ7D,GAEpC,IAAkB,IAAd4D,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErCnD,EAAQ6C,SAAS,CAAEjC,GAAI2C,EAAQxC,sBAAsB,EAAMxB,SAAQ,KAGrEQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,SAAEuD,EAAQ,MAAEjE,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByE,wBAAyBD,GACxBjE,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByE,6BAAyB5D,GACxBN,EAAM,I,qGC3GX,MACMmE,EAA8BC,EAAAA,IAA2BC,EAAAA,IAK/D,IAAIC,EAyvBJ,SAASC,EAAoB9E,EAAqBS,EAAgBsE,GAChE,MAAQjD,KAAMkD,EAAe,SAAEtE,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC3EiF,EAAOC,EAAAA,GAEPC,EAAmC,cAApBH,GACjBI,EAAAA,EAAAA,IAA4BpF,EAAQS,IACpC4E,EAAAA,EAAAA,IAAmBrF,EAAQS,GAC/B,IAAK0E,IAAiBzE,EAAU,OAChC,MAAM4E,EAAWP,EACdQ,KAAK3D,GAAOuD,EAAavD,KACzB4D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,GAAUiF,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASjE,GAAKkE,EAASlE,KAEjDmE,EAAST,EAASU,QAAO,CAACC,EAAKR,KACnC,MAAMS,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAKpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,GCr0BP,SACLnB,EACAQ,GAEA,MAAMa,GAAQC,EAAAA,EAAAA,IAAuBd,GAC/Be,EAAiBF,EAAS,GAAEA,KAAW,GACvCxC,GAAO2C,EAAAA,EAAAA,GACXhB,OAAS5E,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,IAC/D6F,KAAK,IAGR,MAAQ,GAAEF,KAFUG,EAAAA,EAAAA,IAA6B1B,EAAMQ,EAAS3B,GAAM,IAGxE,CDyzBgB8C,CAAyB3B,EAAMQ,QAEpCQ,CAAG,GACT,IAEGY,EAAavB,EAASU,QAAO,CAACC,EAAKR,KACvC,MAAMS,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAIpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,IAAEU,EAAAA,EAAAA,IAAsB7B,EAAMQ,GAAS,EAAO,GAAG,QAEpDQ,CAAG,GACT,KAEHc,EAAAA,EAAAA,IAAoBhB,EAAOW,KAAK,MAAOG,EAAWH,KAAK,MACzD,EAtxBA3F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,aAAEsG,EAAY,MAAEzG,GAAQC,EAAAA,EAAAA,OACtCS,EAIJ,OAFAjB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,mBAAoBsG,IAEnExE,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,eAAgBsG,EAAczG,EAAM,KAG7FQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAE7B,OAAO+E,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgBwG,EAAU,KAGhFnG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAC7BiF,EAAqB,cAATrF,EAAuB,qBAAuB,YAEhE,OAAOmF,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAUyG,EAAWD,EAAU,KAG3EnG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,KACJ6C,EAAI,OAAErD,EAAM,SAAEC,EAAQ,KAAEoB,GACtBb,EAEEkG,EAAqB,cAATrF,EAAuB,wBAA0B,eAEnE,OAAOmF,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAUyG,EAAWrD,EAAK,KAGtE/C,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMyE,GAAeE,EAAAA,EAAAA,IAAmBrF,EAAQS,GAC1C2G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,IAAK4E,IAAiBiC,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcxF,GAC/C4F,QAAQrC,EAAavD,KAAO8D,EAAAA,EAAAA,IAA4B1F,EAAQmF,EAAavD,GAAKlB,GAAU+G,WAGrG,OAAKH,GAIEL,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,YAAa4G,QAJjE,CAI0F,KAG5FvG,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,iBAAEkD,EAAgB,MAAE5D,GAAQC,EAAAA,EAAAA,OAAsBS,GAClD,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMyE,GAAeE,EAAAA,EAAAA,IAAmBrF,EAAQS,GAC1C2G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,IAAK4E,IAAiBiC,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAGxD,IAAIwG,EAEJ,IAJiBU,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQC,EAAUH,IAIhDmH,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAK5C,GAE9B6C,EADiBH,EAAgBvD,QAAQoD,EAAaO,YAC1B9D,EAClC+C,EAAYc,GAAYH,EAAgB1H,OAAS,GAAK6H,GAAY,EAC9DE,OAAOL,EAAgBG,SACvBnH,CACN,MAhBE,GAAIH,IAAamB,EAAAA,GAAgB,CAC/B,MAAMkB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhCyG,EAAYnE,GAAMoF,aAAavG,EACjC,KAAO,CACL,MAAMwG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpDwG,EAAYkB,GAAYE,aAC1B,CASFtH,EAAQuH,gBAAgB,CAAErB,YAAW3G,UACrCS,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWA,EACX3G,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,UAAEwG,EAAS,OAAEuB,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClErI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,CACXpI,SACAC,WACAwG,YACAuB,OAAQA,QAAAA,EAAUtG,EAAS0G,YAAYJ,OACvCC,OAAQA,QAAAA,EAAUvG,EAAS0G,YAAYH,OACvCC,aAAcA,GAAgBxG,EAAS0G,YAAYF,cAAgB3I,EAAO6I,YAAYC,iBACtFC,0BAAqElI,IAA9CsB,EAAS0G,YAAYE,qBACxC/I,EAAO6I,YAAYG,yBACnB7G,EAAS0G,YAAYE,qBACzBH,QAASA,GAAWzG,EAAS0G,YAAYD,UAE1CrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJyH,EAAM,MAAEnI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCH,SACAE,SAAS,IAEVrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ0H,EAAY,qBAAEI,EAAoB,MAAExI,GAAQC,EAAAA,EAAAA,OAC1CS,EAWJ,OATAjB,EAAS,IACJA,EACH6I,YAAa,IACR7I,EAAO6I,YACVC,iBAAkBH,EAClBK,yBAA0BD,KAIvBxG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCF,eACAI,yBAEDxI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ2H,EAAO,MAAErI,GAAQC,EAAAA,EAAAA,OACfS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCD,YAEDrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJwH,EAAM,MAAElI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCJ,WAEDlI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,CACXH,OAAQvG,EAAS0G,YAAYH,OAC7BC,aAAcxG,EAAS0G,YAAYF,aACnCI,qBAAsB5G,EAAS0G,YAAYE,qBAC3CH,QAASzG,EAAS0G,YAAYD,UAE/BrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnDgI,GAAsBC,EAAAA,EAAAA,IAAyBlJ,GAAQmJ,EAAAA,EAAAA,MAAe5I,GACtE4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,GAAK0I,GAaE,GAAIxI,IAAW0B,EAASiH,YAAY3I,QAAUyG,IAAc/E,EAASiH,YAAYlC,UACtF,OAAO3E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoJ,YAAa,CACX3I,SACAyG,YACAmC,OAAQ,CAAC,IAEV9I,QAnBHgD,OAAO+F,YAAW,KAChBtJ,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoJ,YAAa,CACX3I,SACAyG,YACAmC,OAAQ,CAAC,IAEV9I,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,GA3OW,IAuPhB,KAGlBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoJ,YAAa,CAAC,GACb7I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAE7B,IAAIoG,EACJ,GAAI5H,IAAamB,EAAAA,GAAgB,CAC/B,MAAMkB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC6H,EAAgBvF,GAAMoF,aAAavG,EACrC,KAAO,CACL,MAAMwG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD4H,EAAgBF,GAAYE,aAC9B,CAEKA,GAILtH,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWoB,EACXkB,aAAa,EACbvH,mBAAmB,EACnB1B,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAEvBuH,GAAaC,EAAAA,EAAAA,IAAiB1J,EAAQS,EAAQC,EAAUH,GAE9D,GAAKkJ,GAAoC,IAAtBA,EAAWtJ,OAEvB,CACL,MAAM+G,EAAYuC,EAAWE,MAE7B3J,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAI+I,GAAalJ,IAExFqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWA,EACX3G,QACA0B,mBAAmB,GAEvB,MAfEjB,EAAQ4I,iBAAiB,CAAErJ,SAiBb,KAGlBQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,gBAAEmD,EAAkB,SAAQ,YAAEwE,EAAW,UAAEK,EAAS,cAAEC,EAAa,eACpGC,EAAc,oBAAEC,EAAmB,qBAAEjI,EAAoB,kBAAEE,EAAiB,MAC5E1B,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI,UAAEiG,GAAcjG,EAEpB,QAAkBJ,IAAdgJ,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmClK,EAAQ8J,EAAgBD,GACnEI,GAAK9J,UACL+G,IAAaiD,EAAAA,EAAAA,IAAQF,GAE3B,CAEA,MAAM/H,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACtD6J,GAAoBlI,GACxBzB,IAAWyB,EAAmBzB,QAC3BC,IAAawB,EAAmBxB,UAChCsE,IAAoB9C,EAAmBJ,KAiB5C,GAdI+C,IACFwF,aAAaxF,GACbA,OAAchE,GAEhBgE,EAActB,OAAO+F,YAAW,KAC9BtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsK,EAAAA,EAAAA,IAAqBtK,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,GAC7FP,GAASuK,EAAAA,EAAAA,IAAqBvK,OAAQa,EAAWN,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,GAChBwJ,EAAc9E,EArWI,MAuWrB1E,GAASsK,EAAAA,EAAAA,IAAqBtK,EAAQS,EAAQyG,EAAWxG,EAAU8I,EAAaQ,EAAqBzJ,GACrGP,GAASuK,EAAAA,EAAAA,IAAqBvK,OAAQa,EAAWN,GAE7CwJ,EAAgB,CAClB,MAAMN,GAAaC,EAAAA,EAAAA,IAAiB1J,EAAQS,EAAQC,EAAUH,IAAU,GACxEP,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAI+I,EAAYM,GAAiBxJ,EAC1G,CAEI6J,IACFpK,GAASuK,EAAAA,EAAAA,IAAqBvK,EAAQwK,EAAAA,GAAAA,OAAuBjK,IAG/D,MAAM6G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,GAAI6G,GAAeA,EAAYqD,SAASvD,GAStC,OARAtD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,uBAAuB,SAC3C1J,EAAQ6C,SAAS,CACfjC,GAAInB,EACJC,WACAqB,uBACAE,oBACA1B,UASJ,GAJI6J,IACFpK,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,mBAAeG,EAAWN,IAGjF6G,IAAgBgD,EAAkB,CACpC,MAAMO,EAAYzD,EAAYE,EAAY,GAAKoD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrExK,GAASuK,EAAAA,EAAAA,IAAqBvK,EAAQ2K,EAAWpK,EACnD,EAEAqD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,uBAAuB,IAE3C1J,EAAQ6C,SAAS,CACfjC,GAAInB,EACJC,WACAqB,uBACAE,oBACA1B,UAEFS,EAAQ4J,qBAAqB,CAC3BrK,QACAsK,mBAAmB,GAEL,KAGlB9J,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,WACJ6J,EAAU,WAAE/F,EAAU,UAAE8E,EAAS,YAAEkB,EAAW,MAAExK,GAAQC,EAAAA,EAAAA,OACtDS,EACJ,IAAI+J,EAIJ,OAHInB,IACFmB,GAAoBC,EAAAA,EAAAA,IAA0BjL,EAAQ8K,EAAYjB,KAE7DtH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,CACfiI,aACA/F,WAAYiG,GAAqBjG,EACjCmG,cAAc,EACdH,gBAEDxK,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,cAAUjC,EACVqK,cAAc,EACdC,WAAW,EACXC,YAAY,IAEb7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,UAAEkK,EAAS,MAAE5K,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,IACZV,EAASU,gBACZsI,YAEAC,WAAYD,GAAahJ,EAASU,gBAAgBuI,aAEnD7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEmK,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsBS,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCuI,aACAD,UAAWC,IAEZ7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sCAAsC,CAACf,EAAQgB,EAASC,KACvE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAQ5K,OAAQqK,EAAU,WAAE/F,GAAe5C,EAASkJ,iBAEpDrK,EAAQsK,gBAAgB,CAAER,aAAY/F,aAAYxE,SAAQ,KAG5DQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,QAAEwE,EAAO,MAAElF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAClCgL,EAAWpJ,EAASqJ,gBAAgBD,SAAS9F,EAAQhF,QACtD8K,GAAaA,EAASpL,SAE3BH,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BwL,gBAAiB,CACfD,SAAU,IACLpJ,EAASqJ,gBAAgBD,SAC5B,CAAC9F,EAAQhF,QAAS8K,EAAS/F,QAAQ5D,GAAOA,IAAO6D,EAAQ7D,QAG5DrB,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,SAAEqE,EAAQ,MAAE/E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1CsK,GAAWjK,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiL,gBAAgBD,SACzDE,EAAuD,CAAC,EAI9D,OAHA3D,OAAOC,KAAKwD,GAAUG,SAASjL,IAC7BgL,EAAYhL,GAAU8K,EAAS9K,GAAQ+E,QAAQ5D,IAAQ0D,EAASqG,MAAMlG,GAAYA,EAAQ7D,KAAOA,KAAI,KAEhGW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwL,gBAAiB,CACfD,SAAUE,IAEXlL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,QAAEwE,EAAO,MAAElF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BwL,gBAAiB,CACfD,SAAU,IACLpJ,EAASqJ,gBAAgBD,SAC5B,CAAC9F,EAAQhF,QAAS,IAAK0B,EAASqJ,gBAAgBD,SAAS9F,EAAQhF,SAAW,GAAKgF,EAAQ7D,OAG5FrB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAM,OAAE5K,EAAM,WAAEsE,GAAe5C,EAASkJ,kBAClC,SAAE3K,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE3D4E,GAAeE,EAAAA,EAAAA,IAAmBrF,EAAQS,GAC3C0E,GAAiBzE,GACLqE,EAAWQ,KAAK3D,GAAOuD,EAAavD,KAClD4D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,GAAUkL,cACrEF,SAASjG,GAAYzE,EAAQ6K,qBAAqB,CAAEpG,UAASlF,WAAS,KAGjFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD4C,GAAWiI,EAAAA,EAAAA,IAAkB9L,EAAQO,GAC3C,OAAKsD,GAIEkI,EAAAA,EAAAA,IAAuB/L,EAAQ6D,EAASjC,GAAIsF,EAAW3G,GAHrDP,CAG2D,KAGtEe,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UACJiG,EAAS,UACT2C,EAAS,gBACTmC,EAAe,UACfC,EAAS,MACT1L,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMkD,GAAoB9C,EAEpDlC,GAASkM,EAAAA,EAAAA,IACPlM,EAAQS,EAAQC,EAAUsE,EAAiBkC,EAAW2C,EAAWmC,EAAiBC,EAAW1L,IAG/FqD,EAAAA,EAAAA,IAAU5D,IAENsB,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4L,4BAChCnL,EAAQoL,uBAAuB,CAAE7L,UACjCS,EAAQqL,iBAAiB,CAEvB5G,QAAU,mDAAkD6G,EAAAA,GAAe,WAAa,8BACxF/L,UAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,IAAKK,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4L,0BAInC,OAAO5J,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmM,2BAA2B,GAC1B5L,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOyB,EAAAA,EAAAA,IAAsB1C,EAAQO,EAAM,KAG7CQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OAAEsL,EAAM,MAAEhM,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwM,UAAW,CACTlK,QAAQ,EACRiK,WAEDhM,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwM,UAAW,CACTlK,QAAQ,IAET/B,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,KACpD,GAAIyL,EAAAA,KAAoBC,KAAKC,MAAQzE,OAAOuE,EAAAA,KAnnBR,OAonBlC,OAGF,MAAMG,EAAiBC,EAAAA,IAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAGpG,KAAK,MACzD,qBAAEqG,GAAyB/M,EAEjC,GAAI+M,EAAqBpB,MAAKvL,IAAA,IAAC,QAAE4M,GAAS5M,EAAA,OAAK4M,IAAYJ,CAAc,IACvE,OAGF,MAAMnH,EAAkC,CACtChF,OAAQwM,EAAAA,IACRC,MAAMC,EAAAA,EAAAA,MACNC,QAAS,CACPtJ,MAAMuJ,EAAAA,EAAAA,I,ktDAAuC,IAE/CC,YAAY,GAGdtM,EAAQuM,0BAA0B,CAChC9H,QAASA,EACTuH,QAASJ,GACT,KAGJ7L,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,QAAEwE,EAAO,QAAEuH,GAAY/L,GACvB,qBAAE8L,GAAyB/M,EAC3BwN,GAAcxK,EAAAA,EAAAA,IAAWhD,EAAQiN,EAAAA,KAEjCQ,EAAQC,KAAKC,IACjBH,EAAYrF,aAAavG,IAAM,KAC5BmL,EAAqBxH,KAAIqI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAEtCiM,GAAkBd,EAAqB5M,OAAS,GArpBf,IAupBjCyB,EAAK8L,KAAKI,MAAML,GAASI,EAE/BpI,EAAQsI,gBAAkBtI,EAAQ7D,GAClC6D,EAAQ7D,GAAKA,EAEb,MAAMoM,EAAsB,CAC1BpM,KACA6D,UACAuH,UACAiB,UAAU,GAGZjO,EAAS,IACJA,EACH+M,qBAAsB,IACjBA,EAAqBD,OAtqBW,KAuqBnCkB,KAGJpK,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQkN,UAAU,CAChB,QAAS,aACTtM,GAAI6D,EAAQ7D,GACZnB,OAAQgF,EAAQhF,OAChBgF,WACA,KAGJ1E,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmO,aAAc,CAAE1N,SAAQyG,cACvB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmO,kBAActN,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoO,YAAa,CAAE3N,SAAQyG,cACtB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoO,iBAAavN,GACZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CoN,GAAiBC,EAAAA,EAAAA,IAAmCtO,EAAQS,EAAQmB,EAAIrB,GAE9E,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,qBAAsB,CAAE9N,SAAQyG,UAAWtF,EAAIyM,mBAC9C9N,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,0BAAsB1N,GACrBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAM,OAAE5K,EAAM,WAAEsE,GAAe5C,EAASkJ,iBACxCvG,EAAoB9E,EAAQS,EAAQsE,EAAW,KAGjDhE,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,WAAE8D,EAAU,MAAExE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCwE,GAAoC,IAAtBA,EAAW5E,QAAiB4C,GAI/C+B,EAAoB9E,EAAQ+C,EAAKnB,GAAImD,EAAW,KE7yBlDhE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAEjD,OAAOC,EAAAA,EAAAA,IAAmBzO,EAAQ,CAChC0O,cAAe,CAAC,EAChBC,aAAc,CAAC,EACfC,mBAAe/N,KACXK,EAAQ,CAAE2N,eAAgB,CAAEC,OAAQrO,EAAQ6E,UAAU,IAAW,CAAEuJ,oBAAgBhO,GACvFK,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAEuO,GAAc9N,GAAW,CAAC,EAC7D,OAAOwN,EAAAA,EAAAA,IAAmBzO,EAAQ,CAChC+O,aACCxO,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,GAAEW,GAAOX,GACT,qBAAE+N,GAAyBhP,EAEjC,IAAKgP,EACH,MAAO,IACFhP,EACHgP,qBAAsB,CAACpN,IAI3B,MAAMqN,EAAeD,EAAqBxJ,QAAQ/E,GAAWA,IAAWmB,IAMxE,OALAqN,EAAaC,QAAQtN,GACjBqN,EAAa9O,OAnCY,IAoC3B8O,EAAatF,MAGR,IACF3J,EACHgP,qBAAsBC,EACvB,KAGHlO,EAAAA,EAAAA,IAAiB,2BAA4Bf,IACpC,IACFA,EACHgP,0BAAsBnO,OAI1BE,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,QAAEmM,EAAO,MAAE7M,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAOkO,EAAAA,EAAAA,IAA0BnP,EAAQoN,EAAS7M,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOwN,EAAAA,EAAAA,IAAmBzO,EAAQ,CAAES,OAAQmB,EAAIV,WAAOL,EAAW+N,mBAAe/N,GAAaN,EAAM,KC/DtGQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoP,cAAe,CACblO,QACAmO,eAAWxO,IAEZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsP,UAAW,CACTpO,QACAqO,YAAQ1O,EAER2O,aAAS3O,IAEVN,EAAM,KCnBXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MACJC,EAAK,MACLX,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOwO,EAAAA,EAAAA,IAAiBzP,EAAQ,CAC9B0P,mBAAe7O,EACf8O,kBAAc9O,EACdgO,eAAgBrH,QAAQtG,GACxBA,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAE2O,EAAM,MAAErP,GAAQC,EAAAA,EAAAA,OAAsBS,EAE9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6P,WAAY,CAAED,WACbrP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6P,WAAY,CACVC,iBAAiB,IAElBvP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAO8O,EAAAA,EAAAA,IAAsB/P,EAAQO,EAAM,I,8CC1C9B,SAASyP,EAAWC,GACjCC,SAASC,iBAAkC,gDACxCzE,SAAS0E,IACJH,EACGG,EAAKC,KAAK5F,SAAS,oBACtB2F,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,UAAW,mBAG3CF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,iBAAkB,UAClD,GAEN,C,eCLO,SAASC,EAAoBC,GAC9BN,SAASO,QAAUD,IACrBN,SAASO,MAAQD,EAErB,CAGO,MAAME,GAAeC,EAAAA,EAAAA,IAASJ,EAXV,KAWmD,G,eCilB9E,IAAIK,EAoFAC,GAppBJ9P,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAE6P,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACnDyC,OAA4B7C,IAAViQ,EAAsBA,IAASxP,EAAAA,EAAAA,IAAetB,EAAQO,GAAOmD,gBAKrF,OAHA1D,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAAE0D,mBAAmBnD,GAC5C,IAAKP,EAAQ2D,oBAAqBD,EAE9B,KAGf3C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,gBAAE8P,GAAoB9P,EAE5B,MAAO,IACFjB,EACH+Q,kBACD,KAGHhQ,EAAAA,EAAAA,IAAiB,wBAAyBf,IACjC,IACFA,EACH+Q,qBAAiBlQ,OAIrBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,WAAY9O,EAAS6O,WAAWzF,SAAS9K,IAAW,CAAC,GAAGwQ,aAI7D1Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,OAAEiQ,EAAM,MAAE3Q,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GACpD,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,UAAU,EACVE,WAAYD,MAIjB3Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,UAAU,MAIf1Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAKkI,EAAAA,EAAAA,QAAkBiI,EAAAA,EAAAA,MAIvB,OAAO7O,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,kBAAyE,KAAtD/P,EAAAA,EAAAA,IAAetB,EAAQO,GAAO+Q,aAAanR,QAC7DI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2C,mBAAoBR,EAASQ,kBAC7B4O,WAAY,IACPpP,EAASoP,WACZC,sBAAkB3Q,IAEnBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAE0G,GAAcjG,GAAW,CAAC,EAC7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuR,WAAY,KACPjQ,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgR,WACjCC,iBAAkBtK,IAEnB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,oBAAoB/P,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,mBACjD9Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEqF,GAAUrF,GACZ,aAAEwQ,GAAiBzR,EACzB,IAAKyR,EACH,MAAO,IACFzR,EACHyR,aAAc,CAACnL,IAInB,MAAMoL,EAAYD,EAAajM,QAAQmM,GAAMA,IAAMrL,IAMnD,OALAoL,EAAUxC,QAAQ5I,GACdoL,EAAUvR,OAtJU,IAuJtBuR,EAAU/H,MAGL,IACF3J,EACHyR,aAAcC,EACf,KAGH3Q,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,QAAE2Q,GAAY3Q,GACd,OAAE4Q,GAAW7R,EAAO8R,SAC1B,IAAKD,EACH,MAAO,IACF7R,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,CACNE,KAAM,IACND,SAAU,CAACF,MAMnB,MAAMI,EAAcH,EAAOC,SAAStM,QAAQyM,GAAMA,EAAErQ,KAAOgQ,EAAQhQ,KAGnE,OAFAoQ,EAAY9C,QAAQ0C,GAEb,IACF5R,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,IACHA,EACHC,SAAUE,IAGf,KAGHjR,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEiR,GAAejR,GACjB,mBAAEkR,GAAuBnS,EAC/B,IAAKmS,EACH,MAAO,IACFnS,EACHmS,mBAAoB,CAACD,IAIzB,MAAMR,EAAYS,EAAmB3M,QAAQ5D,GAAOA,IAAOsQ,IAM3D,OALAR,EAAUxC,QAAQgD,GACdR,EAAUvR,OA3MU,IA4MtBuR,EAAU/H,MAGL,IACF3J,EACHmS,mBAAoBT,EACrB,KAGH3Q,EAAAA,EAAAA,IAAiB,0BAA2Bf,IACnC,IACFA,EACHmS,mBAAoB,QAIxBpR,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEmR,EAAK,cAAEC,GAAkBpR,EACjC,MAAO,IACFjB,EACH8R,SAAU,IACL9R,EAAO8R,SACVQ,MAAO,CACLC,OAAUF,EAAwBrS,EAAO8R,SAASQ,MAAMC,OAA9BH,IAG9BI,aAAc,IACTxS,EAAOwS,aACVF,MAAO,CACLC,OAASF,EAAgBD,EAAQpS,EAAOwS,aAAaF,MAAMC,SAGhE,KAGHxR,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,SAAsBiS,GAAiBxR,EACvDwR,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,CAAC,GAEtC,MAAMC,EAAmB,KAAItR,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsS,eACrDC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAEvN,UAAYgN,EAAahN,UAO/F,OANmC,IAA/BqN,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiBxM,KAAKqM,IAEflQ,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6S,cAAeD,GACdrS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uCAAuC,CAACf,EAAQgB,EAASC,KACxE,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAExC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAM,iBACJmQ,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4B3Q,GAC1B4Q,GAAiBxJ,EAAAA,EAAAA,IAAQ,CAC7B+I,EAAmB,uCAAoCrS,EACvDsS,EAAgB,wCAAqCtS,EACrDuS,EAAgB,wCAAqCvS,EACrD4S,EAAgB,+CAA4C5S,EAC5D2S,EAAqB,+CAA4C3S,EACjEwS,EAAmB,uCAAoCxS,EACvDyS,EAAgB,wCAAqCzS,EACrD0S,EAAkB,0CAAuC1S,IACxD0E,KAAKqO,GAAM1O,EAAAA,GAAuB0O,KAErC,IAAKD,EAAexT,OAKlB,YAJAa,EAAQqL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,2BAChC3E,UAKJ,MAAMsT,EAAgB3O,EAAAA,GAAuB,sCACvC4O,EAAuBH,EAAejN,KAAK,MAAM4J,QAAQ,YAAc,GAAEuD,OAE/E7S,EAAQqL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,8BAA+B4O,GAC/DvT,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChC2R,GAAmBtR,EAAAA,EAAAA,IAAetB,EAAQO,GAC7CsS,cAAcrN,QAAOpF,IAAA,IAAC,QAAEsS,GAAStS,EAAA,OAAKsS,IAAYzR,EAAQyR,OAAO,IAEpE,OAAOnQ,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6S,cAAeD,GACdrS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,KAAE8S,EAAI,MAAExT,GAAQC,EAAAA,EAAAA,OAAsBS,EAG5C,GAAI,YAAa8S,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAO/T,EAGT,MAAMkU,EAAa,KAAI5S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4T,SACrD,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWnB,WAAWsB,GAASA,EAAiB5O,UAAYsO,EAAKtO,WAChE,IAAxB2O,GACFF,EAAWjB,OAAOmB,EAAoB,EAE1C,CAIA,OAFAF,EAAW9N,KAAK2N,IAETxR,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmU,QAASD,GACR3T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiT,EAAa,KAAI5S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4T,SAIrD,OAFAD,EAAWvK,OAEJpH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmU,QAASD,GACR3T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAQqT,IAAKC,EAAgB,MAAEhU,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuU,oBACChU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,WAAEuT,EAAU,MAAEjU,GAAQC,EAAAA,EAAAA,OAAsBS,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByU,0BAA2BD,GAC1BjU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByU,+BAA2B5T,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,IACJqT,EAAG,OAAE7T,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAC9BS,EAEEwE,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKzB,EAAS,OAEd,MAAMkP,EAAQlP,EAAQmP,UAAYnP,EAAQoP,SAC1C,GAAKF,EAAL,CAEA,KAAKG,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,OACNkT,UAAW,CACTC,OAAQ,WACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZA,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkV,WAAY,CACVZ,MACA7T,SACAyG,cAED3G,IACHqD,EAAAA,EAAAA,IAAU5D,EAxBQ,CAwBD,KAGnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkV,gBAAYrU,GACXN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJkU,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAE/U,GAAQC,EAAAA,EAAAA,OAChCS,GAAW,CAAC,GACV,eAAEsU,GAAmBvV,EAAOwV,SAASC,MAC3C,GAAuB,IAAnBF,EAEJ,OAAOhT,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0V,SAAU,CACRC,iBAAkBjJ,KAAKC,MACvBwI,MACAC,OACAC,QACAC,WAED/U,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,eACJ2U,EAAc,kBAAEC,GACd5U,EAEJ,MAAO,IACFjB,EACH8V,mBAAoB,CAClBF,eAAgBA,QAAAA,EAAkB5V,EAAO8V,mBAAmBF,eAC5DC,kBAAmBA,QAAAA,EAAqB7V,EAAO8V,mBAAmBD,mBAErE,KAGH9U,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAE8U,EAAK,MAAExV,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgW,kBAAmB,CACjBD,UAEDxV,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgW,uBAAmBnV,GAClBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BiW,+BAA2BpV,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAEsR,EAAM,MAAEhS,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkW,wBAAyB3D,GACxBhS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkW,6BAAyBrV,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kCAAkC,CAACf,EAAQgB,EAASC,KACnE,MAAM,IAAEgJ,GAAQhJ,GACV,aAAEkV,GAAiBnW,EAAOwS,aAEhC,MAAO,IACFxS,EACHwS,aAAc,IACTxS,EAAOwS,aACV2D,cAAcC,EAAAA,EAAAA,IAAO,IAAID,KAAiBlM,IAAM6C,MAAM,EAAGuJ,EAAAA,MAE5D,KAGHtV,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAM9C,OAHoB6K,EAAAA,EAAAA,IAAkB9L,EAAQO,IAC5BS,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,SAAUmB,EAAAA,GAAgBtB,WAEpEgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsW,iBAAkB,CAChB7V,WAEDF,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsW,sBAAkBzV,GACjBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,QAAE8V,EAAO,MAAEhW,GAAQC,EAAAA,EAAAA,OAAsBS,EAMvD,OAHoB6K,EAAAA,EAAAA,IAAkB9L,EAAQO,IAC5BS,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQF,WAE1CgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwW,eAAgB,CACd/V,SACA8V,YAEDhW,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwW,oBAAgB3V,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,gBAAEwV,GAAoBzW,GACtB,SAAE0W,EAAWD,EAAgBC,SAAQ,YAAEC,EAAcF,EAAgBE,aAAgB1V,EAE3F,MAAO,IACFjB,EACHyW,gBAAiB,CACfC,WACAC,eAEH,KAGH5V,EAAAA,EAAAA,IAAiB,mBAAoBf,IACnC,MAAM4W,EAAoB,qBAE1BC,MAAO,eAAqBnK,KAAKC,SAC9BmK,MAAMC,GAAaA,EAASjT,SAC5BgT,MAAM9J,IACLA,EAAUA,EAAQgK,OAEdJ,EAAkBK,KAAKjK,IAAYA,IAAYH,EAAAA,MACjD7M,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHkX,mBAAmB,IAErBtT,EAAAA,EAAAA,IAAU5D,GACZ,IAEDmX,OAAO9C,IACF+C,EAAAA,KAEFC,QAAQC,MAAM,4BAA6BjD,EAC7C,GACA,KAGNtT,EAAAA,EAAAA,IAAiB,eAAgBf,KAC1BsB,EAAAA,EAAAA,IAAetB,GAAQQ,EAAAA,EAAAA,OAAmB+W,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3BzW,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,UAAEwW,EAAS,MAAElX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CwW,GACHzW,EAAQ0W,gBAAe,GAGzB,MAAMC,GAAmBvB,EAAAA,EAAAA,IAAOqB,EAC5B,IAAIzX,EAAO2X,iBAAkBpX,GAC7BP,EAAO2X,iBAAiBnS,QAAQoS,GAAMA,IAAMrX,KAmBhD,OAjBIoX,EAAiBxX,UAAW0X,EAAAA,EAAAA,MAAuB1X,QACrDa,EAAQ0W,gBAAe,GAGrBD,GACE7G,GAAsBkH,cAAclH,GAExCA,EAAuBrN,OAAOwU,aAAY,KACxC/W,EAAQqC,gBAAgB,CACtB9C,SACA,GAvBsB,OA0B1BuX,cAAclH,GACdA,OAAuB/P,GAGlB,IACFb,EACH2X,mBACAK,2BAA4BP,GAAYQ,EAAAA,EAAAA,WAA6BpX,EACtE,KAGHE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,sBAAEiX,GAA0BlY,EAAOwV,SAASC,MAC5C0C,EAAgBnY,EAAOmY,cAE7B,GAAIjI,SAASO,MAAMhG,SAAS2N,EAAAA,KAG1B,OAFApI,GAAW,QACXO,EAAqB,GAAE8H,EAAAA,OAAcD,EAAAA,OAIvC,GAAIpY,EAAOgY,4BAA8BtK,KAAK4K,MAAM5L,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEM4L,GAFoBN,EAAAA,EAAAA,MAEYjY,EAAOgY,2BAE7C,GAAIO,EAAY,EAGd,OAFAhI,EAAqB,GAAEgI,iBAAyBA,EAAY,EAAI,IAAM,WACtEvI,GAAW,EAGf,CAEAA,GAAW,GAEX,MAAMwI,GAAc7X,EAAAA,EAAAA,IAAyBX,EAAQO,GAErD,GAAIiY,GAAeN,IAA0BlY,EAAOyY,SAASC,eAAgB,CAC3E,MAAM,OAAEjY,EAAM,SAAEC,GAAa8X,EACvBG,GAAc3V,EAAAA,EAAAA,IAAWhD,EAAQS,GACvC,GAAIkY,EAAa,CACf,MAAMlI,GAAQmI,EAAAA,EAAAA,GAAa1T,EAAAA,GAAwByT,EAAalY,IAAW0X,GAC3E,OAAIQ,EAAY1V,SAAW0V,EAAYE,SAASnY,QAC9CgQ,EAAc,GAAED,OAAWkI,EAAYE,OAAOnY,GAAU+P,cAI1DC,EAAaD,EAEf,CACF,CAEAF,EAAoB8H,EAAAA,IAAW,KAIjCS,EAAAA,EAAAA,KAAa9Y,IAEX,MAAM,gBAAEqD,IAAoB0V,EAAAA,EAAAA,MAEtBC,EAAkBhZ,EAAOyY,SAASC,iBAAmB7H,EAC3DA,EAAqB7Q,EAAOyY,SAASC,eAEjCM,GACF3V,GACF,KCprBFtC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CgY,GAAS3X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QAAQD,OASrD,OARAjZ,GAASmZ,EAAAA,EAAAA,IAAanZ,EAAQO,GAC9BP,GAASoZ,EAAAA,EAAAA,IAAapZ,EAAQO,IACrBgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCD,WAED1Y,EACU,KAGfQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEqW,EAAK,MAAE/W,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCD,OAAQ,SACR3B,UAED/W,EAAM,I,gBCzBXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,QAAE2Y,EAAO,cAAEC,EAAa,kBAAEC,EAAiB,OAAE9Q,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClGrI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,IACRrX,EAASqX,YACZ/Y,SACAC,WACA2Y,UACAC,gBACAC,oBACA9Q,SACAiO,UAAU,EACVhO,OAAQA,QAAAA,EAAUvG,EAASqX,YAAY9Q,OACvCC,aAAcA,GAAgBxG,EAASqX,YAAY7Q,cAAgB3I,EAAOwZ,YAAY1Q,iBACtFF,QAASA,GAAWzG,EAASqX,YAAY5Q,SAE3C/F,gBAAiB,CAAC,GACjBtC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OACJyH,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE+N,IAC7BpV,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiZ,YAElC,OAAOjX,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,CACX9Q,SACAE,UACA8N,WACA/N,iBAEDpI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJyH,EAAM,MACNnI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,KACRlY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiZ,YACjC9Q,SACAE,SAAS,IAEVrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ0H,EAAY,MACZpI,GAAQC,EAAAA,EAAAA,OACNS,EAUJ,OARAjB,EAAS,IACJA,EACHwZ,YAAa,IACRxZ,EAAOwZ,YACV1Q,iBAAkBH,KAIfpG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,KACRlY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiZ,YACjC7Q,iBAEDpI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ2H,EAAO,MACPrI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,KACRlY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiZ,YACjC5Q,YAEDrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,SAAEyV,EAAQ,MAAEnW,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwZ,YAAa,KACRlY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiZ,YACjC9C,aAEDnW,EAAM,I,+CC5FX,IAAIkZ,GAAiB,GACrBC,EAAAA,EAAAA,KAAe,MAETnQ,EAAAA,EAAAA,MAAYkP,SAASkB,cAAgBF,GAA8D,IAA5C3R,OAAOC,MAAKwB,EAAAA,EAAAA,MAAYqQ,SAASzZ,SAC1F0Z,EAAAA,EAAAA,KACF,KAGF9Y,EAAAA,EAAAA,IAAiB,eAAe+Y,MAAO9Z,EAAQgB,EAASC,KACtD,MAAM,SAAEwX,GAAaxX,EACrBjB,GAAS+Z,EAAAA,EAAAA,IAAuB/Z,EAAQ,CACtCga,WAAW,KAEbpW,EAAAA,EAAAA,IAAU5D,SACJia,EAAAA,EAAAA,IAAcxB,GAEpB,MAAMyB,EAAcC,KAAKC,UAAU,KAAKC,EAAAA,EAAAA,MAAqBzK,OAAQ5P,EAAOmY,gBAC5EnY,GAASuJ,EAAAA,EAAAA,MACT,MAAM+Q,GAAaC,EAAAA,EAAAA,KAAgBR,EAAAA,EAAAA,IAAuB/Z,EAAQ,CAChE2Z,aAAa,EACbrC,WAAOzW,EACPmZ,WAAW,WAGPQ,EAAAA,EAAAA,IAAeN,EAAaI,IAElCG,EAAAA,EAAAA,MACAza,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+Z,EAAAA,EAAAA,IAAuB/Z,EAAQ,CACtC2Z,aAAa,EACbrC,WAAOzW,EACPmZ,WAAW,KAEbpW,EAAAA,EAAAA,IAAU5D,IAEV0a,EAAAA,EAAAA,KAAiB,EAAK,KAGxB3Z,EAAAA,EAAAA,IAAiB,iBAAkBf,KAC5B2a,EAAAA,EAAAA,OAEEC,EAAAA,EAAAA,IAAsB5a,OAG/Be,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM4Z,EAAkB/S,OAAOgT,OAAO9a,EAAO4Z,UACvC,YAAEM,EAAW,WAAEI,GAAerZ,EAC9B8Z,EAAUZ,KAAKa,MAAMd,IAC3Be,EAAAA,EAAAA,IAAaF,EAASA,EAAQnL,QAE9B,MAAMsL,EAAiBlb,GACvBA,EAASma,KAAKa,MAAMV,IACbV,QAAUsB,EAAetB,SAChCuB,EAAAA,EAAAA,IAAanb,GAAQob,EAAAA,EAAAA,IAAUC,EAAAA,IAE/Brb,GAAS+Z,EAAAA,EAAAA,IACP/Z,EACA,CACE0Y,gBAAgB,EAChBpB,WAAOzW,EACPya,qBAAsB,KAG1B1X,EAAAA,EAAAA,IAAU5D,IAEVya,EAAAA,EAAAA,MAEAI,EAAgBnP,SAAQtL,IAAA,IAAGwB,GAAIrB,EAAK,YAAEgb,GAAanb,EAAA,OAAKY,EAAQwa,KAAK,CAAEjb,QAAOgb,eAAc,IAC5Fva,EAAQya,SAAS,KAGnB1a,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAEwX,GAAaxX,GACrBya,EAAAA,EAAAA,IAAejD,GAAU3B,KAAK9V,EAAQ2a,cAAc,KAClD3a,EAAQ4a,yBAAyB,GACjC,KAMJ7a,EAAAA,EAAAA,IAAiB,2BAA4Bf,IAA6B,IAAA6b,EACxE,MAAMP,GAA6D,QAAtCO,EAAC7b,EAAOyY,UAAU6C,4BAAoB,IAAAO,EAAAA,EAAI,GAAK,EAE5E,OAAO9B,EAAAA,EAAAA,IAAuB/Z,EAAQ,CACpCsb,uBACAQ,aAAeR,GARU,EASrB5O,KAAKC,MAR6B,UAQe9L,GACrD,KAGJE,EAAAA,EAAAA,IAAiB,8BAA+Bf,IACvC+Z,EAAAA,EAAAA,IAAuB/Z,EAAQ,CACpCsb,qBAAsB,EACtBQ,kBAAcjb,OAIlBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEqW,GAAUrW,EAElB,OAAO8Y,EAAAA,EAAAA,IAAuB/Z,EAAQ,CAAEsX,SAAQ,KAGlDvW,EAAAA,EAAAA,IAAiB,sBAAuBf,IAC/B+Z,EAAAA,EAAAA,IAAuB/Z,EAAQ,CAAEsX,WAAOzW,OAGjDE,EAAAA,EAAAA,IAAiB,oBAAoB,KACnC0Y,GAAiB,CAAI,I,8CCvBvB,MAEMsC,EAA0B,IAAIC,IAE9BC,GAA0BtL,EAAAA,EAAAA,KAAUuL,GAAOA,KAAM,KAAK,GAszB5DpC,eAAelP,EACb5K,EACA+C,EACArC,EACAyb,EACAxR,GAIA,IAHAyR,EAAUlc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACVmc,EAAenc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAoc,EAAApc,UAAAC,OAAAoc,EAAA,IAAAlc,MAAAic,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAtc,UAAAsc,GAAA,IACnBjc,GAAQC,EAAAA,EAAAA,OAAkB+b,EAE9B,MAAM9b,EAASsC,EAAKnB,GAEpB,IAAI6a,EACJ,OAAQ9R,GACN,KAAK+R,EAAAA,GAAAA,UACHD,OAAY5b,EACZ,MACF,KAAK6b,EAAAA,GAAAA,OACHD,IAAc/O,KAAK4K,MAAMqE,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKD,EAAAA,GAAAA,SACHD,IAAcE,EAAAA,IAAqB,GAIvC3c,GAASuJ,EAAAA,EAAAA,MACT,MAAMxD,QAAe6W,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C7Z,MAAMC,EAAAA,EAAAA,IAAWhD,EAAQS,GACzB0b,WACAM,YACA1G,MAAO4G,EAAAA,IACPjc,aAGF,IAAKqF,EACH,OAGF,MAAM,SACJT,EAAQ,MAAEuX,EAAK,MAAE/N,EAAK,mBAAEgO,GACtB/W,EAEJ/F,GAASuJ,EAAAA,EAAAA,MAET,MAAMwT,EAAgBtc,IAAWwM,EAAAA,IAC7BjN,EAAO+M,qBAAqBvH,QAAOwX,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAAMC,CAAS,IAAE1X,KAAI2X,IAAA,IAAC,QAAEzX,GAASyX,EAAA,OAAKzX,CAAO,IAC9F,GACE0X,EAAe,GAAoBC,OAAO9X,EAAUyX,GACpDM,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzClT,EAAMnC,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAElClI,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQS,EAAQ4c,GAC7Crd,EAASoc,GACLoB,EAAAA,EAAAA,IAAoBxd,EAAQS,EAAQC,EAAUuJ,IAC9CwT,EAAAA,EAAAA,IAAgBzd,EAAQS,EAAQC,EAAUuJ,GAE9CjK,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,OACtD9O,GAAS4d,EAAAA,EAAAA,IAAkB5d,EAAQS,EAAQqc,GAE3C,IAAIe,GAAYC,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQC,GAChD,MAAMqd,EAAe5B,GAAW6B,EAAAA,EAAAA,IAA8Bhe,EAAQS,EAAQC,EAAUyb,QAAYtb,EAWpG,GATIub,GAAcyB,GAAaE,IACxBA,EAAa5d,UAAU8d,EAAAA,EAAAA,IAA4BJ,EAAWE,KACjE/d,GAASyd,EAAAA,EAAAA,IAAgBzd,EAAQS,EAAQC,EAAUqd,GACnDF,GAAYC,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQC,GAC5CV,GAASke,EAAAA,EAAAA,IAAmBle,EAAQS,EAAQC,EAAUqd,GACtD3B,GAAa,KAIZC,EAAiB,CACpB,MAAM8B,EAAa/B,EAAa2B,EAAgBF,GAC1C,eAAEO,GAAmBC,EAAiBF,EAAYhC,EAAUxR,GAClE3K,GAASse,EAAAA,EAAAA,IAAuBte,EAAQS,EAAQC,EAAU0d,EAAiB7d,EAC7E,EAEAqD,EAAAA,EAAAA,IAAU5D,EACZ,CA+CA,SAASqe,EACPE,EACApC,EACAxR,GAEA,MAAM,OAAExK,GAAWoe,EACbC,EAAQrC,EArBhB,SAA0BoC,EAAqBpC,GAC7C,OAAIA,EAAWoC,EAAU,GAChB,EAGLpC,EAAWoC,EAAUA,EAAUpe,OAAS,GACnCoe,EAAUpe,OAAS,EAGrBoe,EAAUxL,WAAU,CAACnR,EAAI6c,IAC9B7c,IAAOua,GACHva,EAAKua,GAAYoC,EAAUE,EAAI,GAAKtC,GAE5C,CAQ2BuC,CAAiBH,EAAWpC,IAAa,EAG5DwC,EAFchU,IAAc+R,EAAAA,GAAAA,UAEM8B,EAASA,EAAQ,GAAMre,EACzDye,EAFWjU,IAAc+R,EAAAA,GAAAA,OAEFhP,KAAK4K,MAAMqE,EAAAA,IAAqB,GAAKA,EAAAA,IAC5DkC,EAAOF,EAAoBC,EAC3BE,EAAKH,EAAoBC,EAAY,EACrCR,EAAiBG,EAAUzR,MAAMY,KAAKC,IAAI,EAAGkR,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQrU,GACN,KAAK+R,EAAAA,GAAAA,UACHqC,EAAeJ,EAAoB,EACnCK,EAAcH,GAAQ,EACtB,MACF,KAAKnC,EAAAA,GAAAA,SACHqC,EAAeJ,EAAoBxe,EACnC6e,EAAcF,GAAM3e,EAAS,EAC7B,MACF,KAAKuc,EAAAA,GAAAA,OACL,QACEqC,EAAeX,EAAeje,OAAS,EACvC6e,EAAcZ,EAAeje,SAAWwc,EAAAA,IAI5C,MAAO,CAAEyB,iBAAgBW,eAAcC,cACzC,CAEAlF,eAAemF,EAAmCjf,EAAWkf,GAejB,QAAAC,EAAAjf,UAAAC,OAAAif,EAAA,IAAA/e,MAAA8e,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAnf,UAAAmf,GAAA,IACtC3M,GADFnS,GAAQC,EAAAA,EAAAA,OAAkB4e,EAE5B,MAAME,EAAmBJ,EAAOK,WAAa,CAACC,EAAkBC,KACzD1D,EAAwB2D,IAAID,KAC/B/M,EAAU+M,EACV1D,EAAwB4D,IAAIF,EAAgBH,IAG9Ctf,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH4f,YAAa,CACXC,iBAAkB,IACb7f,EAAO4f,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,gBAI1B5b,EAAAA,EAAAA,IAAU5D,EAAO,OACfa,GAGAqe,EAAOY,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGRhgB,GAASuJ,EAAAA,EAAAA,MACT,MAAMrH,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,SAAExB,GAAawB,EAEhBgd,EAAOY,YAAcpf,IAAamB,EAAAA,KACrCqd,EAAOY,YAAaG,EAAAA,EAAAA,IAAyBjgB,EAAQkf,EAAOnc,KAAKnB,GAAIlB,IAGnEwe,EAAOY,aAAeZ,EAAOgB,iBAAmBxf,IAAamB,EAAAA,KAC/Dqd,EAAOgB,iBAAkBD,EAAAA,EAAAA,IAAyBjgB,EAAQkf,EAAOnc,KAAKnB,GAAIlB,UAGtEkc,EAAAA,EAAAA,IAAQ,cAAesC,EAAQI,GAEjCA,GAAoB5M,GACtBqJ,EAAwBoE,OAAOzN,EAEnC,CAqYA,SAAS0N,EAAkBb,GACzB,MAAM,iBACJc,EAAgB,SAAEC,GAChBf,EACJ,OAAIc,EAAyB,OACzBC,IAAaC,EAAAA,IAAsB,MACnCC,EAAAA,IAAAA,IAAkCF,IAAaG,EAAAA,IAAAA,IAAkCH,GAAkB,QACnGI,EAAAA,IAAAA,IAAkCJ,GAAkB,QACpDf,EAAWoB,MAAc,QACtB,MACT,EAn6CA5f,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJ0J,EAAY+R,EAAAA,GAAAA,OAAwB,gBACpCL,GAAkB,EAAK,kBACvBxR,GAAoB,EAAK,MACzBtK,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhB,IAAI,OAAER,EAAM,SAAEC,GAAaO,GAAW,CAAC,EAEvC,IAAKR,IAAWC,EAAU,CACxB,MAAMwB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGFzB,EAASyB,EAAmBzB,OAC5BC,EAAWwB,EAAmBxB,QAChC,CAEA,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC,IAAKsC,GAAQA,EAAK6d,aAChB,OAGF,MAAMxZ,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAC1Dsd,GAAYC,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQC,GAElD,GAAK0G,GAAgBA,EAAYjH,QAAUwK,IAAc+R,EAAAA,GAAAA,OAqBlD,CACL,MAAMP,EAAWxR,IAAc+R,EAAAA,GAAAA,UAA8BtV,EAAY,GAAKA,EAAYA,EAAYjH,OAAS,GACzGic,EAAa5U,QAAQqW,IAAcA,EAAUpT,SAAS0R,IACtDgC,EAAc/B,GAChB4B,EAAAA,EAAAA,IAA8Bhe,EAAQS,EAAQC,EAAUyb,GAAY0B,GAClE,eACJO,EAAc,aAAEW,EAAY,YAAEC,GAC5BX,EAAiBF,EAAYhC,EAAUxR,GAY3C,GAVIoU,IACF/e,GAASse,EAAAA,EAAAA,IAAuBte,EAAQS,EAAQC,EAAU0d,EAAgB7d,KAG5EsgB,EAAAA,EAAAA,KAAU,MAcd/G,eACE9Z,EACAgB,EACAge,EAAsB5C,EAAqBC,EAC3CtZ,EAAerC,EAAkBiK,EAA8BwR,GAE/D,QAAAlc,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAEzB4e,SACGpU,EACJ5K,EAAQ+C,EAAMrC,EAAUyb,EAAUxR,EAAWyR,EAAYC,EAAiB9b,GAIzE8b,GACHrb,EAAQ4J,qBAAqB,CAC3BnK,OAAQsC,EAAKnB,GAAIlB,WAAUiK,YAAW0R,iBAAiB,EAAM9b,SAGnE,CA/BWugB,CACH9gB,EAAQgB,EAASge,EAAa5C,EAAYC,EAAiBtZ,EAAMrC,EAAWiK,EAAWwR,EAAU5b,EAClG,IAGC8b,EACF,MAEJ,KA3CmF,CACjF,MAAMF,GAAW4E,EAAAA,EAAAA,IAAuB/gB,EAAQS,EAAQF,KAAUygB,EAAAA,EAAAA,IAAqBhhB,EAAQS,EAAQC,GACjG0b,EAAa5U,QAAQ2U,GAAY0B,IAAcA,EAAUpT,SAAS0R,IAClEgC,GAAc/B,GAChB4B,EAAAA,EAAAA,IAA8Bhe,EAAQS,EAAQC,EAAUyb,GACxD0B,IAAc,IACZ,eACJO,EAAc,aAAEW,EAAY,YAAEC,GAC5BX,EAAiBF,EAAYhC,EAAUO,EAAAA,GAAAA,QAEvCqC,GAAgBX,EAAeje,QAAUwc,EAAAA,MAC3C3c,GAASse,EAAAA,EAAAA,IAAuBte,EAAQS,EAAQC,EAAU0d,EAAgB7d,IAGvEye,IACH6B,EAAAA,EAAAA,KAAU,KACHjW,EACH5K,EAAQ+C,EAAMrC,EAAWyb,EAAUO,EAAAA,GAAAA,OAA0BN,EAAYC,EAAiB9b,EAC3F,GAGP,EAwBAqD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,sBAAuBG,GAAoB,KAuBjE9J,EAAAA,EAAAA,IAAiB,eAAe+Y,MAAO9Z,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEyG,EAAS,iBAAE+Z,EAAgB,aAAEC,GACnCjgB,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAM0C,QA0xBRqU,eACE9Z,EAAW+C,EAAemE,EAAmB+Z,GAE7C,MAAMlb,QAAe6W,EAAAA,EAAAA,IAAQ,eAAgB,CAAE7Z,OAAMmE,cACrD,GAAKnB,EAAL,CAIA,GAAIA,IAAWob,EAAAA,GAmBf,OALAnhB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQ+C,EAAKnB,GAAIsF,EAAWnB,EAAON,SAC9DzF,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,QAC7DjZ,EAAAA,EAAAA,IAAU5D,GAEH+F,EAAON,QAlBZ,GAAIwb,EAAkB,CACpBjhB,GAASuJ,EAAAA,EAAAA,MACT,MAAM8X,GAAe3M,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIqf,GACxDjhB,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQ+C,EAAKnB,GAAIqf,EAAkB,IACzDI,EACHC,sBAAkBzgB,KAEpB+C,EAAAA,EAAAA,IAAU5D,EACZ,CAXF,CAsBF,CAtzBwBuhB,CAAYvhB,EAAQ+C,EAAMmE,EAAW+Z,GAC3D,GAAIxb,GAAWyb,EAAc,CAC3B,MAAM,cAAE5Y,EAAa,WAAEkZ,GAAeN,EACtClhB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASyhB,EAAAA,EAAAA,IACPzhB,EACAyF,EACAhF,EACA6H,EACAkZ,IAEF5d,EAAAA,EAAAA,IAAU5D,EACZ,MAGFe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAE5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAInC,GAFAjB,GAAUygB,EAAAA,EAAAA,IAAKzgB,EAAS,CAAC,UAEZ,cAATa,IAAyBb,EAAQ0gB,YACnC,OAAOpf,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B4C,qBAAsB3B,GACrBV,GAGL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BiH,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClDkhB,EAAoBla,GAAegN,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiH,QAAgB7G,EAErFqf,EAAkBnd,EAAKE,SACzBgd,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,GACzCkhB,GAAmBC,qBAAuBD,GAAmBN,iBAE3DpC,EAAS,IACVje,EACH8B,OACA+c,WAAYpY,EACZwY,kBACA4B,WAAWC,EAAAA,EAAAA,IAAgB/hB,EAAQS,EAAQC,GAC3CshB,QAAQC,EAAAA,EAAAA,IAAajiB,EAAQS,IAG/BO,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQkhB,oBAAoB,CAAE3hB,UAE9B,MAAM4hB,GAAYlhB,EAAQmhB,aAAenhB,EAAQmhB,YAAYjiB,QAAU,EACjEkiB,GAAaF,GAAYlhB,EAAQqhB,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAerD,EACvCD,EAAYjf,EAAQ,IACfuiB,EACHhD,WAAY6C,EAAcA,EAAY,QAAKvhB,GAC1CN,EACL,MAAO,GAAI8hB,EAAW,CACpB,MAAM,KACJve,EAAI,SAAE0e,EAAQ,YAAEJ,KAAgBK,GAC9BvD,EACEwD,EAwtCV,SAAgCN,GAC9B,OAAOA,EAAYpc,QAAO,CAACC,EAAKsZ,EAAYf,EAAOmE,IACnC,IAAVnE,GACFvY,EAAIG,KAAK,CAACmZ,IACHtZ,IAGIma,EAAkBb,KACVa,EAAkBuC,EAAInE,EAAQ,IAEjDvY,EAAIA,EAAI9F,OAAS,GAAGiG,KAAKmZ,GAEzBtZ,EAAIG,KAAK,CAACmZ,IAGLtZ,IACN,GACL,CAzuCmB2c,CAAuBR,GAEtCM,EAAOhX,SAAQ,CAACmX,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAIxE,EAAI,EAAGA,EAAIsE,EAAmB5iB,OAAQse,IAAK,CAClD,MAAOyE,KAAoBC,GAAmBJ,EAAmBtE,GAC3D5U,EAAa,GAAE6C,KAAKC,QAAQmW,IAAarE,IAEzC2E,EAAgB,IAAN3E,GAA0B,IAAfqE,EAE3B7D,EAAYjf,EAAQ,IACfyiB,EACH3e,KAAMsf,EAAUtf,OAAOjD,EACvB2hB,SAAUY,EAAUZ,OAAW3hB,EAC/B0e,WAAY2D,EACZrZ,UAAWsZ,EAAgBhjB,OAAS,EAAI0J,OAAYhJ,GACnDN,GAEH4iB,EAAgBzX,SAAS6T,IACvBN,EAAYjf,EAAQ,IACfyiB,EACHlD,aACA1V,aACCtJ,EAAM,GAEb,IAEJ,KAAO,CACL,MAAM,KACJuD,EAAI,SAAE0e,EAAQ,YAAEJ,EAAW,WAAEtC,KAAe2C,GAC1CvD,EAEApb,GACFmb,EAAYjf,EAAQ,IACfyiB,EACH3e,OACA0e,WACA1C,cACCvf,GAGL6hB,GAAa1W,SAAS6T,IACpBN,EAAYjf,EAAQ,IACfyiB,EACHlD,cACChf,EAAM,GAEb,CAEgB,KAGlBQ,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,KAAE6C,EAAI,SAAE0e,EAAQ,MAAEjiB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMkD,GAAoB9C,EAC9Ca,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAU4d,EAAAA,EAAAA,IAAqBrjB,EAAQS,EAAQC,EAAUsE,GAC1DjC,GAAS0C,KAITmX,EAAAA,EAAAA,IAAQ,cAAe,CAC1B7Z,OAAM0C,UAAS3B,OAAM0e,WAAUV,WAAWC,EAAAA,EAAAA,IAAgB/hB,EAAQS,EAAQC,KAG5EM,EAAQsiB,aAAa,CAAEpc,eAAWrG,EAAWN,UAAQ,KAGvDQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxBwE,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAC5CoY,EAAmB7Z,GAAWsW,EAAwBwH,KAAIC,EAAAA,EAAAA,IAAqB/d,IACjF6Z,IACFmE,EAAAA,EAAAA,IAAkBnE,GAGpBte,EAAQkN,UAAU,CAChB,QAAS,iBACTjE,IAAK,CAAC/C,GACNzG,UACA,KAGJM,EAAAA,EAAAA,IAAiB,aAAa+Y,MAAO9Z,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,MAAEgjB,EAAK,YAAEC,GACvB1iB,EACJ,IAAKyiB,EACH,OAGF,MAAM,KAAE5f,EAAI,SAAE0e,GAAakB,EACrB3gB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BmjB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQS,GAC5BmjB,IAAQE,EAAAA,EAAAA,IAAcF,KAE1BF,EAAMK,SAAU,EAChBL,EAAMC,YAAcA,EACpB3jB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAASgjB,GAC/D1jB,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEwjB,UAAWvW,KAAK4K,MAAM5L,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAU5D,SAEW4c,EAAAA,EAAAA,IAAQ,YAAa,CACxC7Z,OACAe,OACA0e,WACA0B,cAAcvc,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACjDA,UAAUuf,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,OAInDgjB,EAAMK,SAAU,GAGlB/jB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAASgjB,GAC/D1jB,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEwjB,UAAWvW,KAAK4K,MAAM5L,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,UAAEsiB,EAAS,YAAER,GAC5C1iB,EACJ,KAAKmjB,EAAAA,EAAAA,IAAYpkB,EAAQS,EAAQC,GAC/B,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3B0jB,IACEvH,EAAAA,EAAAA,IAAQ,aAAc7Z,GAAMkd,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,IAG5E,MAAM2jB,EAAiCV,EAAc,CAAEA,cAAa7f,KAAM,SAAOjD,EAIjF,OAHAb,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAAS2jB,IACtDL,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEwjB,eAAWpjB,GAEpC,KAGfE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,SAAEC,EAAQ,UAAEohB,GAAc7gB,EAExC,OAAOgG,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,YAAaohB,EAAU,KAG7E/gB,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,UACJiG,EAAS,QAAEod,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAEjkB,GAAQC,EAAAA,EAAAA,OAC/CS,EAEE8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCwC,IAIA6Z,EAAAA,EAAAA,IAAQ,aAAc,CACzB7Z,OAAMmE,YAAWod,UAASC,YAAWC,YACrC,KAGJzjB,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAM0hB,GAAQxE,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,SACjDkc,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE7Z,OAAMrC,SAAU+jB,IAEpDzkB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIC,EAAAA,GAAgB,YAAa,KAC1E+B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,WAAE8D,EAAU,mBAAE2f,EAAkB,MAAEnkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAE3Bmc,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE7Z,OAAMgC,aAAY2f,uBAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgB5kB,EAAQS,EAAQC,GAC9CikB,GAAa5f,EAAW0F,SAASka,IACnC3jB,EAAQsiB,aAAa,CAAEpc,eAAWrG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,WAAE8D,EAAU,MAAExE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACba,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAE3Bmc,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE7Z,OAAMgC,eAEhD,MAAM4f,GAAYE,EAAAA,EAAAA,IAAyB7kB,EAAQS,GAC/CkkB,GAAa5f,EAAW0F,SAASka,IACnC3jB,EAAQsiB,aAAa,CAAEpc,eAAWrG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,mBAAEikB,EAAkB,MAAEnkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5D8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,aAGI6Z,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7Z,OAAM2hB,uBAEvC1kB,GAASuJ,EAAAA,EAAAA,MACT,MAAMub,GAAankB,EAAAA,EAAAA,IAAyBX,EAAQO,GAChDukB,GAAcA,EAAWrkB,SAAWA,GACtCO,EAAQ6C,SAAS,CAAEjC,QAAIf,EAAWN,SACpC,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,WACJ8D,EAAU,OAAEggB,EAAM,YAAEC,EAAW,MAAEzkB,GAAQC,EAAAA,EAAAA,OACvCS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACba,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1BsF,QAAe6W,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CqI,KAAMliB,EAAMgC,aAAYggB,SAAQC,gBAGlChkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACLmf,EAAAA,EAAAA,IAAU,2BACV,2EACJ3kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,OAAEgU,EAAM,OAAExU,EAAM,SAAEC,GAAaO,EACrC,GAAIR,IAAWT,EAAOmY,cAAe,OAErC,MAAMpV,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OACX,MAAM6gB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQS,GAC5BmjB,KAASuB,EAAAA,EAAAA,IAAUvB,KAASE,EAAAA,EAAAA,IAAcF,WAExChH,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCqI,KAAMliB,EAAMrC,WAAUuU,UACtB,KAGJlU,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEwM,EAAK,MAAElN,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvCiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGFkZ,GAAwB,MACjBW,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC7Z,OAAMrC,WAAU+M,SAChB,IAGAhN,IAAWwM,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqBxH,KAAKkN,GAC9CA,EAAaxE,UAAYwE,EAAa7Q,IAAM6L,EAAQ,IAAKgF,EAAcxE,UAAU,GAAUwE,MAKxG,MAAMrL,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAC1D6kB,GAAQC,EAAAA,EAAAA,IAAoBrlB,EAAQS,EAAQC,GAClD,IAAK0G,IAAgBge,IAAUriB,EAAKuiB,YAClC,OAAOtlB,EAGT,MAAMulB,EAm5BR,SAAwBtb,EAAe4U,EAAcC,GACnD,IAAI0G,EAAQ,EAEZ,IAAK,IAAI/G,EAAI,EAAG7K,EAAI3J,EAAI9J,OAAQse,EAAI7K,IAC9B3J,EAAIwU,IAAMI,GAAQ5U,EAAIwU,IAAMK,GAC9B0G,MAGEvb,EAAIwU,IAAMK,IALuBL,KAUvC,OAAO+G,CACT,CAj6BoBC,CAAere,EAAcge,EAAO3X,GACtD,IAAK8X,EACH,OAAOvlB,EAGT,GAAI+C,EAAKE,SAAWF,EAAK8V,SAASnY,GAAW,CAC3C,MAAMglB,EAAQ3iB,EAAK8V,OAAOnY,GAC1BV,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQS,EAAQC,EAAU,CAClDklB,uBAAwBnY,IAE1B,MAAMoY,EAAsBnY,KAAKC,IAAI,EAAG+X,EAAMJ,YAAcC,GAM5D,OAL4B,IAAxBM,IACF7lB,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC6kB,YAAa5X,KAAKC,IAAI,EAAG5K,EAAKuiB,YAAc,OAGzCQ,EAAAA,EAAAA,IAAY9lB,EAAQS,EAAQC,EAAU,CAC3C4kB,YAAaO,GAEjB,CAGA,OAAInlB,IAAamB,EAAAA,IAIVmiB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAChCmlB,uBAAwBnY,EACxB6X,YAAa5X,KAAKC,IAAI,EAAG5K,EAAKuiB,YAAcC,UAN9C,CAOE,KAGJxkB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAE8D,EAAU,MAAExE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCwC,IAIA6Z,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE7Z,OAAMgC,cAAa,KAGxDhE,EAAAA,EAAAA,IAAiB,sBAAsB+Y,MAAO9Z,EAAQgB,EAASC,KAC7D,MAAM,KAAE6C,EAAI,MAAEvD,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtC8kB,QAAuBnJ,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEnX,QAAS3B,IAEvE9D,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+lB,kBACCxlB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,IAAKK,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwlB,eAInC,OAAOxjB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+lB,oBAAgBllB,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OAAER,EAAM,UAAEyG,EAAS,QAAE8e,GAAY/kB,EACjC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,IACG6Z,EAAAA,EAAAA,IAAQ,eAAgB,CAAE7Z,OAAMmE,YAAW8e,WAClD,KAGFjlB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,IACG6Z,EAAAA,EAAAA,IAAQ,eAAgB,CAAE7Z,OAAMmE,YAAW8e,QAAS,IAC3D,KAGFjlB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BwlB,GAAOvR,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,IAAYkG,QAAQ6Y,KAC/DljB,GAAQkjB,IACLrJ,EAAAA,EAAAA,IAAQ,YAAa,CAAE7Z,OAAMmE,YAAW+e,QAC/C,KAGFllB,EAAAA,EAAAA,IAAiB,yBAAyB+Y,MAAO9Z,EAAQgB,EAASC,KAChE,MAAM,KACJ8B,EAAI,UAAEmE,EAAS,OAAEgf,EAAM,OAAE3W,EAAM,MAAEwG,EAAK,kBAAEoQ,EAAiB,MAAE5lB,GAAQC,EAAAA,EAAAA,OACjES,EAEE8E,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD7Z,OAAMmE,YAAWgf,SAAQ3W,SAAQwG,UAGnC,IAAKhQ,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAE7D,MAAM1a,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,IAClC,YAAE6I,GAAgBjH,GAClB,OAAEkH,GAAWlH,EAASiH,YAE5BpJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoJ,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAC6c,IAAS9P,EAAAA,EAAAA,IAAO,KACV+P,GAAqB9c,GAAUA,EAAO6c,GAAU7c,EAAO6c,GAAU,MAClEngB,GAAUA,EAAO8W,MAAMtX,KAAKqe,GAASA,EAAKhiB,QAGlDwkB,QAAS,IACHhd,EAAYgd,QAAUhd,EAAYgd,QAAU,CAAC,EACjD,CAACF,GAASngB,EAAOsgB,YAAc,MAGlC9lB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,IAAEwJ,GAAQhJ,EAClB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC5BsC,IACG6Z,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE7Z,OAAMkH,OAC7C,KAGFlJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,SAAEujB,EAAQ,YAAE7C,EAAW,MAAEphB,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvD,WACJ6J,EAAU,WAAE/F,EAAU,SAAEjC,EAAQ,YAAEiI,EAAW,UAAEI,EAAS,WAAEC,EAAU,WAAEkb,IACpEhlB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAC5B0jB,GAAuBC,EAAAA,EAAAA,IAA2BxmB,GAClDymB,EAAW3b,GAAa9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,QAAcjK,EACzD6lB,EAAS5jB,GAAWE,EAAAA,EAAAA,IAAWhD,EAAQ8C,QAAYjC,EACnDyE,EAAWwF,GAAc/F,EAC3BA,EACCa,MAAK,CAAC+gB,EAAGC,IAAMD,EAAIC,IACnBrhB,KAAK3D,IAAO8S,EAAAA,EAAAA,IAAkB1U,EAAQ8K,EAAYlJ,KAAK4D,OAAOgC,cAC/D3G,EAEJ,IAAK4lB,IAAaC,IAAWphB,GAAaghB,IAAeI,EAAOzjB,QAC9D,OAGF,MAAM+e,GAASC,EAAAA,EAAAA,IAAajiB,EAAQ8C,GAE9B+jB,EAAevhB,EAASE,QAAQshB,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAa1mB,SACVyc,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9B6J,WACAC,SACAJ,aACAhhB,SAAUuhB,EACVrC,WACA7C,cACAK,SACAjX,cACAI,YACAC,aACAmb,yBAIJjhB,EACGE,QAAQshB,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3Cpb,SAASjG,IACR,MAAM,KAAE3B,EAAI,SAAE0e,GAAa/c,EAAQ2H,QAAQtJ,MAAQ,CAAC,GAC9C,QAAE8N,EAAO,KAAEqU,GAASxgB,EAAQ2H,QAE7B6R,EAAYjf,EAAQ,CACvB+C,KAAM2jB,EACNxG,gBAAiBoG,EACjBxiB,OACA0e,WACA5Q,UACAqU,OACAzB,WACA7C,cACAK,UACCzhB,EAAM,IAGbP,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7Z,SACxD,IAAKgD,EACH,OAGF,MAAM,SAAET,GAAaS,EAEfsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtC2E,EAAMnC,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAAQtC,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IAK7D,GAHA3mB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgnB,EAAAA,EAAAA,IAAyBhnB,EAAQ+C,EAAKnB,GAAIyb,GACnDrd,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIC,EAAAA,GAAgB,eAAgBoI,GACzElH,GAAME,QAAS,CACjB,MAAMgkB,EAA+C,CAAC,EACtD3hB,EAASoG,SAASjG,IAChB,MAAM/E,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQyF,GAC7C0hB,EAAoBF,EAAmBvmB,IAAa,GAC1DymB,EAAkB/gB,KAAKX,EAAQ7D,IAC/BqlB,EAAmBvmB,GAAYymB,CAAiB,IAGlDrf,OAAOsf,QAAQH,GAAoBvb,SAAQkC,IAA8B,IAA5BlN,EAAU2mB,GAAazZ,EAClE5N,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIsG,OAAOxH,GAAW,eAAgB2mB,EAAa,GAEhG,EACAzjB,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,OACJR,EAAM,GAAEmB,GACNX,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,IAIA6Z,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC7Z,OACAkH,IAAK,CAACrI,IACN,KAGJb,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEyG,EAAS,YAAEya,GACjB1gB,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,EAAU1C,IAAQukB,EAAAA,EAAAA,IAAuBtnB,EAAQ+C,EAAKnB,GAAIsF,GAC3DnE,GAAS0C,IAITmX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC7Z,OACA0C,UACAkc,eACA,KAGJ5gB,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE7Z,OAAMrC,aAC3DqF,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,QAC7DjZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,EAASC,KAC1D,MAAM,UAAEiG,EAAS,OAAEzG,GAAWQ,EAExB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC,IAAKsC,EAAM,OAEX/C,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQyG,EAAW,CACpDqgB,gBAAiB,MAGnB3jB,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAe6W,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE7Z,OAAMmE,cAExDlH,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQyG,EAAW,CACpDqgB,gBAAiBxhB,EACjByhB,sBAAuBzhB,KAGzBnC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,IAAEgJ,EAAG,YAAEwd,GAAgBxmB,EACvBymB,EAAoBD,EAAcxd,GACpCmM,EAAAA,EAAAA,IAAOnM,EAAIzE,QAAQ0M,IAAgBlS,EAAOwS,aAAa6K,KAAKnL,MAC1DyV,QAAoB/K,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD1K,WAAYwV,IAETC,IAEL3nB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHwS,aAAc,IACTxS,EAAOwS,aACV6K,KAAM,IACDrd,EAAOwS,aAAa6K,SACpBC,EAAAA,EAAAA,IAAqBqK,EAAa,UAI3C/jB,EAAAA,EAAAA,IAAU5D,GAAO,KAqOnBe,EAAAA,EAAAA,IAAiB,sBAAsB+Y,MAAO9Z,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE7Z,OAAMrC,aAC5D,IAAKqF,EACH,OAGF,MAAM,SAAET,EAAQ,MAAEwJ,EAAK,MAAE+N,GAAU9W,EAE7BsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtC2E,EAAMnC,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAAQtC,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IAE7D3mB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQ+C,EAAKnB,GAAIyb,GAC9Crd,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIlB,EAAU,YAAauJ,GACpEjK,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,QACtDlL,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAc+Y,MAAO9Z,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,cAAe,CAAE7Z,OAAMmE,cAC/CnB,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQyG,EAAW,CACpD0gB,cAAe7hB,KAEjBnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,SAAEonB,GAAa5mB,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BqnB,GAAa9kB,EAAAA,EAAAA,IAAWhD,EAAQ6nB,KAAahE,EAAAA,EAAAA,IAAW7jB,EAAQ6nB,GACtE,GAAK9kB,GAAS+kB,EAMd,OAFKlL,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEoF,OAAQ8F,EAAY/kB,UAEjDihB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAChCsnB,SAAU,IACLhlB,EAAKglB,SACRF,aAEF,KAGJ9mB,EAAAA,EAAAA,IAAiB,cAAc+Y,MAAO9Z,EAAQgB,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,cAAe,CAAE7Z,SAC9C,IAAKgD,EAOH,OANA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClCunB,cAAe,UAEjBpkB,EAAAA,EAAAA,IAAU5D,GAKZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAC7D7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO+I,MAAO,OAC7D9O,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEunB,cAAejiB,EAAOic,UAC5Dpe,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB+Y,MAAO9Z,EAAQgB,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE7Z,SACpDgD,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASioB,EAAAA,EAAAA,IAAuBjoB,EAAQS,EAAQsF,EAAOT,SAAS,IAChEtF,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAC7D7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO+I,MAAO,QAC7DlL,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAUyiB,EAAAA,EAAAA,IAAuBloB,EAAQS,GAC1CsC,GAAS0C,IAITmX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE7Z,OAAMolB,OAAQ1iB,EAAQ2iB,UAAW,KAG1ErnB,EAAAA,EAAAA,IAAiB,uBAAuB+Y,MAAO9Z,EAAQgB,EAASC,KAC9D,MAAM,OAAER,EAAM,SAAE0b,GAAalb,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE7Z,OAAMoZ,aAE5D,IAAKpW,EAAQ,OAEb,MAAM,SAAET,EAAQ,MAAEwJ,EAAK,MAAE+N,GAAU9W,EAE7BsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtC2E,EAAMnC,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAElClI,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQ+C,EAAKnB,GAAIyb,GAC9Crd,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,OACtD9O,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC4nB,eAAgB,IAAKtlB,EAAKslB,gBAAkB,MAAQpe,MAGtDrG,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAE8D,EAAU,MAAExE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EAAM,OAEX,MAAMslB,GAAkBtlB,EAAKslB,gBAAkB,IAAI7iB,QAAQ5D,IAAQmD,EAAW0F,SAAS7I,KACvF5B,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQ+C,EAAKnB,GAAI,CACnCymB,oBAGFzkB,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQsnB,iBAAiB,CAAEvjB,aAAYxE,SAAQ,KAGjDQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAElCwC,GAAMslB,gBAEXrnB,EAAQwH,aAAa,CAAE/H,OAAQsC,EAAKnB,GAAIsF,UAAWnE,EAAKslB,eAAe,GAAI9nB,SAAQ,KAGrFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAIL,OAFA6Z,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE7Z,UAEtBihB,EAAAA,EAAAA,IAAWhkB,EAAQ+C,EAAKnB,GAAI,CACjC2mB,yBAAqB1nB,EACrBwnB,oBAAgBxnB,GAChB,KAGJE,EAAAA,EAAAA,IAAiB,WAAW,CAACf,EAAQgB,EAASC,KAC5C,MAAM,IAAEqT,EAAG,gBAAEkU,EAAe,MAAEjoB,GAAQC,EAAAA,EAAAA,OAAsBS,EACtDwnB,GAAkBC,EAAAA,EAAAA,GAAepU,GAEvC,GAAImU,EAAgBE,MAAMC,EAAAA,MAAgBH,EAAgBE,MAAME,EAAAA,KAE9D,YADA7nB,EAAQ8nB,iBAAiB,CAAExU,MAAK/T,UAIlC,MAAM,UAAEwoB,GAAc/oB,EACtB,GAAI+oB,EAAW,CACb,MAAMC,EAAY,IAAIC,IAAIR,GAE1B,GAAIM,EAAUG,iBAAiBze,SAASue,EAAUG,UAGhD,OAFAH,EAAUI,aAAazJ,IAhuCD,kBAguC0BoJ,EAAUM,qBAC1D9lB,OAAOC,KAAKwlB,EAAU3Y,KAAM,SAAU,YAIxC,GAAI0Y,EAAUO,eAAe7e,SAASue,EAAUG,UAE9C,YADAnoB,EAAQuoB,mBAAmB,CAAEjV,MAAK/T,SAGtC,CAE4BkoB,EAAgBE,MAAMa,EAAAA,MAAsBhB,EAKtEjlB,OAAOC,KAAKilB,EAAiB,SAAU,YAFvCznB,EAAQyoB,oBAAoB,CAAEnV,IAAKmU,EAAiBloB,SAGtD,KAGFQ,EAAAA,EAAAA,IAAiB,yBAAyB+Y,MAAO9Z,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,QAAE8V,EAAO,MAAEhW,GAAQC,EAAAA,EAAAA,OAAsBS,EACvD,IAAI2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQS,GAC9B,GAAImjB,IAAQ8F,EAAAA,EAAAA,IAAmC1pB,EAAQO,GAAQ,CAC7D,IAAKqjB,EAAKmE,SAAU,CAClB,MAAM,WAAE4B,GAAe/F,EACvBA,QAAahH,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,GAAInB,EAAQkpB,eACpD3pB,GAASuJ,EAAAA,EAAAA,KACX,CAEA,GAAIqa,GAAMmE,SAAU6B,gBAOlB,YANA5oB,EAAQ6oB,WAAW,CACjB9V,KAAM,CACJtO,SAASyf,EAAAA,EAAAA,IAAU,oCAAoC4E,EAAAA,EAAAA,IAAgBlG,KAEzErjB,SAIN,EAEKwpB,EAAAA,EAAAA,IAA8B/pB,EAAQS,EAAQF,IAKnDP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAUrC,EACV6lB,WAAY/P,EACZrL,cAAc,IAEf3K,IACHqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,SAAU6V,EAAShW,UAClDS,EAAQgpB,iBAAiB,CAAEzpB,UAC3BS,EAAQ0B,sBAAsB,CAAEnC,WAhB9BS,EAAQipB,oCAAoC,CAAExpB,SAAQF,SAgBhB,KAG1CQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAU9C,EAAOmY,gBAElB5X,IACHqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ0B,sBAAsB,CAAEnC,UAChCS,EAAQ6B,gBAAgB,CAAE2hB,UAAU,EAAMjkB,SAAQ,KAGpDQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,GAAEmB,EAAE,eAAEsoB,GAAiBC,EAAAA,EAAAA,IAAmBnqB,GAAO,MAAEO,GAAQC,EAAAA,EAAAA,OAC/DS,EAIJ,OAFSmpB,EAAAA,EAAAA,IAAkCpqB,EAAQS,EAAQmB,EAAIsoB,EAAgB3pB,EAElE,KAGfQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAClBS,EAIJ,OAFSopB,EAAAA,EAAAA,IAAkCrqB,EAAQS,EAAQmB,EAAIrB,EAElD,KAGfQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,WAAEsE,EAAU,eAAEmlB,GAAiBC,EAAAA,EAAAA,IAAmBnqB,IACtDiB,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,GAAKsC,EAcL,OAZAgC,EAAW2G,SAAS9J,IAClB5B,GAASsqB,EAAAA,EAAAA,IAAyBtqB,EAAQS,EAAQmB,EAAIsoB,EAAgB,CACpEK,WAAW,GACX,KAGJ3N,EAAAA,EAAAA,IAAQ,gBAAiB,CACvB7Z,OACAgC,aACAmlB,mBAGKlqB,CAAM,KAGfe,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,IAAEwJ,GAAQhJ,EAElB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD7Z,OACAkH,QAGGlE,IAEL/F,GAASuJ,EAAAA,EAAAA,MACTxD,EAAO2F,SAAS8e,IACdxqB,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQ+pB,EAAO5oB,GAAI,CACpD6oB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAGnB,MAAMjlB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQ+pB,EAAO5oB,IACzD,IAAK6D,EAAS,OAEd,MAAMklB,EAAgBllB,EAAQmlB,mBAAmBnqB,OAC3CC,EAAW+E,EAAQmlB,mBAAmBlqB,SACvCiqB,GAAkBjqB,IAEvBV,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQ2qB,EAAejqB,EAAU,CACzDmqB,cAAeL,EAAOK,cACtBC,iBAAkBN,EAAOM,iBACzBxiB,cAAekiB,EAAO/c,MACtBmY,uBAAwB4E,EAAOO,YAC/B,KAGJnnB,EAAAA,EAAAA,IAAU5D,GAAO,I,0BC57CnB,MAGMgrB,IAAkBC,EAAAA,EAAAA,KAAU/O,GAAOA,KAAM,KAAK,GAkfpDpC,eAAeoR,GAA0ClrB,EAAW+R,GAClE,MAAMoZ,QAAuBvO,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE7K,SACzDoZ,IAILnrB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQsZ,KAGZvnB,EAAAA,EAAAA,IAAU5D,GACZ,CAEA8Z,eAAesR,GACbprB,EACAgB,EACAqqB,GAEA,QAAAprB,EAAAC,UAAAC,OAAAoc,EAAA,IAAAlc,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAic,EAAAjc,EAAA,GAAAJ,UAAAI,GAAA,IACIgrB,GAFA/qB,GAAQC,EAAAA,EAAAA,OAAkB+b,EAG9B,IACE+O,QAAmB1O,EAAAA,EAAAA,IACjB,gBACA,CAAEyO,kBAEN,CAAE,MAAO/T,GACP,GAAoC,uBAA/BA,EAAmB7R,QAatB,OAZAzE,EAAQqL,iBAAiB,CACvB5G,SAASyf,EAAAA,EAAAA,IAAU,6BACnB3kB,eAGE,cAAe8qB,IACd/pB,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0V,4BAA8BoV,EAAeE,YAC9EvrB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BiW,+BAA2BpV,GAC1BN,IACHqD,EAAAA,EAAAA,IAAU5D,IAIhB,CAGA,GAFAA,GAASuJ,EAAAA,EAAAA,OAEJ+hB,EAEH,OAGF,MAAM,IAAE3L,EAAG,SAAE7N,EAAQ,MAAE0Z,GAAUF,EAI3BG,GAFNzrB,GAAS0rB,EAAAA,EAAAA,IAAiB1rB,EAAQ2f,EAAI/d,GAAI,IAAK+d,EAAK7N,WAAU0Z,WAElC1Z,SAAS6Z,SAASrlB,MAC1CmlB,GAAgBD,EAAMC,KACxBzrB,GAAS4rB,EAAAA,EAAAA,IAAwB5rB,KAGnC4D,EAAAA,EAAAA,IAAU5D,EACZ,CAkLA8Z,eAAe+R,GAAkC7rB,EAAWkB,EAAe4qB,EAAsBvc,GACnD,QAAA+M,EAAApc,UAAAC,OAAAif,EAAA,IAAA/e,MAAAic,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA4C,EAAA5C,EAAA,GAAAtc,UAAAsc,GAAA,IAAxCjc,GAAQC,EAAAA,EAAAA,OAAkB4e,EAC9B,MAAMrZ,QAAe6W,EAAAA,EAAAA,IAAQ,aAAc,CAAE1b,QAAOqO,SAAQwc,SAAUD,IACjE/lB,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgsB,EAAAA,EAAAA,IAAgBhsB,GAASuP,EAAQxJ,EAAOkmB,KAAMlmB,EAAOsgB,WAAY9lB,IAC1EqD,EAAAA,EAAAA,IAAU5D,GACZ,EA5uBAe,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,KACjD,MAAOkrB,EAAeC,SAA2BC,QAAQC,IAAI,EAC3DzP,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE7K,KAAM/R,EAAO8R,SAASQ,MAAMP,QAC1D6K,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE7K,KAAM/R,EAAOwS,aAAaF,MAAMP,SAE/Doa,GAAsBD,IAI3BlsB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASssB,EAAAA,EAAAA,IACPtsB,EACA,QACAksB,EAAcna,KACdma,EAAcK,MAGhBvsB,GAASwsB,EAAAA,EAAAA,IACPxsB,EACAmsB,EAAkBpa,KAClBoa,EAAkBI,OAGpB3oB,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQyrB,iBAAiB,CACvBxiB,IAAKjK,EAAOmS,qBACZ,KAGJpR,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAEhDqR,OACEC,OAAQma,EAAc,IAExBC,SAAUC,GACR5sB,EAAO8R,UAETQ,OACEC,OAAQsa,EAAoB,KAE5B7sB,EAAOwS,aACLsa,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAa3sB,OAIlB,IAAK,IAAIse,EAAI,EAAGA,EAAIqO,EAAa3sB,OAAQse,IAAK,CAC5C,MAAM7c,EAAKkrB,EAAarO,GACpBmO,EAAOhrB,IAAKkQ,WAGhB9Q,EAAQoqB,aAAa,CACnBC,eAAgB,CAAEzpB,KAAI+nB,WAAYiD,EAAOhrB,GAAI+nB,YAC7CppB,UAGEke,EA/D0B,IA+DQ,GAAKA,EAAI,SACvCsO,EAAAA,EAAAA,IAjEgB,KAmE1B,MAGFhsB,EAAAA,EAAAA,IAAiB,sBAAuBf,IACtC,MAAM,KAAE+R,GAAS/R,EAAO8R,SAASD,QAAU,CAAC,EACvCqZ,GAAmBlrB,EAAQ+R,EAAK,KAGvChR,EAAAA,EAAAA,IAAiB,wBAAwB+Y,UACvC,MAAM,KAAE/H,GAAS/R,EAAO8R,SAASkb,UAAY,CAAC,EAExCC,QAAyBrQ,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7K,SAC7Dkb,IAILjtB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVkb,SAAUC,KAGdrpB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB+Y,UACtC,MAAM,KAAE/H,GAAS/R,EAAO8R,SAASob,SAAW,CAAC,EAEvCnnB,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtW,MAAO,OAAQyL,SAClEhM,IAIL/F,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVob,QAAS,CACPnb,KAAMhM,EAAOgM,KACbD,SAAU/L,EAAO+L,aAIvBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0B+Y,UACzC,MAAM,KAAE/H,GAAS/R,EAAO8R,SAASob,SAAW,CAAC,EAEvCnnB,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtW,MAAO,OAAQyL,SAClEhM,IAIL/F,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVqb,WAAY,CACVpb,KAAMhM,EAAOgM,KACbD,SAAU/L,EAAO+L,aAIvBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB+Y,UACvC,MAAM,KAAE/H,GAAS/R,EAAO8R,SAASsb,UAAY,CAAC,EAExCA,QAAiBxQ,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtW,MAAO,OAAQyL,SACpEqb,IAILptB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVsb,SAAU,CACRrb,KAAMqb,EAASrb,KACfD,SAAUsb,EAAStb,SAAStM,QAAQoM,GAA8B,OAAlBA,EAAQtL,YAI9D1C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB+Y,UACvC,MAAM,KAAE/H,GAAS/R,EAAO8R,SAASub,UAAY,CAAC,EACxCC,QAAyB1Q,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7K,SAC7Dub,IAILttB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASssB,EAAAA,EAAAA,IACPtsB,EACA,WACAstB,EAAiBvb,KACjBub,EAAiBf,OAEnB3oB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB+Y,UACnC,MAAMwR,QAAmB1O,EAAAA,EAAAA,IAAQ,qBACjC,IAAK0O,EACH,OAGF,MAAM,IAAE3L,EAAG,SAAE7N,GAAawZ,EAE1BtrB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHutB,aAAc,IAAK5N,EAAK7N,cAE1BlO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB+Y,UACxC,MAAMwR,QAAmB1O,EAAAA,EAAAA,IAAQ,0BACjC,IAAK0O,EACH,OAEFtrB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEoW,EAAG,SAAE7N,GAAawZ,EAEpBkC,EAAU,IAAK7N,EAAK7N,YAE1B9R,GAAS0rB,EAAAA,EAAAA,IAAiB1rB,EAAQwtB,EAAQ5rB,GAAI4rB,GAC9CxtB,EAAS,IACJA,EACHytB,oBAAqBD,EAAQ5rB,KAE/BgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0B+Y,UACzC,MAAMwR,QAAmB1O,EAAAA,EAAAA,IAAQ,4BACjC,IAAK0O,EACH,OAEFtrB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEoW,EAAG,SAAE7N,GAAawZ,EACpBkC,EAAU,IAAK7N,EAAK7N,YAE1B9R,GAAS0rB,EAAAA,EAAAA,IAAiB1rB,EAAQwtB,EAAQ5rB,GAAI4rB,GAC9CxtB,EAAS,IAAKA,EAAQ0tB,qBAAsBF,EAAQ5rB,KACpDgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,eAAEoqB,EAAc,MAAE9qB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD0sB,GAAYC,EAAAA,EAAAA,IAAiB5tB,EAAQqrB,GACvCsC,GAAaA,EAAUnI,QAAUmI,GAAW7b,UAAU3R,QACrDirB,GAAaprB,EAAQgB,EAASqqB,EAAgB9qB,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,sBAAsB+Y,UACrC,MAAO+T,EAAQC,SAAiB1B,QAAQC,IAAI,EAC1CzP,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELiR,GAAWC,IAIhB9tB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS+tB,EAAAA,EAAAA,IAAsB/tB,EAAQ,IAAK6tB,EAAOlO,IAAK7N,SAAU+b,EAAO/b,WACzE9R,EAAS,IACJA,EACHguB,qBAAsB,IAAKF,EAAQnO,IAAK7N,SAAUgc,EAAQhc,YAG5DlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,UAC1C,MAAMwR,QAAmB1O,EAAAA,EAAAA,IAAQ,4BACjC,IAAK0O,EACH,OAEFtrB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEoW,EAAG,SAAE7N,GAAawZ,EAE1BtrB,EAAS,IACJA,EACHiuB,oBAAqB,IAAKtO,EAAK7N,cAEjClO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiB+Y,UAChC,MAAM,KAAE/H,GAAS/R,EAAOisB,KAAKiC,MAEvBC,QAAkBvR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE7K,SAC/Coc,IAILnuB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACHisB,KAAM,IACDjsB,EAAOisB,KACViC,MAAOC,KAGXvqB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,WAAW+Y,MAAO9Z,EAAQgB,EAASC,KAClD,MAAM,IACJmtB,EAAG,aAAEC,EAAY,MACjB9tB,GAAQC,EAAAA,EAAAA,OACNS,EACEd,EAASH,EAAOisB,KAAKiC,MAAMjC,MAAM9rB,OAEjC4V,GAAQuY,EAAAA,GAAAA,GAAmBtuB,EAAQ,aACnCuuB,GAAeC,EAAAA,GAAAA,GAAmBxuB,EAAQ,aAC1CyuB,GAAYjI,EAAAA,EAAAA,IAA2BxmB,GAoB7C,IAlBKquB,GAAgBluB,GAAUA,GAAU4V,GACvC/U,EAAQqL,iBAAiB,CACvBoE,MAAOvL,EAAAA,GAAuB,2BAA4B6Q,EAAM9N,YAChExC,QAASgpB,EAAYvpB,EAAAA,GAAuB,2CACxCA,EAAAA,GAAuB,mCACvBqpB,EAAatmB,gBACZwmB,GAAa,CAChBxZ,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEV,WAGfmuB,UAAW,YACXnuB,iBAIiBqc,EAAAA,EAAAA,IAAQ,UAAW,CAAEwR,MAAKC,iBAE7C,OAGFruB,GAASuJ,EAAAA,EAAAA,MACT,MAAM0iB,EAAOjsB,EAAOisB,KAAKiC,MAAMjC,MAAMzmB,QAAOpF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,IAAOwsB,EAAIxsB,EAAE,KAAK,GACpE+sB,EAAUN,EAAepC,EAAO,CAACmC,KAAQnC,GAE/CjsB,EAAS,IACJA,EACHisB,KAAM,IACDjsB,EAAOisB,KACViC,MAAO,IACFluB,EAAOisB,KAAKiC,MACfjC,KAAM0C,MAIZ/qB,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,QAAE2Q,EAAO,MAAErR,GAAQC,EAAAA,EAAAA,OAAsBS,EACzC2tB,EAAU5uB,EAAO8R,SAASkb,SAASlb,SAAS3R,OAC5C4V,GAAQuY,EAAAA,GAAAA,GAAmBtuB,EAAQ,iBACnCuuB,GAAeC,EAAAA,GAAAA,GAAmBxuB,EAAQ,iBAC1CyuB,GAAYjI,EAAAA,EAAAA,IAA2BxmB,GAEzC4uB,GAAW7Y,GACb/U,EAAQqL,iBAAiB,CACvBoE,MAAOvL,EAAAA,GAAuB,+BAAgC6Q,EAAM9N,YACpExC,QAASgpB,EAAYvpB,EAAAA,GAAuB,+CACxCA,EAAAA,GAAuB,uCACvBqpB,EAAatmB,gBACZwmB,GAAa,CAChBxZ,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEV,WAGfmuB,UAAW,YACXnuB,UAIAqR,IACGgL,EAAAA,EAAAA,IAAQ,cAAe,CAAEhL,WAChC,KAGF7Q,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,QAAE2Q,GAAY3Q,EAEhB2Q,IACF5R,GAASuJ,EAAAA,EAAAA,MAITvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVkb,SAAU,IACLhtB,EAAO8R,SAASkb,SACnBlb,SAAU9R,EAAO8R,SAASkb,SAASlb,SAAStM,QAAOoI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,IAAOgQ,EAAQhQ,EAAE,QAItFgC,EAAAA,EAAAA,IAAU5D,IAEL4c,EAAAA,EAAAA,IAAQ,cAAe,CAAEhL,UAASid,QAAQ,IACjD,KAGF9tB,EAAAA,EAAAA,IAAiB,uBAAuB+Y,MAAO9Z,EAAQgB,EAASC,KAC9D,MAAM,QAAE2Q,GAAY3Q,QAEC2b,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhL,aAKtDsZ,IADS3hB,EAAAA,EAAAA,MACiB,KAG5BxI,EAAAA,EAAAA,IAAiB,uBAAuB+Y,gBACjB8C,EAAAA,EAAAA,IAAQ,yBAI7B5c,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,CACNC,SAAU,OAIhBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,aAAE6tB,GAAiB7tB,EACnBqqB,GAAasC,EAAAA,EAAAA,IAAiB5tB,EAAQ8uB,GAC5C,IAAKxD,EACH,OAGF,MAAM,WAAE3B,EAAU,cAAEoF,EAAa,WAAEC,GAAe1D,EAC5C2D,GAAeD,GAAcxnB,QAAQunB,IAEtCnS,EAAAA,EAAAA,IAASqS,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAcnF,cAAa,KAGxG5oB,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,SAAEiuB,GAAajuB,EAErB,IAAIkuB,EAAuBnvB,EAAOovB,cAAcF,GAChD,GAAIC,GAAsBnV,UACxB,OAGFha,EAAS,IACJA,EACHovB,cAAe,IACVpvB,EAAOovB,cACV,CAACF,GAAW,IACPC,EACHnV,WAAW,MAIjBpW,EAAAA,EAAAA,IAAU5D,GAEV,MAAMovB,QAAsBxS,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDsS,WACAG,YAAaF,EAAuBA,EAAqBniB,QAAU,IAMrE,GAFAmiB,GADAnvB,GAASuJ,EAAAA,EAAAA,OACqB6lB,cAAcF,IAEvCE,EAaH,OAZApvB,EAAS,IACJA,EACHovB,cAAe,IACVpvB,EAAOovB,cACV,CAACF,GAAW,IACPC,EACHnV,WAAW,UAIjBpW,EAAAA,EAAAA,IAAU5D,GAKZA,EAAS,IACJA,EACHovB,cAAe,IACVpvB,EAAOovB,cACV,CAACF,GAAW,CACVlV,WAAW,EACXhN,QAASoiB,EAAcpiB,QACvBsiB,SAAU,IACJH,GAAsBG,YACvBF,EAAcE,cAKzB1rB,EAAAA,EAAAA,IAAU5D,EAAO,KAqEnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACG8pB,IAAgBlR,UACnB,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE1b,UAEjD,IAAK6E,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,SAAEojB,EAAQ,MAAEra,GAAUtS,EAAO8R,SAE7BzC,EAAYtJ,EAAOwmB,KAAKhnB,KAAIyX,IAAA,IAAC,GAAEpb,GAAIob,EAAA,OAAKpb,CAAE,IAE5C0Q,EAAMC,QACRD,EAAMC,OAAO7G,SAAS9J,IACpB,IAAKyN,EAAU5E,SAAS7I,GAAK,CAC3B,MAAM,MAAE6O,GAAUkc,EAAS/qB,IAAO,CAAC,EAC/B6O,IAAS8e,EAAAA,EAAAA,GAAY9e,EAAOvP,IAC9BmO,EAAUH,QAAQtN,EAEtB,KAIJ5B,GAASssB,EAAAA,EAAAA,IACPtsB,EACA,SACA+F,EAAOgM,KACPhM,EAAOwmB,MAGTvsB,GAASwvB,EAAAA,EAAAA,IAAoBxvB,EAAQ+F,EAAOgM,KAAM1C,EAAW9O,IAC7DqD,EAAAA,EAAAA,IAAU5D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExB,iBAAVC,GACJ8pB,IAAgB,KACnBa,GAAW7rB,EAAQkB,EAAOlB,EAAOyvB,QAAQC,uBAAmB7uB,EAAWN,EAAM,GAEjF,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,MAAEC,EAAK,OAAEqO,IAAWjO,EAAAA,EAAAA,IAAetB,EAAQO,GAAO+O,UAEnC,iBAAVpO,GACJ8pB,IAAgB,KACnBa,GAAW7rB,EAAQkB,EAAOlB,EAAOyvB,QAAQC,kBAAmBngB,EAAQhP,EAAM,GAE9E,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEqF,GAAUrF,GACZ,KAAE8Q,GAAS/R,EAAO8R,SAAS6Z,SAE5BX,IAAgBlR,UACnB9Z,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACV6Z,SAAU,IACL3rB,EAAO8R,SAAS6Z,SACnBrlB,YAIN1C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtW,QAAOyL,SAE/D/R,GAASuJ,EAAAA,EAAAA,MAEJxD,GAAU/F,EAAO8R,SAAS6Z,SAASrlB,QAAUA,IAIlDtG,GAAS2vB,EAAAA,EAAAA,IAAuB3vB,EAAQsG,EAAOP,EAAO+L,SAAU/L,EAAOgM,OAEvEnO,EAAAA,EAAAA,IAAU5D,GAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,yBAA0Bf,IAClC,IACFA,EACH8R,SAAU,IACL9R,EAAO8R,SACV6Z,SAAU,CAAC,QAKjB5qB,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEqF,GAAUrF,EAElB,OAAO2uB,EAAAA,EAAAA,IAA0B5vB,EAAQsG,EAAM,KAGjDvF,EAAAA,EAAAA,IAAiB,4BAA6Bf,IACrC,IACFA,EACHwS,aAAc,IACTxS,EAAOwS,aACVmZ,SAAU,CAAC,QAKjB5qB,EAAAA,EAAAA,IAAiB,6BAA6B+Y,UAC5C,MAAMwT,QAAyB1Q,EAAAA,EAAAA,IAAQ,8BAClC0Q,IAILttB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHwS,aAAc,IACTxS,EAAOwS,aACVqd,YAAavC,EAAiBf,KAAKhnB,KAAI2X,IAAA,IAAC,GAAEtb,GAAIsb,EAAA,OAAKtb,CAAE,IACrDyb,KAAM,IACDrd,EAAOwS,aAAa6K,SACpBC,EAAAA,EAAAA,IAAqBgQ,EAAiBf,KAAKuD,SAASnQ,GAAQA,EAAI7N,UAAY,KAAK,QAGxFA,SAAU,IACL9R,EAAO8R,SACV6a,SAAU,IACL3sB,EAAO8R,SAAS6a,aAChBrP,EAAAA,EAAAA,IAAqBgQ,EAAiBf,KAAM,UAIrD3oB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,eAAEoqB,EAAc,MAAE9qB,GAAQC,EAAAA,EAAAA,OAAsBS,GACjD2sB,EAAAA,EAAAA,IAAiB5tB,EAAQqrB,UACtBD,GAAaprB,EAAQgB,EAASqqB,EAAgB9qB,GAGtDP,GAASuJ,EAAAA,EAAAA,MACT,MAAMoW,GAAMiO,EAAAA,EAAAA,IAAiB5tB,EAAQqrB,GAChC1L,GAAK4L,YAIVvrB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BiW,0BAA2B0J,EAAI4L,WAC9BhrB,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,UAC1C,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,4BACxB7W,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+vB,EAAAA,EAAAA,IAA+B/vB,EAAQ+F,EAAOgM,KAAMhM,EAAOiqB,gBACpEpsB,EAAAA,EAAAA,IAAU5D,GAAO,I,cC7uBnB,MAAMgrB,IAAkBC,EAAAA,EAAAA,KAAU/O,GAAOA,KAAM,KAAK,GAoFpDpC,eAAemW,GACbjwB,GAGA,IAFAkB,EAAKhB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAI4B,EAAgC5B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEqvB,EAAmBhwB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEkC,EAAc7C,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEsvB,EAAgBjwB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEuvB,EAAgBlwB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAA,QAAAZ,EAAAC,UAAAC,OAAA+c,EAAA,IAAA7c,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA4c,EAAA5c,EAAA,GAAAJ,UAAAI,GAAA,IAGjHyF,GAFAxF,GAAQC,EAAAA,EAAAA,OAAkB0c,EAY9B,GAAIna,EAAM,CACR,MAAMstB,GAAqBzT,EAAAA,EAAAA,IAAQ,sBAAuB,CACxD7Z,OACA7B,QACAY,OACAiU,MAAOua,EAAAA,IACPnU,SAAU+T,EACVE,UACAD,YAEII,EAAgBxtB,EAAKE,SAAU2Z,EAAAA,EAAAA,IAAQ,cAAe,CAC1D7Z,OACA7B,QACA6U,MAAOya,EAAAA,WACJ3vB,GAEE4vB,EAAa5X,SAAgBuT,QAAQC,IAAI,CAACgE,EAAoBE,IAErE,GAAIE,EAAa,CACf,MAAM,SACJnrB,EAAQ,MAAEuX,EAAK,WAAE6T,EAAU,aAAEC,GAC3BF,GAEI5X,OAAQ+X,EAAW,MAAEpL,GAAU3M,GAAU,CAAC,EAElD9S,EAAS,CACP8S,OAAQ+X,EACRC,iBAAkBrL,EAClBlgB,WACAuX,QACA/N,MAAO,GACP4hB,aACAI,SAAUH,EAEd,CACF,MACE5qB,QAAe6W,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C1b,QACAgvB,aACAna,MAAOua,EAAAA,IACPxuB,OACAquB,UACAC,YAIJpwB,GAASuJ,EAAAA,EAAAA,MACT,MAAMwnB,GAAqBC,EAAAA,EAAAA,IAA+BhxB,EAAQO,GAClE,IAAKwF,GAAqB,KAAV7E,GAAgBA,IAAU6vB,EAGxC,OAFA/wB,GAASixB,EAAAA,EAAAA,IAAiCjxB,EAAQ,CAAEsF,UAAU,GAAS/E,QACvEqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,SACJsF,EAAQ,MAAEuX,EAAK,MAAE/N,EAAK,WAAE4hB,EAAU,SAAEI,GAClC/qB,EAEA+I,EAAM3O,SACRH,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,QAGpD+N,EAAM1c,SACRH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,QAGpDvX,EAASnF,SACXH,GAASkxB,EAAAA,EAAAA,IAAYlxB,EAAQsF,IAG/BtF,GAASmxB,EAAAA,EAAAA,IACPnxB,EACAsF,EACAorB,EACA5uB,EACAgvB,EACAvwB,GAGEwF,EAAO8S,SACT7Y,GAASoxB,EAAAA,EAAAA,IAAapxB,EAAQ+C,EAAMnB,GAAImE,EAAO8qB,iBAAmB9qB,EAAO8S,SAG3E,MAAMwY,EAAetrB,EAAO8S,QAAQtT,KAAI6Z,IAAA,IAAC,GAAExd,GAAIwd,EAAA,OAAKxd,CAAE,IAAEgE,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IAC3E3mB,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClCsxB,cAAeD,GACd9wB,IAEHqD,EAAAA,EAAAA,IAAU5D,EACZ,CC1EA8Z,eAAeyX,GACbvxB,EACA+C,EACArC,EACAoB,EACAqa,GAGA,IAFAE,EAAenc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IACnBC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM2F,QAAe6W,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD7Z,OACAjB,OACAiU,MAA4B,EAArByb,EAAAA,IACPC,aAAc/wB,IAAamB,EAAAA,QAAiBhB,EAAYH,EACxDyb,aAGF,IAAKpW,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAE+N,EAAK,SAAEvX,EAAQ,WAAEorB,EAAU,aAAEC,GAClC5qB,EAEEsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtCosB,EAAc5pB,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAE1ClI,GAASuJ,EAAAA,EAAAA,OAEaooB,EAAAA,EAAAA,IAAyB3xB,EAAQO,KAKvDP,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,OACtD9O,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQ+C,EAAKnB,GAAIyb,GAC9Crd,GAAS4xB,EAAAA,EAAAA,IAA8B5xB,EAAQ+C,EAAKnB,GAAIlB,EAAUoB,EAAM4vB,EAAahB,EAAYC,EAAcpwB,IAC/GqD,EAAAA,EAAAA,IAAU5D,GAELqc,GACEkV,GAAkBvxB,EAAQ+C,EAAMrC,EAAUoB,EAAM6uB,GAAc,EAAMpwB,GAE7E,CCjJA,IAAIsxB,GA8MA3W,IFzNJna,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAE7CtN,IAAUT,GACPuqB,IAAgBlR,UACnB,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,cAAe,CAAE1b,UAE9ClB,GAASuJ,EAAAA,EAAAA,MACT,MAAMwnB,GAAqBC,EAAAA,EAAAA,IAA+BhxB,EAAQO,GAClE,IAAKwF,IAAWgrB,GAAuB7vB,IAAU6vB,EAG/C,OAFA/wB,GAASixB,EAAAA,EAAAA,IAAiCjxB,EAAQ,CAAE8O,OAAO,GAASvO,QACpEqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,WACJ8xB,EAAU,WAAEC,EAAU,YAAEC,EAAW,YAAEC,GACnClsB,GAEA+rB,EAAW3xB,QAAU6xB,EAAY7xB,UACnCH,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqB,IAAIwU,KAAeE,GAAc,SAG9ED,EAAW5xB,QAAU8xB,EAAY9xB,UACnCH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqB,IAAIyU,KAAeE,GAAc,QAGlFjyB,GAASixB,EAAAA,EAAAA,IAAiCjxB,EAAQ,CAAE8O,OAAO,GAASvO,GACpEP,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClC2O,aAAc,CACZujB,QAASJ,EAAWvsB,KAAInF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACtCuwB,QAASJ,EAAWxsB,KAAIqI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAExC8M,cAAe,KACVpN,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAAaE,cAC9CwjB,QAASF,EAAYzsB,KAAIgX,IAAA,IAAC,GAAE3a,GAAI2a,EAAA,OAAK3a,CAAE,IACvCuwB,QAASF,EAAY1sB,KAAIyX,IAAA,IAAC,GAAEpb,GAAIob,EAAA,OAAKpb,CAAE,MAExCrB,IAEHqD,EAAAA,EAAAA,IAAU5D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,KAAEiM,EAAI,MAAE3M,GAAQC,EAAAA,EAAAA,OAAsBS,EACtCkvB,EAAUjjB,GAAOklB,EAAAA,GAAAA,IAAiBllB,GAAQA,EAEhDlN,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClCkN,OACAhM,MAAO,GACP0N,cAAe,KACVtN,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAAaI,cAC9C9K,KAAM,CACJ4sB,gBAAY7vB,EACZwxB,SAAU,GACV1B,aAAc,KAGjBpwB,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,OAAES,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAEjDyhB,GAAqBjwB,EAAQ,GAAI,YAAQa,EAD5BJ,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EACOsvB,EAASjjB,EAAM3M,EAAM,KAGjFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,KAAEa,EAAI,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsBS,GACtC,MACJC,EAAK,cAAE0N,EAAa,OAAEnO,EAAM,KAAEyM,IAC5B5L,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAC5B2hB,EAAUjjB,GAAOklB,EAAAA,GAAAA,IAAiBllB,GAAQA,EAC1CyjB,EAAgB/hB,IAAgB9M,IAAsC6uB,aAI5EV,GAAqBjwB,EAAQkB,EAAOY,EAAM6uB,EAF7BlwB,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EAEWsvB,EAASjjB,EAAM3M,EAAM,KC7ErFQ,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnEwC,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EACnD,IAAIyxB,GAAgBC,EAAAA,EAAAA,IAAwBvyB,EAAQO,GACpD,IAAKwC,IAASuvB,IAAkB5xB,EAC9B,OAGF,MAAM,MAAEQ,EAAK,QAAEsO,GAAY8iB,EACrBnW,EAAW3M,GAASmhB,aAE1B,IAAIc,EACJ,GAAI/wB,IAAamB,EAAAA,GAAgB,CAC/B,MAAMuG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAASC,GACrD+wB,EAAerpB,GAAYqpB,YAC7B,CAEA,IAAKvwB,EACH,OAGF,MAAM6E,QAAe6W,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD7Z,OACAjB,KAAM,OACNZ,QACAuwB,eACA1b,MAAOyc,EAAAA,IACPrW,aAGF,IAAKpW,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAE+N,EAAK,SAAEvX,EAAQ,WAAEorB,EAAU,aAAEC,GAClC5qB,EAEEsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtCosB,EAAc5pB,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAE1ClI,GAASuJ,EAAAA,EAAAA,MAET+oB,GAAgBC,EAAAA,EAAAA,IAAwBvyB,EAAQO,GAC3C+xB,GAAiBpxB,IAAUoxB,EAAcpxB,QAI9ClB,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,OACtD9O,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQ+C,EAAKnB,GAAIyb,GAC9Crd,GAASyyB,EAAAA,EAAAA,IAA6BzyB,EAAQ+C,EAAKnB,GAAIlB,EAAUgxB,EAAahB,EAAYC,EAAcpwB,IACxGqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B6xB,GAAgBX,EAAAA,EAAAA,IAAyB3xB,EAAQO,GAEvD,IAAKwC,IAASuvB,EACZ,OAGF,MAAQI,YAAa5wB,EAAI,cAAE8M,GAAkB0jB,EACvCK,EAAiB7wB,GAAQ8M,GAAiBA,EAAc9M,GACxDqa,EAAWwW,GAAgBhC,aAE5B7uB,GAIAyvB,GAAkBvxB,EAAQ+C,EAAMrC,EAAUoB,EAAMqa,OAAUtb,EAAWN,EAAM,KAGlFQ,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,UAAE2xB,EAAS,MAAEryB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE3C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMmE,QAAkB0V,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D7Z,OACA6vB,cAGG1rB,GAILlG,EAAQwH,aAAa,CACnB/H,OAAQsC,EAAKnB,GACbsF,YACA3G,SACA,KErHJQ,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,EAASC,KAC1D,MAAM,SAAE8qB,EAAQ,MAAExrB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAIF,IAAIa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWwO,WAAaqT,EAAAA,GAAAA,WACxD,OAGF7yB,GAAS8yB,EAAAA,EAAAA,IACP9yB,EAAQS,EAAQ,CAAEsyB,yBAAqBlyB,EAAWmyB,qBAAiBnyB,GAAaN,IAElFqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,OAAE+F,EAAM,MAAEuR,SAAiBsF,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmP,aAEhE/rB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IACPjzB,GAAmB,IAAX+F,EAAkB8sB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0BtyB,GAEpFP,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCsyB,qBAAgC,IAAXhtB,EACrBitB,gBAAiBjH,EACjBzU,SACC/W,IACHqD,EAAAA,EAAAA,IAAU5D,QAEKa,IAAXkF,GACF/E,EAAQkyB,sBAAsB,CAAEnd,MAAO,iBAAkBxV,SAC3D,KAGFQ,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,SAAE8qB,EAAQ,MAAExrB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMsC,QAAaowB,EAAAA,EAAAA,IAAmBnzB,EAAQgB,EAASP,EAAQF,GAC/D,IAAKwC,EAAM,OAEX/C,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,WAA+BtyB,IACzEqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAe6W,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE7Z,OAAMgpB,aAExD/rB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ+F,EAAS8sB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0BtyB,GAC3GP,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCsyB,yBAAqBlyB,EACrBmyB,qBAAiBnyB,EACjByW,WAAOzW,GACNN,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDwC,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GACrCA,GAAWsC,IAIhB6Z,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE7Z,QAAO,KAGxChC,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,OAAE2yB,EAAM,MAAE7yB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtDjB,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CAAE4yB,cAAeD,GAAU7yB,IACrEqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,OAAE2yB,EAAM,MAAE7yB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDupB,EAAS4I,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYzyB,GAEnEb,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ+pB,EAAQjqB,IAClDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,QAAE8yB,EAAO,UAAEC,EAAS,MAAEzd,EAAK,MAAExV,GAAQC,EAAAA,EAAAA,OACzCS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgzB,GAAQ5P,EAAAA,EAAAA,IAAW7jB,EAAQuzB,GAAWvzB,EAAOmY,eACnD,IAAK8M,IAASwO,EAAO,OAErB,MAAM1tB,QAAe6W,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDqI,OAAMwO,QAAOD,YAAWzd,UAE1B,IAAKhQ,EACH,OAEF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,QAAEmqB,EAAO,MAAE7W,GAAU9W,EAE3B/F,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD,MAAM2N,EAASgJ,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3D1zB,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ+pB,EAAQjqB,IAClDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0B+Y,MAAO9Z,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,KAAE2P,EAAI,UAAEojB,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAErjB,EAAK,MAAElQ,GAAQC,EAAAA,EAAAA,OAC/ES,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKwkB,EAAM,OAEX,MAAMlf,QAAe6W,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDqI,OACA7U,OACAojB,YACAI,aACAC,aACAC,kBACArjB,UAEF,IAAK1K,EACH,OAGF,MAAM,UAAEguB,EAAS,UAAEC,EAAS,MAAEnX,GAAU9W,EAExC/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,WAAEyH,IAAe1P,EAAAA,EAAAA,IAAetB,EAAQO,GACxCmzB,GAAW1iB,EAAWzF,SAAS9K,GAAQizB,SAAW,IACrDluB,QAAQopB,GAAYA,EAAQxe,OAAS2jB,EAAU3jB,OAC5CujB,EAAiB,IAAK3iB,EAAWzF,SAAS9K,GAAQkzB,gBAAkB,IAEtEK,EAAUR,UACZG,EAAezkB,QAAQ8kB,GAEvBN,EAAQttB,KAAK4tB,GAGfh0B,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD7c,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCizB,UACAC,kBACCpzB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,OACJR,EAAM,WAAEmzB,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAErjB,EAAK,MAAElQ,GAAQC,EAAAA,EAAAA,OAC9DS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKwkB,EAAM,OAEX,MAAMlf,QAAe6W,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CqI,OACA2O,aACAC,aACAC,kBACArjB,UAEF,IAAK1K,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAMmqB,GAAUpyB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,GAAQizB,SAAW,GACrF1zB,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCizB,QAAS,IAAIA,EAAS3tB,IACrBxF,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B+Y,MAAO9Z,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,KAAE2P,EAAI,MAAE7P,GAAQC,EAAAA,EAAAA,OACpBS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKwkB,EAAM,OAMX,UAJqBrI,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDqI,OACA7U,SAGA,OAGFpQ,GAASuJ,EAAAA,EAAAA,MACT,MAAM0qB,GAAkB3yB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,GAC1ET,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCizB,QAASO,GAAiBP,SAASluB,QAAQ4tB,GAAWA,EAAOhjB,OAASA,IACtEujB,eAAgBM,GAAiBN,gBAAgBnuB,QAAQ4tB,GAAWA,EAAOhjB,OAASA,KACnF7P,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oCAAoC+Y,MAAO9Z,EAAQgB,EAASC,KAC3E,MAAM,OACJR,EAAM,QAAE8yB,EAAO,MAAEhzB,GAAQC,EAAAA,EAAAA,OACvBS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgzB,GAAQ5P,EAAAA,EAAAA,IAAW7jB,EAAQuzB,GAAWvzB,EAAOmY,eAC9C8M,GAASwO,SAEO7W,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DqI,OACAwO,YAMFzzB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxCkzB,eAAgB,IACfpzB,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAC1C9Z,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE2P,EAAI,WAAE8jB,EAAU,aAAEC,EAAY,MAAEpe,EAAK,MAAExV,GAAQC,EAAAA,EAAAA,OACrDS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B2zB,EAAaD,GAAetQ,EAAAA,EAAAA,IAAW7jB,EAAQm0B,QAAgBtzB,EACrE,IAAKokB,GAASkP,IAAiBC,EAAa,OAE5C,MAAMruB,QAAe6W,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDqI,OACA7U,OACA8jB,aACAE,aACAre,UAEF,IAAKhQ,EACH,OAEF,MAAM,UAAEsuB,EAAS,MAAExX,GAAU9W,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM+qB,GAAoBhzB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,IAAS6yB,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOhjB,OAASA,IAIpEpQ,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxC6yB,WAAY,IACPgB,EACHD,cAED9zB,GACHP,GAAS0d,EAAAA,EAAAA,IAAS1d,EAAQ6c,IAC1BjZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B+Y,MAC3C9Z,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE2P,EAAI,WAAE8jB,EAAU,aAAEC,EAAY,MAAEpe,EAAK,MAAExV,GAAQC,EAAAA,EAAAA,OACrDS,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B2zB,EAAaD,GAAetQ,EAAAA,EAAAA,IAAW7jB,EAAQm0B,QAAgBtzB,EACrE,IAAKokB,GAASkP,IAAiBC,EAAa,OAE5C,MAAMruB,QAAe6W,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDqI,OACA7U,OACA8jB,aACAE,aACAre,QACAwe,aAAa,IAEf,IAAKxuB,EACH,OAEF,MAAM,UAAEsuB,EAAS,MAAExX,GAAU9W,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM+qB,GAAoBhzB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,IAAS6yB,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOhjB,OAASA,IAGpEpQ,GAAS8yB,EAAAA,EAAAA,IAAiB9yB,EAAQS,EAAQ,CACxC6yB,WAAY,IACPgB,EACHE,WAAYH,IAEb9zB,GACHP,GAAS0d,EAAAA,EAAAA,IAAS1d,EAAQ6c,IAC1BjZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,OACJR,EAAM,WAAEyzB,EAAa,EAAC,aAAEC,EAAY,MAAEpe,EAAQ,GAC5C9U,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B2zB,EAAaD,GAAetQ,EAAAA,EAAAA,IAAW7jB,EAAQm0B,QAAgBtzB,EACrE,IAAKokB,GAASkP,IAAiBC,EAAa,OAE5C,MAAMruB,QAAe6W,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDqI,OACAiP,aACAE,aACAre,QACAwe,aAAa,IAEf,IAAKxuB,EACH,OAEF,MAAM,UAAEsuB,EAAS,MAAExX,GAAU9W,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEg0B,aAAcJ,IACpDr0B,GAAS0d,EAAAA,EAAAA,IAAS1d,EAAQ6c,IAC1BjZ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB+Y,MAAO9Z,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,OAAEmP,EAAM,WAAE8kB,GACdzzB,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BmjB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAChC,IAAKqV,IAASrB,EAAM,OAOpB,UALqBhH,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDqI,OACArB,OACA8Q,eAEW,OAEb10B,GAASuJ,EAAAA,EAAAA,MACT,MAAMorB,GAAa3xB,EAAAA,EAAAA,IAAWhD,EAAQS,GACjCk0B,IAEL30B,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClCg0B,aAAcE,EAAWF,cAAcjvB,QAAQovB,GAAaA,EAAShlB,SAAWA,OAElFhM,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,WAAEi0B,EAAU,KAAEtkB,GAClBnP,EACEgkB,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKwkB,EAAM,OAOX,UALqBrI,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDqI,OACAyP,aACAtkB,SAEW,OAEbpQ,GAASuJ,EAAAA,EAAAA,MACT,MAAMorB,GAAa3xB,EAAAA,EAAAA,IAAWhD,EAAQS,GACjCk0B,IAEL30B,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClCg0B,aAAc,GACd1M,SAAU,IACL4M,EAAW5M,SACd8M,mBAAoB,GACpBC,gBAAiB,MAGrBlxB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB+Y,MAAO9Z,EAAQgB,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC3BsC,SAEgB6Z,EAAAA,EAAAA,IAAQ,sBAAuB7Z,KAGpD/C,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC+U,cAAU3U,KAEZ+C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6B+Y,MAAO9Z,EAAQgB,EAASC,KACpE,MAAM,OACJ2O,EAAM,KAAEmlB,EAAI,UAAEC,EAAS,MAAEz0B,GAAQC,EAAAA,EAAAA,OAC/BS,EAEE2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAChC,IAAKgU,EAAM,OAEX5jB,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,WAA+BtyB,IACzEqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAe6W,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDgH,OACAmR,OACAC,cAGF,IAAKjvB,EAKH,OAJA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,MAA0BtyB,QACpEqD,EAAAA,EAAAA,IAAU5D,GAKZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,QAC7DjZ,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,GAAE4B,EAAE,WAAE+nB,GAAe/F,EAE3B,UADsBhH,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,KAAI+nB,eAKnD,OAHA3pB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,MAA0BtyB,QACpEqD,EAAAA,EAAAA,IAAU5D,GAIZgB,EAAQi0B,kBAAkB,CAAEC,UAAWtlB,IAEvC5P,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,SAA6BtyB,IACvEqD,EAAAA,EAAAA,IAAU5D,GAEN+0B,IAASC,GACXh0B,EAAQqL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,4CAA4CiwB,EAAAA,EAAAA,IAAuBvR,IACnGrjB,SAEJ,KD9aFQ,EAAAA,EAAAA,IAAiB,QAAQ,CAACf,EAAQgB,KAC5BoW,EAAAA,KAEFC,QAAQ+d,IAAI,kBAGVvD,IACFxnB,aAAawnB,IAGf7xB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IAAKA,EAAQq1B,WAAW,IACjCzxB,EAAAA,EAAAA,IAAU5D,GAGV6xB,GAAuBtuB,OAAO+F,YAAW,KACvCtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IAAKA,EAAQq1B,WAAW,IACjCzxB,EAAAA,EAAAA,IAAU5D,GACV6xB,QAAuBhxB,CAAS,GAvBL,MA0B7B,MAAM,aAAEy0B,EAAY,uBAAEC,GAA2Bv0B,EAEjDs0B,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAW5b,gBAwBfA,eAA6D9Z,EAAWgB,GACtE,IAAI20B,GAAoB,EAExB31B,GAASuJ,EAAAA,EAAAA,MAET,IAAIqsB,GAAW,EAGf,MAEMC,EAFe/tB,OAAOC,KAAK/H,EAAOsF,SAASiG,UAEbvF,QAAwD,CAACC,EAAKxF,KAChGwF,EAAIxF,GAAUqH,OACXC,KAAK/H,EAAOsF,SAASiG,SAAS9K,GAAQq1B,aACtC9vB,QAAwC,CAAC+vB,EAAMr1B,KAC9Cq1B,EAAK7tB,OAAOxH,IAAa,CACvBgjB,OAAOU,EAAAA,EAAAA,IAAYpkB,EAAQS,EAAQyH,OAAOxH,IAC1CikB,WAAWC,EAAAA,EAAAA,IAAgB5kB,EAAQS,EAAQyH,OAAOxH,IAClDs1B,cAAcC,EAAAA,EAAAA,GAAmBj2B,EAAQS,EAAQyH,OAAOxH,IACxDgH,cAAcC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQyH,OAAOxH,KAGnDq1B,IACN,CAAC,GACC9vB,IACN,CAAC,GAGJ,IAAK,MAAQrE,GAAIrB,KAAWuH,OAAOgT,OAAO9a,EAAO4Z,SAAU,CACzD5Z,GAASuJ,EAAAA,EAAAA,MACT,MAAQ9I,OAAQy1B,EAAex1B,SAAUy1B,IAAoBx1B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnG61B,EAAiBD,GAAmBt0B,EAAAA,GACpCuG,EAAa+tB,GAAmBD,GAClC7tB,EAAAA,EAAAA,IAAiBrI,EAAQk2B,EAAeC,QAAmBt1B,EACzD8X,EAAcud,EAAgBl2B,EAAO8O,MAAMuO,KAAK6Y,QAAiBr1B,EACvE,GAAIq1B,GAAiBvd,EAAa,CAChC,MAAM5S,QA4GahD,EA5GkB4V,EA4GHjY,EA5GgB01B,EA4GEC,EA5GcjuB,GAAYwd,wBA6G3EhJ,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B7Z,OACArC,WACAyb,SAAUka,GAAmBtzB,EAAK6iB,uBAClCnJ,YAAa/O,KAAK4K,MAAMqE,EAAAA,IAAqB,GAAK,GAClD5G,MAAO4G,EAAAA,OAjHL3c,GAASuJ,EAAAA,EAAAA,MACT,MAAQ9I,OAAQ61B,IAAqB31B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAEjF,GAAIwF,GAAUuwB,IAAqBJ,EAAe,CAChD,MAAMK,GAAsBlxB,EAAAA,EAAAA,IAAmBrF,EAAQk2B,GACjDnZ,EAAgBmZ,IAAkBjpB,EAAAA,IACpCjN,EAAO+M,qBAAqBvH,QAAOpF,IAAA,IAAC,UAAE6c,GAAW7c,EAAA,OAAM6c,CAAS,IAAE1X,KAAIqI,IAAA,IAAC,QAAEnI,GAASmI,EAAA,OAAKnI,CAAO,IAC9F,GACE+wB,EAAoB7d,EAAY1V,SAAW0V,EAAYE,OACzD/Q,OAAOgT,OAAOnC,EAAYE,QACzBtT,KAAIgX,IAAA,IAAC,cAAEjU,GAAeiU,EAAA,OAAKga,EAAoBjuB,EAAc,IAC7D9C,OAAOgC,SACR,GAEE2V,EAAe,GAAoBC,OAAOrX,EAAOT,SAAUyX,GAC3D0Z,EAAmCtZ,EAAYC,OAAOoZ,GACtDnZ,GAAOC,EAAAA,EAAAA,IAAqBmZ,EAAkC,MAC9D5Y,EAAYV,EAAY5X,KAAIyX,IAAA,IAAC,GAAEpb,GAAIob,EAAA,OAAKpb,CAAE,IAE3Cg0B,IACH51B,EAAS,IACJA,EACHsF,SAAU,IACLtF,EAAOsF,SACViG,SAAU,CAAC,IAIfzD,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQwR,IAAwB,IAArBtb,GAAI80B,GAAYxZ,EACvDld,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B22B,WAAY,CAAC,GACZD,EAAW,IAEhBd,GAAW,GAGb51B,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQk2B,EAAe7Y,GACpDrd,GAASyd,EAAAA,EAAAA,IAAgBzd,EAAQk2B,EAAeE,EAAgBvY,GAC5DzV,GAAYwuB,kBACd52B,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQk2B,EAAeE,EAAgBhuB,IAGnEN,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ0T,IAAwB,IAArBxd,GAAI80B,GAAYtX,EACvD,MAAQ3e,OAAQo2B,EAAan2B,SAAUo2B,IAAkBn2B,EAAAA,EAAAA,IAAyBX,EAAQ02B,IAAe,CAAC,EACtGG,IAAgBX,GAAiBY,IAAkBV,IACrDp2B,GAASse,EAAAA,EAAAA,IAAuBte,EAAQk2B,EAAeE,EAAgBvY,EAAW6Y,GACpF,IAEF12B,GAAS+2B,EAAAA,EAAAA,IAAY/2B,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO+I,MAAO,OAChE9O,GAASg3B,EAAAA,EAAAA,IAAYh3B,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAC5D9W,EAAO+W,mBAAmB3c,SAC5BH,GAAS4d,EAAAA,EAAAA,IAAkB5d,EAAQk2B,EAAenwB,EAAO+W,qBAG3D6Y,GAAoB,CACtB,CACF,EAEA/xB,EAAAA,EAAAA,IAAU5D,GAEN2Y,GAAa1V,UACfjC,EAAQi2B,WAAW,CAAEx2B,OAAQy1B,EAAgBplB,OAAO,IAChDqlB,GAAmBA,IAAoBt0B,EAAAA,IACzCb,EAAQk2B,cAAc,CACpBz2B,OAAQy1B,EAAgB3f,QAAS4f,EAAiBgB,wBAAwB,IAIlF,CAuCF,IAAyBp0B,EAAerC,EAAkB21B,EArCxDr2B,GAASuJ,EAAAA,EAAAA,MAEJosB,IACH31B,EAAS,IACJA,EACHsF,SAAU,IACLtF,EAAOsF,SACViG,SAAU,CAAC,IAIfzD,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ0rB,IAAwB,IAArBx1B,GAAI80B,GAAYU,EACvDp3B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B22B,WAAY,CAAC,GACZD,EAAW,KAMlB5uB,OAAOC,KAAK8tB,GAAgBnqB,SAASjL,IACnC,MAAM42B,EAAUxB,EAAep1B,GAC/BqH,OAAOC,KAAKsvB,GAAS3rB,SAAShL,IAC5BV,GAASs3B,EAAAA,EAAAA,IAAat3B,EAAQS,EAAQyH,OAAOxH,GAAWm1B,EAAep1B,GAAQyH,OAAOxH,IAAW,GACjG,KAGJkD,EAAAA,EAAAA,IAAU5D,GAEV8H,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ6rB,IAAmB,IAAhB31B,GAAIrB,GAAOg3B,EAClD,MAAQ92B,OAAQ+2B,EAAatwB,UAAWuwB,IAAmBn2B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACrF2uB,GAAeC,KAAmB/iB,EAAAA,EAAAA,IAAkB1U,EAAQw3B,EAAaC,IAC3Ez2B,EAAQ02B,iBAAiB,CAAEn3B,SAC7B,GAEJ,CApKYo3B,CAAuB33B,EAAQgB,GAErChB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH43B,aAAclrB,KAAKC,MACnB0oB,WAAW,IAEbzxB,EAAAA,EAAAA,IAAU5D,GAENoX,EAAAA,KAEFC,QAAQ+d,IAAI,oBAGdyC,EAAAA,EAAAA,MACAvC,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/C7Y,EAAAA,EAAAA,IAAQ,oBACb2Y,GAAwB,GAE1B,KA8JJzc,EAAAA,EAAAA,KAAa9Y,IACX,MAAM,gBAAE83B,EAAe,UAAEC,GAAc/3B,GACjC,YAAEub,IAAgBja,EAAAA,EAAAA,IAAetB,IAClCub,GAAgBL,IAAgB4c,kBAAoBA,GACpD5c,IAAgB6c,YAAcA,GAKX,yBAApBD,GAA4D,4BAAdC,IAEhDhf,EAAAA,EAAAA,MAAaif,OANb9c,GAAiBlb,CASI,KE3PzBe,EAAAA,EAAAA,IAAiB,cAAc+Y,MAAO9Z,EAAQgB,EAASC,KACrD,MAAM,OACJR,EAAM,OACNskB,EAAM,YACNC,EAAW,MACXzkB,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,aAAc,CACzCqI,KAAMliB,EACNgiB,SACAC,gBAGFhkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACLmf,EAAAA,EAAAA,IAAU,2BACV,2EACJ3kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsB+Y,MAAO9Z,EAAQgB,EAASC,KAC7D,MAAM,OACJR,EAAM,OACNskB,EAAM,YACNC,EAAW,MACXiT,EAAK,MACL13B,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,IAASk1B,EACZ,OAGF,MAAMlyB,QAAe6W,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDqI,KAAMliB,EACNk1B,QACAlT,SACAC,gBAGFhkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACLmf,EAAAA,EAAAA,IAAU,2BACV,2EACJ3kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsB+Y,UACrC,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,uBACxB7W,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHk4B,eAAgB,CACdC,OAAQpyB,EAAOqyB,eACfC,cAAevwB,OAAOC,KAAKhC,EAAOqyB,gBAClCE,QAASvyB,EAAOuyB,WAGpB10B,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0B+Y,MAAO9Z,EAAQgB,EAASC,KACjE,MAAM,KAAE8Q,GAAS9Q,EAGjB,UADqB2b,EAAAA,EAAAA,IAAQ,yBAA0B7K,GAErD,OAGF/R,GAASuJ,EAAAA,EAAAA,MAET,MAAQ,CAACwI,GAAOwmB,KAAoBC,GAAgBx4B,EAAOk4B,eAAeC,OAE1En4B,EAAS,IACJA,EACHk4B,eAAgB,CACdC,OAAQK,EACRH,cAAer4B,EAAOk4B,eAAeG,cAAc7yB,QAAQizB,GAAOA,IAAO1mB,OAG7EnO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,8BAA8B+Y,UAE7C,UADqB8C,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAM8b,GADN14B,GAASuJ,EAAAA,EAAAA,OACyB2uB,eAAeG,cAC9C1sB,MAAMoG,GAAS/R,EAAOk4B,eAAeC,OAAOpmB,GAAM4mB,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiB54B,EAAOk4B,eAAeC,OAAOO,GAEpD14B,EAAS,IACJA,EACHk4B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpB90B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB+Y,MAAO9Z,EAAQgB,EAASC,KAChE,MAAM,KAAE8Q,EAAI,gBAAE8mB,EAAe,sBAAEC,GAA0B73B,QACpC2b,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD7K,OACA8mB,kBACAC,4BAOF94B,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHk4B,eAAgB,IACXl4B,EAAOk4B,eACVC,OAAQ,IACHn4B,EAAOk4B,eAAeC,OACzB,CAACpmB,GAAO,IACH/R,EAAOk4B,eAAeC,OAAOpmB,WACRlR,IAApBg4B,EAAgC,CAAEA,wBAAoBh4B,UAC5BA,IAA1Bi4B,EAAsC,CAAEA,8BAA0Bj4B,OAK9E+C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,KAAE83B,GAAS93B,QAEI2b,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEmc,WAMnD/4B,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHk4B,eAAgB,IACXl4B,EAAOk4B,eACVI,QAASS,KAGbn1B,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB+Y,UACxC,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,0BAC7B,IAAK7W,EACH,OAEF,MAAM,MAAE8W,EAAK,kBAAEmc,GAAsBjzB,EACrC/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD7c,EAAS,IACJA,EACHi5B,kBAAmB,CACjBd,OAAQa,EACRX,cAAevwB,OAAOC,KAAKixB,MAG/Bp1B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6B+Y,MAAO9Z,EAAQgB,EAASC,KACpE,MAAM,KAAE8Q,GAAS9Q,EAGjB,UADqB2b,EAAAA,EAAAA,IAAQ,4BAA6B7K,GAExD,OAGF/R,GAASuJ,EAAAA,EAAAA,MAET,MAAQ,CAACwI,GAAOwmB,KAAoBC,GAAgBx4B,EAAOi5B,kBAAkBd,OAE7En4B,EAAS,IACJA,EACHi5B,kBAAmB,CACjBd,OAAQK,EACRH,cAAer4B,EAAOi5B,kBAAkBZ,cAAc7yB,QAAQizB,GAAOA,IAAO1mB,OAGhFnO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iCAAiC+Y,gBAC3B8C,EAAAA,EAAAA,IAAQ,mCAK7B5c,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACHi5B,kBAAmB,CACjBd,OAAQ,CAAC,EACTE,cAAe,MAGnBz0B,EAAAA,EAAAA,IAAU5D,GAAO,ICjNnB,MACMk5B,IAAwBjO,EAAAA,EAAAA,KAAU/O,GAAOA,KAAM,KAAK,GC7BnD,SAASid,GACdn5B,EAAW+rB,EAAkBqN,GAE1B,QAAAn5B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM+B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bq5B,WAAY,IACPl3B,EAASk3B,WACZC,WAAY,IACPn3B,EAASk3B,WAAWC,WACvB,CAACvN,GAAWqN,KAGf74B,EACL,CAEO,SAASg5B,GACdv5B,EAAWga,GAER,QAAAsC,EAAApc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAic,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA5O,EAAA4O,EAAA,GAAAtc,UAAAsc,GAAA,IADCjc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAE9B,OAAOrL,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bq5B,WAAY,KACP/3B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO84B,WACjCrf,cAEDzZ,EACL,EDKAQ,EAAAA,EAAAA,IAAiB,gBAAgB+Y,MAAO9Z,EAAQgB,EAASC,KACvD,MAAM,OAAE2O,GAAW3O,EACb2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAChC,IAAKgU,EACH,OAGF,MAAM,GAAEhiB,EAAE,WAAE+nB,GAAe/F,EACrB4V,QAAgB5c,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,KAAI+nB,eACrD,IAAK6P,EAAS,OAEd,MAAMC,EAAuB7V,EAAK8V,aAAeF,EAAQE,WACnDC,EAAyB/V,EAAKmE,UAAU6R,cAAch4B,KAAO43B,EAAQzR,UAAU6R,cAAch4B,GAC7Fi4B,EAA0BjW,EAAKmE,UAAU+R,eAAel4B,KAAO43B,EAAQzR,UAAU+R,eAAel4B,GAChGm4B,EAA0BnW,EAAKmE,UAAUiS,eAAep4B,KAAO43B,EAAQzR,UAAUiS,eAAep4B,IACjG63B,GAAwBE,GAA0BE,GAA2BE,IAC7EnW,EAAKqW,QAAQ95B,QAChBa,EAAQi0B,kBAAkB,CAAEC,UAAWtlB,GACzC,KAGF7O,EAAAA,EAAAA,IAAiB,YAAY+Y,MAAO9Z,EAAQgB,EAASC,KACnD,MAAM,OAAE2O,GAAW3O,EACb2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAChC,IAAKgU,EACH,OAGF,MAAM7d,QAAe6W,EAAAA,EAAAA,IAAQ,aAAc,CAAEC,MAAO,CAAC+G,KACrD,IAAK7d,EACH,OAGF,MAAM,MAAE8W,EAAK,iBAAEqd,GAAqBn0B,EAEpC/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASg3B,EAAAA,EAAAA,IAAYh3B,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACzD7c,GAASm6B,EAAAA,EAAAA,IAAoBn6B,EAAQ,IAChCA,EAAO6c,MAAMud,gBACbF,KAELt2B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB+Y,UAC/B,MAAQugB,UAAU,gBAAEC,IAAsBt6B,EAE1C,GAAOs6B,MAAmBntB,EAAAA,EAAAA,MAAkBmtB,EAlDX,IAmD/B,OAGF,MAAMv0B,QAAe6W,EAAAA,EAAAA,IAAQ,iBAC7B,IAAK7W,EACH,OAGF,MAAM,IAAEkE,EAAG,MAAE4S,GAAU9W,EAEvB/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,EAAS,IACJA,EACHq6B,SAAU,IACLr6B,EAAOq6B,SACVlI,QAASloB,EACTqwB,iBAAiBntB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmB+Y,UAClC,MAAMygB,QAAoB3d,EAAAA,EAAAA,IAAQ,oBAClC,IAAK2d,EACH,OAGFv6B,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBid,EAAY1d,MAAO,OAClE7c,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBid,EAAYzrB,MAAO,OAClE9O,GAASw6B,EAAAA,EAAAA,IAAgBx6B,EAAQu6B,EAAYL,kBAG7C,MAAMO,EAAoB7W,GAAmBA,EAAK8W,UAAY9W,EAAK+W,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcR,EAAY1d,MAAMjX,MAAK,CAAC+gB,EAAGC,IAC7CgU,EAASI,QAAQP,EAAiB9T,GAAI8T,EAAiB7T,MACtDphB,QAAQoe,IAAUA,EAAKqX,SAE1Bj7B,EAAS,IACJA,EACHu6B,YAAa,CACXpI,QAAS4I,EAAYx1B,KAAKqe,GAASA,EAAKhiB,QAG5CgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7B6b,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlC7b,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDqjB,EAAOnjB,GAASojB,EAAAA,EAAAA,IAAW7jB,EAAQS,QAAUI,EACnD,IAAK+iB,IAAQuB,EAAAA,EAAAA,IAAUvB,IAASA,EAAKsX,aAAaC,cAChD,OAGF,MAAM1tB,EAAQmW,EAAKsX,aAAaztB,MAC1B1H,QAAe6W,EAAAA,EAAAA,IAAQ,mBAAoBgH,EAAKhiB,GAAIgiB,EAAK+F,WAAalc,GAC5E,IAAK1H,EACH,OAGF,MAAM,MAAE+I,EAAK,QAAEojB,EAAO,cAAEiJ,GAAkBp1B,EAE1C/F,GAASuJ,EAAAA,EAAAA,MACLuF,EAAM3O,SACRH,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,QAExD9O,GAASo7B,EAAAA,EAAAA,IAAWp7B,EAAQ4jB,EAAKhiB,GAAI,CACnCs5B,YAAa,CACXztB,MAAOykB,EAAQ/xB,OAAS+xB,EAAQA,EAAQ/xB,OAAS,GAAK,IACtD8J,KAAKmM,EAAAA,EAAAA,KAAQwN,EAAKsX,aAAajxB,KAAO,IAAImT,OAAO8U,IACjDiJ,oBAIJv3B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MAAM,OACJ2O,EAAM,QAAEhH,GAAU,EAAK,UAAE+xB,EAAS,SAAED,EAAQ,uBAAEW,EAAsB,MACpE96B,GAAQC,EAAAA,EAAAA,OACNS,EAEE2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAChC,IAAKgU,EACH,OASF,IAAI7d,EACJ,GAPA/E,EAAQs6B,qBAAqB,CAAE76B,OAAQmP,EAAQhH,YAE/C5I,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,WAA+BtyB,IACzEqD,EAAAA,EAAAA,IAAU5D,IAGL4jB,EAAK2X,WAAa3X,EAAK4X,YAC1Bz1B,QAAe6W,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6e,MAAO7X,EAAK4X,YAAab,YAAWD,iBACzE,CACL,MAAM,GAAE94B,EAAE,WAAE+nB,GAAe/F,EAC3B7d,QAAe6W,EAAAA,EAAAA,IAAQ,gBAAiB,CACtChb,KACA+nB,aACA6R,YAAa,GACbb,YACAD,WACAW,0BAEJ,CAEIt1B,IACF/E,EAAQ06B,iBAAiB,CAAEj7B,OAAQmP,IAEnC5P,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASo7B,EAAAA,EAAAA,IACPp7B,EACA4jB,EAAKhiB,GACL,CACE+4B,YACAD,cAGJ92B,EAAAA,EAAAA,IAAU5D,IAGZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASizB,EAAAA,EAAAA,IAAyBjzB,EAAQ6yB,EAAAA,GAAAA,SAA6BtyB,GACvEP,GAAS+P,EAAAA,EAAAA,IAAsB/P,EAAQO,IACvCqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MAAM,OAAE2O,GAAW3O,EAEb2iB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQ4P,GAEhC,IAAKgU,EACH,OAGF,MAAM,GAAEhiB,EAAE,WAAE+nB,GAAe/F,QAErBhH,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,KAAI+nB,cAAa,KAGpD5oB,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,UAAEi0B,GAAcj0B,EAChB06B,GAAYC,EAAAA,EAAAA,IAAS1G,GAE3B,IAAItR,EAAO+X,GAAY9X,EAAAA,EAAAA,IAAW7jB,EAAQk1B,QAAar0B,EACvD,MAAMkC,EAAQ44B,OAA4C96B,GAAhCmC,EAAAA,EAAAA,IAAWhD,EAAQk1B,GAC7C,IAAKtR,IAAS7gB,EACZ,OAGF,GAAI6gB,IAASA,EAAKmE,UAAU6R,aAAc,CACxC,MAAM,GAAEh4B,EAAE,WAAE+nB,GAAe/F,EAE3B,GADAA,QAAahH,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,KAAI+nB,gBACvC/F,EAAM,MACb,CAEA,MAAM7d,QAAe6W,EAAAA,EAAAA,IAAQ,qBAAsBgH,EAAM7gB,GACzD,IAAKgD,IAAWA,EAAOk0B,OACrB,OAGFj6B,GAASuJ,EAAAA,EAAAA,MAET,MAAMsyB,EAAajY,GAAQ7gB,GACrB,OAAEk3B,EAAM,MAAEpd,GAAU9W,EAC1Bk0B,EAAOr0B,MAAM+gB,GAAOA,EAAE/kB,KAAOi6B,GAAYnC,YAAc,EAAI,IAC3D,MAAMI,EAAgBlW,GAAMmE,UAAU+R,cAChCE,EAAgBpW,GAAMmE,UAAUiS,cAClCF,GAAeG,EAAO7zB,KAAK0zB,GAC3BE,GAAeC,EAAO/qB,QAAQ8qB,GAElCh6B,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAGpD7c,EADE27B,GACOP,EAAAA,EAAAA,IAAWp7B,EAAQk1B,EAAW,CAAE+E,YAEhCjW,EAAAA,EAAAA,IAAWhkB,EAAQk1B,EAAW,CAAE+E,YAG3Cr2B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCC,GAEAg4B,IAAsBpf,UACzB,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,cAAe,CAAE1b,UAE9ClB,GAASuJ,EAAAA,EAAAA,MACT,MAAMwnB,GAAqBzvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOu7B,WAAW56B,MAEpE,IAAK6E,IAAWgrB,GAAuB7vB,IAAU6vB,EAG/C,OAFA/wB,GAAS+7B,EAAAA,EAAAA,IAA+B/7B,GAAQ,EAAOO,QACvDqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,WAAE+xB,EAAU,YAAEE,GAAgBlsB,EAEpC,IAAI4J,EACAD,EACAqiB,EAAW5xB,SACbH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqByU,EAAY,OAC3DpiB,EAAeoiB,EAAWxsB,KAAInF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,KAE1CqwB,EAAY9xB,SACdH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqB2U,EAAa,OAC5DviB,EAAgBuiB,EAAY1sB,KAAIqI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAGhD5B,GAAS+7B,EAAAA,EAAAA,IAA+B/7B,GAAQ,EAAOO,GACvDP,GAASyP,EAAAA,EAAAA,IAAiBzP,EAAQ,CAAE2P,eAAcD,iBAAiBnP,IAEnEqD,EAAAA,EAAAA,IAAU5D,EAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MACEu6B,YAAaC,EAAK,UAAEd,EAAS,SAAED,EAAQ,MACvCn6B,GAAQC,EAAAA,EAAAA,OACNS,EAEE8E,QAAe6W,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6e,QAAOd,YAAWD,aAC7D30B,GASL/E,EAAQ6C,SAAS,CAAEjC,GAAImE,EAAQxF,UAE/BP,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+P,EAAAA,EAAAA,IAAsB/P,EAAQO,IACvCqD,EAAAA,EAAAA,IAAU5D,IAZRgB,EAAQqL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,qCAChC3E,SAUa,KAGnBQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACb46B,GAAaD,EAAAA,EAAAA,IAASn7B,IAAUojB,EAAAA,EAAAA,IAAW7jB,EAAQS,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GACjFo7B,IAIAjf,EAAAA,EAAAA,IAAQ,aAAcif,EAAW,KAGxC96B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,YAAE+6B,EAAW,QAAEC,GAAYh7B,GAE5B2b,EAAAA,EAAAA,IAAQ,oBAAqBof,EAAaC,EAAQ,I,gBE/VzD,MAAMC,GAAkBnc,EAAAA,IAAUoc,EAAAA,GAEnB,MAAMC,GAGnBC,YAAoBC,EAA2BC,G,UAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,+SAAA,gB,uFAC1E,CAEAC,kBACON,KAELO,KAAKC,UAAYn5B,OAAOC,KAAK,mBAAe3C,EAAW47B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEA/4B,KAAK8Q,GACH,GAAImoB,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAASvsB,KAAOiE,EAChCmoB,KAAKC,UAAWG,aAChBJ,KAAKC,eAAY77B,GAKnB,IAAKq7B,GAAiB,CACpB,MAAMY,EAAQv5B,OAAOC,KAAK8Q,OAAKzT,EAAW47B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,gBACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAY77B,CACnB,EChBF,MAAMo8B,GAAY,4BAEZC,IAAwBvsB,EAAAA,EAAAA,KAAUuL,GAAOA,KAAM,KAAK,GA6kB1DpC,eAAeqjB,GACbn9B,EAAWo9B,EAAcC,EAAoBC,SAEvC1gB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEwgB,MAAKE,iBAAgBD,cACxDr9B,GAASuJ,EAAAA,EAAAA,YACHg0B,GAAev9B,EACvB,CAEA8Z,eAAeyjB,GAAsCv9B,EAAW+R,GAC9D,MAAMhM,QAAe6W,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE7K,SAC5ChM,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAC7D7c,EAAS,IACJA,EACHw9B,WAAY,CACVzrB,KAAMhM,EAAOgM,KACb0rB,KAAM13B,EAAO03B,QAGjB75B,EAAAA,EAAAA,IAAU5D,GACZ,CAgMA,SAAS09B,GACP19B,EACAgB,EACAsT,EAAavO,GAEb,QAAA9F,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,GAAoB,YAAhB2F,EAAOjE,KAAoB,CAC7B9B,GAASuJ,EAAAA,EAAAA,MACT,MAAMpH,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASw7B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAER,EAAG,yBAAES,GAA6B93B,EAYlD,OAXA/F,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B29B,QAAS,IACJx7B,EAASw7B,QACZG,QAAS,CACPF,SACAjpB,MAAOyoB,EAAIx7B,GACXi8B,8BAGHt9B,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CAEA,MAAM+9B,EAA0B,aAAhBh4B,EAAOjE,KAAsBiE,EAAOuO,IAAMA,EAC1D/Q,OAAOC,KAAKu6B,EAAS,SAAU,YAC/B/8B,EAAQg9B,kBAAkB,CAAEz9B,SAC9B,CAiEAuZ,eAAemkB,GACbl7B,GACA,IADerC,EAAQR,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG2B,EAAAA,GAAgBq8B,EAAeh+B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEif,EAAmB5f,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEmhB,EAA0B9hB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,QAEpG+b,EAAAA,EAAAA,IAAQ,cAAe,CAC3B7Z,OACAmd,gBAAiBxf,EACjBoD,KAAMo6B,EACNpe,aACAkC,UAEJ,CAEA,IAAImc,GAEJrkB,eAAeskB,GACbp+B,EACAgB,EAAgC+B,EAAemE,EAAmB6M,GAElE,IAFiFsqB,EAAMn+B,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAif,EAAAjf,UAAAC,OAAA6c,EAAA,IAAA3c,MAAA8e,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAArC,EAAAqC,EAAA,GAAAnf,UAAAmf,GAAA,IAC3F9e,GAAQC,EAAAA,EAAAA,OAAkBwc,EAE9B,MAAM,WACJ6M,EAAU,iBAAExd,EAAgB,QAAEiyB,EAAO,SAAEC,GACrCv9B,EAEAq9B,IACGF,KACHA,GAAc,IAAI/B,GAAa,8BAA8B,KAC3D/vB,EAAiB,CAAE5G,QAAS,qCAAsClF,SAAQ,KAI9E49B,GAAY3B,mBAGd,MAAMz2B,QAAe6W,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDnc,OAAQsC,EAAKnB,GACb+nB,WAAY5mB,EAAK4mB,WACjBziB,YACA6M,OACAsqB,WAGF,IAAKt4B,EACH,OAEF,MAAM,QAAEN,EAAS+4B,MAAOC,EAAO,IAAEnqB,GAAQvO,EAErC04B,EACF5U,EAAW,CAAE9V,KAAM,CAAEtO,QAASA,GAAW,SAAWlF,UAC3CkF,EACT4G,EAAiB,CAAE5G,UAASlF,UACnB+T,IACL+pB,EAEE/pB,EAAI7J,SAASwyB,IACfkB,GAAa36B,KAAK8Q,IAElB6pB,GAAapB,gBACbwB,EAAS,CACPjqB,MAAK7T,OAAQsC,EAAKnB,GAAIsF,YAAW3G,WAIrC+9B,EAAQ,CAAEhqB,MAAK/T,UAGrB,CCl4BAuZ,eAAe4kB,GACb1+B,EAAW2+B,GAEsB,QAAA1+B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IAD7BC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM2F,QAAe6W,EAAAA,EAAAA,IAAQ,iBAAkB+hB,GAC/C,IAAK54B,EACH,OAGF,MAAM,KAAE64B,EAAI,QAAEC,EAAO,MAAEhiB,GAAU9W,EAQjC,OANA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS8+B,EAAAA,EAAAA,IAAe9+B,EAAQ4+B,EAAMr+B,GACtCP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,SAAsBz+B,GACtDP,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,QACtDjZ,EAAAA,EAAAA,IAAU5D,GAEH6+B,CACT,CAqUA/kB,eAAemlB,GACbj/B,EAAW2+B,EAAsCO,EAAkBC,GAEnE,QAAAC,EAAAl/B,UAAAC,OAAA6c,EAAA,IAAA3c,MAAA++B,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAriB,EAAAqiB,EAAA,GAAAn/B,UAAAm/B,GAAA,IADI9+B,GAAQC,EAAAA,EAAAA,OAAkBwc,EAE9B,MAAMjX,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD+hB,eAAcO,cAAaC,eAE7B,IAAKp5B,EACH,OAGF,MAAM,GAAEnE,EAAE,gBAAE09B,GAAoBv5B,EAChC/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASu/B,EAAAA,EAAAA,IAAiBv/B,EAAQ4B,EAAIrB,GAClC++B,GACFt/B,GAASw/B,EAAAA,EAAAA,IAAsBx/B,EAAQs/B,EAAiB/+B,GACxDP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,SAAsBz+B,IAEtDP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,SAAsBz+B,IAExDqD,EAAAA,EAAAA,IAAU5D,EACZ,ED5aAe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UAAEiG,EAAS,OAAEu4B,EAAM,MAAEl/B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAQw+B,EAAO39B,MACb,IAAK,UACHd,EAAQi9B,eAAe,CAAEC,QAASuB,EAAO37B,KAAMvD,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAE+T,GAAQmrB,EAChBz+B,EAAQs9B,QAAQ,CAAEhqB,MAAK/T,UACvB,KACF,CACA,IAAK,WAAY,CACf,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAGGq7B,GAAqBp+B,EAAQgB,EAAS+B,EAAMmE,EAAWu4B,EAAO1rB,UAAMlT,EAAWN,GACpF,KACF,CACA,IAAK,cACHS,EAAQ0+B,cAAc,CAAEnzB,OAAQkzB,EAAOlzB,OAAQhM,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMqjB,EAAO5jB,EAAOmY,eAAgB0L,EAAAA,EAAAA,IAAW7jB,EAAQA,EAAOmY,oBAAiBtX,EAC/E,IAAK+iB,EACH,OAEF5iB,EAAQ6oB,WAAW,CACjB9V,KAAM,CACJynB,YAAa5X,EAAK4X,YAClBb,UAAW/W,EAAK+W,UAChBD,SAAU9W,EAAK8W,SACf9qB,OAAQgU,EAAKhiB,IAEfrB,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF,MAAM,iBAAE48B,GAAqBF,EAC7Bz+B,EAAQ4+B,WAAW,CACjBD,mBAAkBl/B,OAAQsC,EAAKnB,GAAIsF,YAAW3G,UAEhD,KACF,CACA,IAAK,MAAO,CACV,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF/B,EAAQ6+B,YAAY,CAClBp/B,OAAQsC,EAAKnB,GACbsF,YACA3G,UAEF,KACF,CACA,IAAK,OAAQ,CACX,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAGGq7B,GAAqBp+B,EAAQgB,EAAS+B,EAAMmE,OAAWrG,GAAW,EAAMN,GAC7E,KACF,CACA,IAAK,kBAAmB,CACtB,MAAM,MAAEW,EAAK,WAAE4+B,GAAeL,EAC9Bz+B,EAAQ++B,gBAAgB,CACtB7+B,QAAO4+B,aAAY54B,YAAW3G,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEqP,GAAW6vB,EACnBz+B,EAAQg/B,iBAAiB,CAAEp+B,GAAIgO,EAAQrP,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAE+T,GAAQmrB,GACV,OAAEh/B,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAEF,MAAMgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKzB,GAASoP,SAAU,OACxB,MAAMorB,GAAQC,EAAAA,GAAAA,MACdl/B,EAAQm/B,qBAAqB,CAC3B7rB,MAAKK,MAAOlP,GAASoP,SAAUorB,QAAOG,WAAYX,EAAO37B,KAAMvD,UAEjE,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAE+T,GAAQmrB,EACV18B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF,MAAM0C,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnD,IAAKzB,EACH,OAEF,MAAMkP,EAAQlP,EAAQmP,UAAYnP,EAAQoP,SAC1C,IAAKF,EACH,OAEF,MAAMsrB,GAAQC,EAAAA,GAAAA,MACdl/B,EAAQq/B,eAAe,CACrB/rB,MACAK,QACA2rB,OAAQv9B,EAAKnB,GACbq+B,QACAG,WAAYX,EAAO37B,KACnBvD,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAE+T,GAAQmrB,EACV18B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF/B,EAAQu/B,kBAAkB,CACxB9/B,OAAQsC,EAAKnB,GACbsF,YACAs5B,SAAUf,EAAOe,SACjBlsB,MACA/T,UAEF,KACF,EAAC,KAILQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,QAAEi9B,EAAO,OAAEz9B,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD8B,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,IAAUqL,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvE2B,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAE5D,IAAKwC,IAASb,EACZ,OAGF,MAAM,SAAExB,GAAawB,EACrBlB,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQkhB,oBAAoB,CAAE3hB,UAEzB09B,GACHl7B,EAAMrC,EAAUw9B,GAASv2B,EAAAA,EAAAA,IAAmB3H,EAAQ+C,EAAKnB,GAAIlB,IAAWuhB,EAAAA,EAAAA,IAAajiB,EAAQ+C,EAAKnB,IACnG,KAGHb,EAAAA,EAAAA,IAAiB,cAAc+Y,MAAO9Z,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GACxC,cAAEkX,GAAkBnY,EACpB+C,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACjC68B,EAAMjlB,IAAiBsoB,EAAAA,EAAAA,IAAczgC,EAAQS,GAC9C0X,GAAkBpV,GAASq6B,SAIXxgB,EAAAA,EAAAA,IAAQ,iBAAkBwgB,EAAIx7B,GAAIw7B,EAAIzT,cAK3D3pB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0gC,EAAAA,EAAAA,IAAqB1gC,EAAQo9B,EAAIx7B,KAC1CgC,EAAAA,EAAAA,IAAU5D,GACLi+B,GAAel7B,EAAMlB,EAAAA,GAAgB,cAAUhB,GAAWohB,EAAAA,EAAAA,IAAajiB,EAAQS,IAAQ,KAG9FM,EAAAA,EAAAA,IAAiB,qBAAqB+Y,UACpC,MAAM,gBAAEwgB,GAAoBt6B,EAAO2gC,cACnC,GAAIrG,IAAmBntB,EAAAA,EAAAA,MAAkBmtB,EA3LR,GA4L/B,OAGF,MAAMv0B,QAAe6W,EAAAA,EAAAA,IAAQ,sBAC7B,IAAK7W,EACH,OAGF,MAAM,IAAEkE,EAAG,MAAE4S,GAAU9W,EAEvB/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OACtD7c,EAAS,IACJA,EACH2gC,cAAe,IACV3gC,EAAO2gC,cACVxO,QAASloB,EACTqwB,iBAAiBntB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,OACJR,EAAM,SAAEsrB,EAAQ,MAAE7qB,EAAK,OAAEqO,EAAM,MAC/BhP,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI2/B,GAAgBt/B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO84B,WAAWC,WAAWvN,GACxE,IAAsB,IAAlB6U,EAAJ,CAIA,QAAsB//B,IAAlB+/B,EAA6B,CAC/B,MAAQhd,KAAMid,EAAS,KAAE99B,SAAe6Z,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEmP,cAAe,CAAC,EAEpF,GADA/rB,GAASuJ,EAAAA,EAAAA,OACJs3B,IAAc99B,EAGjB,OAFA/C,EAASm5B,GAAyBn5B,EAAQ+rB,GAAU,EAAOxrB,QAC3DqD,EAAAA,EAAAA,IAAU5D,GAIZA,GAAS0d,EAAAA,EAAAA,IAAS1d,EAAQ,CAAE,CAAC6gC,EAAUj/B,IAAKi/B,IAC5C7gC,GAAS2d,EAAAA,EAAAA,IAAS3d,EAAQ,CAAE,CAAC+C,EAAKnB,IAAKmB,IACvC69B,EAAgB,CACdh/B,GAAIi/B,EAAUj/B,GACdV,MAAO,GACPqO,OAAQ,GACRuxB,cAAUjgC,EACVkgC,aAAa,EACbvxB,QAAS,GACTwxB,UAAW,GAGbhhC,EAASm5B,GAAyBn5B,EAAQ+rB,EAAU6U,EAAergC,IACnEqD,EAAAA,EAAAA,IAAU5D,EACZ,EAEIkB,IAAU0/B,EAAc1/B,OAAU0/B,EAAcG,cAI/C7D,IAAsB,MAykB7BpjB,eAAsD9Z,EAASuc,GAYhB,IAZkB,SAC/DwP,EAAQ,cACR6U,EAAa,OACbngC,EAAM,MACNS,EAAK,OACLqO,GAODgN,EAAA,QAAAD,EAAApc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAic,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA5O,EAAA4O,EAAA,GAAAtc,UAAAsc,GAAA,IAAMjc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAC/B5N,GAASuJ,EAAAA,EAAAA,MACT,MAAM6zB,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ4gC,EAAch/B,IACvCmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAK28B,IAAQr6B,EACX,OAGF,MAAMk+B,EAAwBL,EAAc1/B,QAAUA,EAEtDlB,EAASm5B,GADTn5B,EAASu5B,GAA2Bv5B,GAAQ,EAAMO,GACRwrB,EAAU,IAC/C6U,EACH1/B,WACI+/B,GAAyB,CAAE1xB,YAAQ1O,EAAW2O,QAAS,KAC1DjP,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAe6W,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDwgB,MACAr6B,OACA7B,QACAqO,OAAQ0xB,OAAwBpgC,EAAY0O,IAG9CvP,GAASuJ,EAAAA,EAAAA,MACT,MAAM23B,GAAmB5/B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO84B,WAAWC,WAAWvN,GAE7E,GADA/rB,EAASu5B,GAA2Bv5B,GAAQ,EAAOO,IAC9CwF,IAAWm7B,GAAoBhgC,IAAUggC,EAAiBhgC,MAE7D,YADA0C,EAAAA,EAAAA,IAAU5D,GAIZ,MAAMmhC,EAAa,IAAIC,KAAKF,EAAiB1xB,SAAW,IAAIjK,KAAKwO,GAASA,EAAKnS,MACzEy/B,EAAat7B,EAAOyJ,QAAQhK,QAAQuO,IAAUotB,EAAWzhB,IAAI3L,EAAKnS,MAExE5B,EAASm5B,GAAyBn5B,EAAQ+rB,EAAU,IAC/CmV,EACHI,KAAMv7B,EAAOu7B,KACbN,UAAWt0B,KAAKC,MAA2B,IAAnB5G,EAAOi7B,aAC3BK,EAAWlhC,QAAU,CAAEohC,UAAWx7B,EAAOw7B,cACzCx7B,EAAO+6B,UAAY,CAAEA,SAAU/6B,EAAO+6B,UAC1CC,YAAah7B,EAAOyJ,QAAQrP,OAAS,GAAKqH,QAAQzB,EAAOsgB,YACzD7W,QAAqC,KAA5B0xB,EAAiB3xB,QAAiB2xB,EAAiB3xB,SAAWxJ,EAAOsgB,WAC1EtgB,EAAOyJ,SACN0xB,EAAiB1xB,SAAW,IAAI4N,OAAOikB,GAC5C9xB,OAAQ8xB,EAAWlhC,OAAS4F,EAAOsgB,WAAa,IAC/C9lB,IAEHqD,EAAAA,EAAAA,IAAU5D,EACZ,CAroBIwhC,CAAgBxhC,EAAQ,CACtB+rB,WACA6U,cAAeA,EACfngC,SACAS,QACAqO,UACChP,EAAM,GAtCX,CAuCE,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MACJC,EAAK,WAAE4+B,EAAU,UAAE54B,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OACpCS,EACE8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF,MAAM0C,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnD,IAAKzB,EACH,OAGF,MAAMg8B,GAAY5d,EAAAA,EAAAA,IAAW7jB,EAAQyF,EAAQmP,UAAYnP,EAAQoP,UAC5D4sB,GAILzgC,EAAQ0gC,kBAAkB,CACxB59B,KAAO,IAAG29B,EAAUE,UAAW,GAAG5V,YAAY7qB,IAC9CT,OAAQq/B,EAAa/8B,EAAKnB,QAAKf,EAC/BN,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,GACJW,EAAE,QAAEggC,EAAO,SAAEpd,EAAQ,YAAE7C,EAAW,MAClCphB,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,IAAuBN,EAC1B,OAGF,MAAM,OAAEnB,EAAM,SAAEC,GAAawB,EAEvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bqf,GAAanY,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACtD,IAAIwf,EAEAJ,GAAcpf,IAAamB,EAAAA,KAC7Bqe,GAAkBD,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,IAG7DM,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQkhB,oBAAoB,CAAE3hB,WAEzBqc,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC7Z,OACA8+B,SAAUjgC,EACVggC,UACA9hB,aACAI,kBACA8B,QAAQC,EAAAA,EAAAA,IAAajiB,EAAQS,GAC7B+jB,WACAsd,aAAcngB,GACd,KAGJ5gB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAE8qB,EAAQ,MAAEjb,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD,IAAI2/B,GAAgBt/B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO84B,WAAWC,WAAWvN,GAEnE6U,KAIA9vB,GAASpE,KAAKC,MAAQi0B,EAAcI,YAEzCJ,EAAgB,CACdh/B,GAAIg/B,EAAch/B,GAClBV,MAAO,GACPqO,OAAQ,GACRuxB,cAAUjgC,EACVkgC,aAAa,EACbvxB,QAAS,GACTwxB,UAAW,GAGbhhC,EAASm5B,GAAyBn5B,EAAQ+rB,EAAU6U,EAAergC,IACnEqD,EAAAA,EAAAA,IAAU5D,IAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5Co4B,GAAa/3B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO84B,WAAWC,WAE5DxxB,OAAOC,KAAKsxB,GAAY3tB,SAASqgB,IAC/B/qB,EAAQ+gC,eAAe,CAAEhW,WAAUxrB,SAAQ,GAC3C,KAGJQ,EAAAA,EAAAA,IAAiB,YAAY+Y,MAAO9Z,EAAQgB,EAASC,KACnD,MAAM,MAAE0T,EAAK,MAAEqtB,GAAU/gC,EAEzB,IAAIm8B,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GACxByoB,IAGAA,EAAIrV,gBAAgBnL,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhb,GAAIw7B,EAAIx7B,GAAI+nB,WAAYyT,EAAIzT,aAChF3pB,GAASuJ,EAAAA,EAAAA,MACT6zB,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GACrByoB,EAAIrV,UAAUka,iBAAiBrlB,EAAAA,EAAAA,IAAQ,iBAAkBwgB,EAAIx7B,GAAIw7B,EAAIzT,kBAEnE/M,EAAAA,EAAAA,IAAQ,WAAY,CACxBwgB,MACA8E,WAAYF,IACZ,KAGJjhC,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,IACJqT,EAAG,MAAEK,EAAK,MAAEsrB,EAAK,WAAEG,EAAU,MAC7B7/B,GAAQC,EAAAA,EAAAA,OACNS,EAEEm8B,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GAC/B,IAAKyoB,EAAK,OAEV,KAAKtoB,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,SACNkT,UAAW,CACTC,OAAQ,uBACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAMmiC,QAAmBvlB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEtI,MAAK8oB,MAAK6C,UAChEkC,IAILniC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoiC,OAAQ,CACN9tB,IAAK6tB,EACLxtB,QACAyrB,eAED7/B,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,IACJqT,EAAG,MAAEK,EAAK,OAAE2rB,EAAM,MAAEL,EAAK,SAAEzb,EAAQ,WAAE4b,EAAU,cAAEiC,EAAa,WAAEH,EAAU,MAC1E3hC,GAAQC,EAAAA,EAAAA,OACNS,EAEEm8B,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GAC/B,IAAKyoB,EAAK,OACV,MAAMnY,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQsgC,GAChC,IAAKrb,EAAM,OAEX,KAAKnQ,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,SACNkT,UAAW,CACTC,OAAQ,iBACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBogC,EAAQ7hC,IAAUkH,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACrDshB,GAASC,EAAAA,EAAAA,IAAajiB,EAAQS,GAC9BsF,QAAe6W,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CtI,MACA8oB,MACAnY,OACAgb,QACAzb,WACAlD,iBAAkBghB,QAASzhC,EAC3BH,WACA2hC,gBACAH,aACAlgB,WAEF,IAAKjc,EACH,OAGF,MAAQuO,IAAK6tB,EAAU,QAAEP,GAAY77B,EAErC/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoiC,OAAQ,CACN9tB,IAAK6tB,EACLxtB,QACAitB,UACAtgB,iBAAkBghB,QAASzhC,EAC3BH,WACA0/B,eAED7/B,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,MACJ0T,EAAK,OAAE2rB,EAAM,SAAE9b,EAAQ,iBAAElD,EAAgB,QAAEsgB,EAAO,SAAElhC,EAAQ,MAC5DH,GAAQC,EAAAA,EAAAA,OACNS,EAEEm8B,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GAC/B,IAAKyoB,EAAK,OACV,MAAMnY,GAAOjiB,EAAAA,EAAAA,IAAWhD,EAAQsgC,GAChC,IAAKrb,EAAM,OAEX,MAAMjD,GAASC,EAAAA,EAAAA,IAAajiB,EAAQsgC,SAEf1jB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CwgB,MACAnY,OACAT,WACAlD,mBACA5gB,WACAkhC,UACA5f,YAIAhhB,EAAQuhC,YAAY,CAAEhiC,SACxB,KAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJm8B,EAAG,KAAErpB,EAAI,WAAEqsB,GACTn/B,GAEJ2b,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBwgB,MACArpB,OACAqsB,cACA,KAGJr/B,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoiC,YAAQvhC,GACPN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASigC,QAAQ9tB,IAEtB,OAAO/R,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoiC,OAAQ,IACHjgC,EAASigC,OACZI,KAAMvhC,EAAQuhC,OAEfjiC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+U,qBAAiBlU,GAChBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAE0T,EAAK,MAAEpU,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,cAAEwhC,GAAkBziC,EAEpB0iC,EAAmB,IAAItB,IAAIqB,GACjCC,EAAiBC,IAAIhuB,GAErB3U,EAAS,IACJA,EACHyiC,cAAepiC,MAAMwe,KAAK6jB,IAG5B,MAAMvgC,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAI4B,EAAS4S,iBAAiBC,UAAW,CACvC,MAAM,OAAEC,EAAQhU,QAAS2hC,GAAoBzgC,EAAS4S,gBAAgBC,UAEtEhU,EAAQiU,GAAQ2tB,EAClB,CAEA5iC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,qBAAiBlU,GAChBN,IAEHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,KAAE8Q,GAAS9Q,GAAW,CAAC,QACvBs8B,GAAev9B,EAAQ+R,EAAK,KAGpChR,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,EAASC,KAC1D,MAAM,MAAE0T,EAAK,eAAE2oB,EAAc,UAAED,GAAcp8B,EAEvCm8B,GAAMvZ,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GAE1ByoB,SAECD,GAAgBn9B,EAAQo9B,EAAKC,EAAWC,EAAe,KA6B/Dv8B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OACJR,EAAM,IAAE28B,EAAG,IAAE9oB,EAAG,WAAE4tB,EAAU,SAAExhC,EAAQ,MACtCH,GAAQC,EAAAA,EAAAA,OACNS,EACEohC,GAAiBjF,EACvB,IAAKiF,IAAkBriC,EAAOw9B,WAAWC,KAAKL,EAAIx7B,IAChD,OAAOW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6iC,0BAA2B,CACzBzF,MACApoB,UAAW,CACTC,OAAQ,gBACRhU,aAGHV,GAEL,MAAM0/B,GAAQC,EAAAA,GAAAA,MACdl/B,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,WAAUH,UACzCS,EAAQq/B,eAAe,CACrB/rB,MACAgsB,OAAQ7/B,EACRkU,MAAO0tB,EAAgB5hC,EAAS28B,EAAIx7B,GACpCq+B,QACAG,WAAY,GACZiC,gBACAH,aACA3hC,SAGc,KAGlBQ,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,eAAEq8B,EAAc,MAAE/8B,GAAQC,EAAAA,EAAAA,OAAsBS,GAChD,0BAAE4hC,IAA8BvhC,EAAAA,EAAAA,IAAetB,EAAQO,IAEvD,IAAE68B,EAAG,UAAEpoB,GAAc6tB,EAE3B7iC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6iC,+BAA2BhiC,GAC1BN,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM8iC,GAAUjf,EAAAA,EAAAA,IAAW7jB,EAAQo9B,EAAIx7B,IACvC,GAAKkhC,UAEC3F,GAAgBn9B,EAAQ8iC,GAAS,EAAMxF,GACzCtoB,GAAW,CACb,MAAM,OAAEC,EAAQhU,QAAS8hC,GAAkB/tB,EAE3ChU,EAAQiU,GAAQ8tB,EAClB,MAGFhiC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6iC,+BAA2BhiC,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,IACJm8B,EAAG,OAAE53B,EAAM,WAAE08B,EAAU,MAAE3hC,GAAQC,EAAAA,EAAAA,OAC/BS,EACEi1B,GAAgBv1B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAQE,OAEzDuiC,EAAmB5F,EAAI6F,UAAUz9B,QAAQ1D,GACpC,SAATA,GAAmB0D,EAAOiF,SAAS3I,KAGhCkhC,EAAiB7iC,QAUtBH,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkjC,yBAA0B,CACxB9F,MACA53B,OAAQw9B,EACRd,eAED3hC,IACHqD,EAAAA,EAAAA,IAAU5D,IAhBRgB,EAAQmiC,cAAc,CACpB1iC,OAAQy1B,GAAiBkH,EAAIx7B,GAC7Bw7B,MACA8E,aACA3hC,SAYa,KAGnBQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkjC,8BAA0BriC,GACzBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,OACJR,EAAM,SAAE+/B,EAAQ,UAAEt5B,EAAS,IAAEoN,EAAG,MAAE/T,GAAQC,EAAAA,EAAAA,OACxCS,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD7Z,OACAy9B,WACAt5B,cAGGnB,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B29B,QAAS,CACPrpB,MACAmrB,OAAQ,CACNe,WACAt5B,YACAzG,OAAQsC,EAAKnB,MAGhBrB,IACHqD,EAAAA,EAAAA,IAAU5D,GACV09B,GAAoB19B,EAAQgB,EAASsT,EAAKvO,EAAQxF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,eAAEq8B,EAAc,MAAE/8B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASw7B,SAAS8B,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAEnrB,GACNnS,EAASw7B,SACP,OAAEl9B,EAAM,UAAEyG,EAAS,SAAEs5B,GAAaf,EAElC18B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C7Z,OACAmE,YACAs5B,WACAlD,mBAEGv3B,GAEL23B,GADA19B,GAASuJ,EAAAA,EAAAA,MACmBvI,EAASsT,EAAKvO,EAAQxF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,sBAAsB+Y,MAAO9Z,EAAQgB,EAASC,KAC7D,MAAM,IAAEqT,EAAG,MAAE/T,GAAQC,EAAAA,EAAAA,OAAsBS,EAErC8E,QAAe6W,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEtI,QAChDvO,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B29B,QAAS,CACPrpB,QAED/T,IACHqD,EAAAA,EAAAA,IAAU5D,GACV09B,GAAoB19B,EAAQgB,EAASsT,EAAKvO,EAAQxF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB+Y,MAAO9Z,EAAQgB,EAASC,KAC5D,MAAM,eAAEq8B,EAAc,MAAE/8B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASw7B,SAASrpB,IAAK,OAC5B,MAAM,IAAEA,GAAQnS,EAASw7B,QAEnB53B,QAAe6W,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEtI,MAAKgpB,mBACpDv3B,GAEL23B,GADA19B,GAASuJ,EAAAA,EAAAA,MACmBvI,EAASsT,EAAKvO,EAAQxF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B29B,aAAS98B,GACRN,EAAM,I,UEzzBXQ,EAAAA,EAAAA,IAAiB,oBAAoB+Y,UACnC,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,mBACxB7W,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASojC,EAAAA,EAAAA,IAAgBpjC,EAAQ,CAAEqjC,YAAat9B,EAAOs9B,cACvDrjC,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEujC,KAAMx9B,EAAOw9B,QACpD3/B,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MAAM,gBAAEuiC,EAAe,UAAEC,GAAcxiC,EAEvCjB,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,EAAM1C,WAAOzW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM0jC,QAAkB9mB,EAAAA,EAAAA,IAAQ,gBAAiB4mB,GAEjDxjC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,KAClDpW,EAAAA,EAAAA,IAAU5D,GAEN0jC,GACFD,GACF,KAGF1iC,EAAAA,EAAAA,IAAiB,iBAAiB+Y,MAAO9Z,EAAQgB,EAASC,KACxD,MAAM,gBAAEuiC,EAAe,UAAEC,GAAcxiC,EAEvCjB,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,EAAM1C,WAAOzW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM0jC,QAAkB9mB,EAAAA,EAAAA,IAAQ,gBAAiB4mB,GAEjDxjC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,KAClDpW,EAAAA,EAAAA,IAAU5D,GAEN0jC,GACFD,GACF,KAGF1iC,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,gBACJuiC,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtCxiC,EAEJjB,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,EAAM1C,WAAOzW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM0jC,QAAkB9mB,EAAAA,EAAAA,IAAQ,iBAAkB4mB,EAAiBG,EAAUJ,EAAMK,GAEnF5jC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,KAClDpW,EAAAA,EAAAA,IAAU5D,GAEN0jC,GACFD,GACF,KAGF1iC,EAAAA,EAAAA,IAAiB,uBAAuB+Y,MAAO9Z,EAAQgB,EAASC,KAC9D,MAAM,gBACJuiC,EAAe,MAAEI,EAAK,UAAEH,GACtBxiC,EAEJjB,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,EAAM1C,WAAOzW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM0jC,QAAkB9mB,EAAAA,EAAAA,IAAQ,sBAAuB4mB,EAAiBI,GAExE5jC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEga,WAAW,EAAO6pB,4BAAwBhjC,KACjF+C,EAAAA,EAAAA,IAAU5D,GAEN0jC,GACFD,GACF,KAGF1iC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,KAAE6iC,GAAS7iC,GAEZ2b,EAAAA,EAAAA,IAAQ,2BAA4BknB,EAAK,KAGhD/iC,EAAAA,EAAAA,IAAiB,mBAAoBf,IAC5BsjC,EAAAA,EAAAA,IAAoBtjC,EAAQ,CAAEsX,WAAOzW,OD7D9CE,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,YAAEi+B,EAAW,SAAE6E,EAAQ,MAAExjC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD09B,GAAeqF,EAAAA,EAAAA,IAA0BhkC,EAAQO,GACvD,GAAKo+B,EAIL,GAAI,SAAUA,EACPM,GAAsBj/B,EAAQ2+B,EAAcO,EAAa6E,EAAUxjC,OACnE,CACL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ2+B,EAAal+B,QAC7C,IAAKsC,EACH,OAGGk8B,GAAsBj/B,EAAQ,CACjC+C,OACAmE,UAAWy3B,EAAaz3B,WACvBg4B,EAAa6E,EAAUxjC,EAC5B,MAGFQ,EAAAA,EAAAA,IAAiB,eAAe+Y,MAAO9Z,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAI49B,EACJ,GAAI,SAAU59B,EACZ49B,QAAgBH,GAAe1+B,EAAQ,CAAEwiC,KAAMvhC,EAAQuhC,MAAQjiC,OAC1D,CACL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQiB,EAAQR,QACxC,IAAKsC,EACH,OAGF87B,QAAgBH,GAAe1+B,EAAQ,CACrC+C,OACAmE,UAAWjG,EAAQiG,WAClB3G,EACL,CAEKs+B,IAIL7+B,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASikC,EAAAA,EAAAA,IAAejkC,EAAQ6+B,EAASt+B,GACzCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCylB,aAAc19B,EACdijC,oBAAoB,EACpBjrB,OAAQ,YACRkrB,gBAAkBljC,EAAgBkjC,kBAEnC5jC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAuBnBe,EAAAA,EAAAA,IAAiB,cAAc+Y,MAAO9Z,EAAQgB,EAASC,KACrD,MAAM,iBACJ0+B,EAAgB,OAAEl/B,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAC3CS,EACE8B,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1C,IAAKyG,IAAcy4B,IAAqB58B,EACtC,OAGF,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,aAAc7Z,EAAM48B,GACjD,IAAK55B,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM9D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnDlH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAC7D7c,GAASokC,EAAAA,EAAAA,IAAWpkC,EAAQ+F,EAAOs+B,QAAS5+B,EAASlF,IACrDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjC5B,WAAOzW,IAERN,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCmrB,aAASxjC,IAEVN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,YAAEqjC,EAAW,MAAE/jC,GAAQC,EAAAA,EAAAA,OAAsBS,GAE7C,eAAEsjC,IAAmBjjC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,SACnD,KAAEnF,GAASuwB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,IAA6BzkC,EAAQO,GAC5D,IAAKikC,EACH,QA0EN1qB,eACE9Z,EACA+T,EACAywB,GAEA,QAAAloB,EAAApc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAic,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA5O,EAAA4O,EAAA,GAAAtc,UAAAsc,GAAA,IADIjc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAE9B,MAAM1M,EErPD,SAA0B6S,GAC/B,MAAM7S,EAAQ4G,OAAOC,KAAKgM,GAAMxO,KAAKm/B,GAAO,GAAEA,KAAK3wB,EAAK2wB,OAAMh+B,KAAK,KACnE,OAAOxF,EAAMf,OAAS,EAAK,IAAGe,IAAU,EAC1C,CFkPgByjC,CAAiB,CAC7B,eAAgB5wB,EAAK6wB,WACrB,kBAAmB7wB,EAAK8wB,YACxB,iBAAkB9wB,EAAK+wB,WACvB,YAAa/wB,EAAKgxB,IAClB,oBAAqBhxB,EAAKixB,IAC1B,wBAAyBjxB,EAAKkxB,UAG1BluB,QAAiBF,MAAO,mCAAkC3V,IAAS,CACvEgkC,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASZ,OAGvBz+B,QAAegR,EAASsuB,OAC9B,GAAIt/B,EAAOuR,MAAO,CAChB,MAAMA,GAAQguB,EAAAA,EAAAA,IAAev/B,EAAOuR,OAYpC,OAXAtX,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCD,OAAQ,SACR3B,MAAO,IACFA,KAGN/W,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CACAA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASulC,EAAAA,EAAAA,IAAkBvlC,EAAQ,CACjC8B,KAAMiE,EAAOjE,KACbF,GAAImE,EAAOnE,IACVrB,GACHP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,SAAsBz+B,IACtDqD,EAAAA,EAAAA,IAAU5D,EACZ,CAtHSwlC,CAAsBxlC,EAAQ+T,EAAMywB,EAAgBjkC,EAC3D,MAAO,GAAuB,gBAAnBgkC,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,IAA0B1lC,EAAQO,GACtD,IAAKklC,EACH,QAoHN3rB,eACE9Z,EACA+T,EACA0xB,GAEA,QAAAtmB,EAAAjf,UAAAC,OAAAoc,EAAA,IAAAlc,MAAA8e,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA9C,EAAA8C,EAAA,GAAAnf,UAAAmf,GAAA,IADI9e,GAAQC,EAAAA,EAAAA,OAAkB+b,EAE9B,MAAM2C,EAAS,CACbymB,KAAM,CACJC,OAAQ7xB,EAAK6wB,WAAWt0B,QAAQ,OAAQ,IACxCu1B,iBAAkB9xB,EAAK8wB,YACvBiB,gBAAiB/xB,EAAK+wB,WACtBiB,cAAehyB,EAAKgxB,IAAIz0B,QAAQ,OAAQ,MAGtCgE,EAAM0xB,EAAAA,IACR,+DACA,oDAEEjvB,QAAiBF,MAAMvC,EAAK,CAChC4wB,OAAQ,OACRC,QAAS,CACPc,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBR,GAEpBS,KAAM/rB,KAAKC,UAAU8E,KAEjBnZ,QAAegR,EAASsuB,OAE9B,GAAsB,OAAlBt/B,EAAOkT,OAAiB,CAE1B,MAAM3B,EAAQ,CAAE0N,YAAa,iBAY7B,OAXAhlB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCD,OAAQ,SACR3B,MAAO,IACFA,KAGN/W,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CAEAA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASmmC,EAAAA,EAAAA,IAAuBnmC,EAAQ,CACtC8B,KAAM,OACNskC,MAAOrgC,EAAOgO,KAAKqyB,OAClB7lC,GACHP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,SAAsBz+B,IACtDqD,EAAAA,EAAAA,IAAU5D,EACZ,CAvKSqmC,CAA2BrmC,EAAQ+T,EAAM0xB,EAAallC,EAC7D,MAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB+Y,MAAO9Z,EAAQgB,EAASC,KAC1D,MAAM,iBACJqlC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/DlmC,GAAQC,EAAAA,EAAAA,OACNS,EACE09B,GAAeqF,EAAAA,EAAAA,IAA0BhkC,EAAQO,GACjDmmC,GAASC,EAAAA,EAAAA,IAAoB3mC,EAAQO,GACrCqmC,GAAgBC,EAAAA,EAAAA,IAAuB7mC,EAAQO,IAC/C,eAAEgkC,EAAc,kBAAEuC,IAAsBxlC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACtEsrB,EAAoC,WAAnBD,GACnBE,EAAAA,EAAAA,IAA6BzkC,EAAQO,IAASmlC,EAAAA,EAAAA,IAA0B1lC,EAAQO,GAEpF,KAAKo+B,GAAiB6F,GAAmBkC,GAAWnC,GAClD,OAGF,IAAIwC,EACJ,GAAI,SAAUpI,EACZoI,EAAsB,CACpBvE,KAAM7D,EAAa6D,UAEhB,CACL,MAAMz/B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ2+B,EAAal+B,QAC7C,IAAKsC,EACH,OAGFgkC,EAAsB,CACpBhkC,OACAmE,UAAWy3B,EAAaz3B,UAE5B,CAEAlH,GAASgnC,EAAAA,EAAAA,IAAchnC,EAAQ,CAAEiZ,OAAQ,WAAa1Y,IACtDqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAMskC,EAAc,CAClB2C,KAAMV,EACNxyB,KAAyB,WAAnBwwB,GACF2C,EAAAA,EAAAA,IAAwBlnC,EAAQO,IAAS4mC,EAAAA,EAAAA,IAA6BnnC,EAAQO,UAE/Dqc,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C+hB,aAAcoI,EACdL,SACApC,cACA8C,gBAAiBR,EACjBN,mBACAE,oBACAM,kBAAmBA,GAAmBO,MACtCZ,gBAOFzmC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgnC,EAAAA,EAAAA,IAAchnC,EAAQ,CAAEiZ,OAAQ,QAAU1Y,GACnDP,GAASoZ,EAAAA,EAAAA,IAAapZ,EAAQO,IAC9BqD,EAAAA,EAAAA,IAAU5D,GAAO,KA0GnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,KAAEqmC,EAAI,MAAE/mC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C,OAAO89B,EAAAA,EAAAA,IAAe/+B,EAAQsnC,QAAAA,EAAQtI,EAAAA,GAAAA,SAAsBz+B,EAAM,KAGpEQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,SAAEsmC,EAAQ,MAAEhnC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAEtDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASC,aACd,OAAOG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoC,aAAc,IACTD,EAASC,gBACRmlC,GAAY,CAAEjlC,QAAQ,GAC1ByM,WAAYw4B,IAEbhnC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB+Y,MAAO9Z,EAAQgB,EAASC,KAC3D,MAAM,eACJumC,EAAc,WAAEC,EAAU,UAAE/D,EAAS,OAAEgE,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrErnC,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhBD,EAAQ6mC,sBAER,MAAM9hC,QAAe6W,EAAAA,EAAAA,IAAQ,qBACxB7W,IAEL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAE7D7c,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,CACZC,MAAO0D,EAAO1D,MACdmlC,iBACAllC,QAAQ,EACRmlC,aACAG,WACAF,SACAC,eACAjE,cAEDnjC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,UAAE6mC,EAAS,MAAEvnC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD8E,QAAe6W,EAAAA,EAAAA,IAAQ,qBAC7B,IAAK7W,EAAQ,OAEb/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,OAG7D,MAAMkrB,EAAQhiC,EAAO1D,MAAM2jB,QAAQra,MAAMua,GAA6B,IAAlBA,EAAO8hB,SAE3DhoC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BioC,iBAAkB,CAChB3lC,QAAQ,EACRwlC,YACAI,gBAAiBH,EAAMI,SACvBC,cAAeL,EAAMM,SAEtB9nC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BioC,iBAAkB,CAAE3lC,QAAQ,IAC3B/B,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2B+Y,MAAO9Z,EAAQgB,EAASC,KAClE,MAAM,SAAE0iC,EAAQ,MAAEpjC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC1C8E,QAAe6W,EAAAA,EAAAA,IAAQ,gCAAiC+mB,GAE9D3jC,GAASuJ,EAAAA,EAAAA,MAKPvJ,EAHG+F,EAEM,UAAWA,GACXihC,EAAAA,EAAAA,IAAchnC,EAAQ,CAAEsX,MAAO,CAAE7R,QAASM,EAAOuR,MAAOgxB,MAAO,aAAgB/nC,IAE/EymC,EAAAA,EAAAA,IAAchnC,EAAQ,CAAE8mC,kBAAmB/gC,EAAQuhC,KAAMtI,EAAAA,GAAAA,UAAwBz+B,IAJjFymC,EAAAA,EAAAA,IAAchnC,EAAQ,CAAEsX,MAAO,CAAE7R,QAAS,gBAAiB6iC,MAAO,aAAgB/nC,IAO7FqD,EAAAA,EAAAA,IAAU5D,EAAO,I,4BG3anB,MAAMuoC,GAAoB,GAAKC,GAAAA,GACzBC,GAA0B,KAAOD,GAAAA,GAC1BE,GAAwB,KAAOF,GAAAA,GAC/BG,GAAwB,GAAKH,GAAAA,GACpCI,GAAqB,OAASJ,GAAAA,G,uCCsB7B,SAASK,GAA6B7oC,EAAqB8oC,GAEhE,OAAOA,IADUxnC,EAAAA,EAAAA,IAAetB,GACVqR,qBAAsBlI,EAAAA,EAAAA,MACxCnJ,EAAO+Q,mBArBeg4B,EAqBuBC,GAAAA,EAAAA,MAAiB3zB,OApBhD4zB,EAAAA,IACTv7B,KAAKw7B,IACVx7B,KAAKC,IAAkB,IAAdo7B,EAAoBJ,IACf,IAAdI,GAIAA,EAAcI,EAAAA,IACTz7B,KAAKw7B,IACVx7B,KAAKC,IAAkB,IAAdo7B,EAAoBJ,IACf,GAAdI,GAIGL,IAOH,GAtBN,IAA4BK,CAuB5B,CAwDO,SAASK,GACdppC,EAAWS,EAAgB+pB,GAE3B,OAAOxG,EAAAA,GAAAA,IAAWhkB,EAAQS,EAAQ+pB,OAAQ3pB,GAAW,EACvD,CC1EA,IAAIwoC,GAAqB,GAEzBtoC,EAAAA,EAAAA,IAAiB,0BAA0B+Y,UACzC,MAAM/T,QAAe6W,EAAAA,EAAAA,IAAQ,yBACxB7W,IAKLA,EAAO2F,SAAS49B,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgB3nC,KAAM6nC,EAAAA,GAAAA,SAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAW9nC,KAAM6nC,EAAAA,GAAAA,QACjE,IAGFzpC,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH2pC,mBAAoB5jC,IAEtBnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MACJqF,EAAK,EAAEwiC,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAEvpC,GAAQC,EAAAA,EAAAA,OAC1CS,EAEE8oC,EAAyB,CAC7BnoC,GAAIynC,KACJW,eAAgB1jC,EAChBwiC,EAAGD,GAA6B7oC,EAAQ8oC,GApCV,GAoCep7B,KAAKya,SAClB8hB,GAChCL,EAAGA,EAtC2B,GAsCvBl8B,KAAKya,SAAuC8hB,GACnDJ,YACAC,cAGF,OAAOvnC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkqC,wBAAyB,KAAK5oC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2pC,yBAA2B,GAAKH,IAC3FxpC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJiG,EAAS,OAAEzG,EAAM,MAAE6F,EAAK,aAAE6jC,GACxBlpC,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,GAASuD,GAAS7F,IAAWT,EAAOmY,gBAIpCyE,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC7Z,OACAmE,YACAkjC,SAAU9jC,EACV+jC,WAAYF,GACZ,KAGJppC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OACzBS,EACEqpC,GAAWC,EAAAA,EAAAA,IAAsBvqC,EAAQS,GACzCgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAE7CojC,GAAa7kC,KAAW+kC,EAAAA,EAAAA,IAAe/kC,IAE5CzE,EAAQypC,eAAe,CACrBhqC,SACAyG,YACAojC,WACA/pC,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,OAAER,EAAM,SAAE6pC,EAAQ,MAAE/pC,GAAQC,EAAAA,EAAAA,OAAsBS,EACxD,IAAI,UAAEiG,GAAcjG,EAEpB,MAAM8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAIgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAEhD,IAAKnE,IAAS0C,EACZ,OAGF,MAAMilC,EAAoBljC,QAAQ/B,EAAQoE,aAAepE,EAAQklC,UAC3DC,EAA8BF,GAChCz/B,EAAAA,EAAAA,IAA0BjL,EAAQS,EAAQgF,EAAQoE,WAAa,QAC/DhJ,EACJ4E,EAAUilC,IACNh2B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmqC,IAClCnlC,EACJyB,EAAYzB,GAAS7D,IAAMsF,EAE3B,MAAM2jC,GAAgBC,EAAAA,EAAAA,IAAiBrlC,GACjCslC,EAAcF,EAAcG,MAAMC,IAAiBC,EAAAA,EAAAA,IAAeD,EAAcX,KAEhFa,EAAmBJ,EACrBF,EAAcrlC,QAAQylC,KAAkBC,EAAAA,EAAAA,IAAeD,EAAcX,KAAa,IAAIO,EAAeP,GAEnGv0B,GAAQq1B,EAAAA,EAAAA,IAAuBprC,GAE/BqrC,EAAYF,EAAiBr+B,OAAOiJ,IAErC6G,EAAAA,EAAAA,IAAQ,eAAgB,CAAE7Z,OAAMmE,YAAWmkC,cAEhD,MAAM,eAAE91B,GAAmBvV,EAAOwV,SAASC,MAErCtT,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAIgV,IAAmB+1B,EAAAA,IAAqB,CAC1C,MAAMC,EAAqBR,GAAcrpB,EAAAA,EAAAA,IAAKvf,EAASM,gBAAiB,CAACyE,IAAc,IAClF/E,EAASM,gBACZ,CAACyE,GAAY,IACP/E,EAASM,gBAAgByE,IAAc,GAC3C,CACEA,YACAojC,cAINtqC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiB8oC,GAChBhrC,EACL,CAEA,ODrHK,SACLP,EAAWyF,EAAqBolC,GAEhC,MAAMW,EAAmB/lC,EAAQ4lC,WAAa,CAAE77B,QAAS,IAGnDA,EAAUg8B,EAAiBh8B,QAAQjK,KAAKqpB,IAC5C6c,EAAAA,EAAAA,IAAiB7c,GAAW,IACvBA,EACH8c,iBAAa7qC,EACb2kB,MAAOoJ,EAAQpJ,MAAQ,GACrBoJ,IACHppB,QAAOpF,IAAA,IAAC,MAAEolB,GAAOplB,EAAA,OAAKolB,EAAQ,CAAC,IAElCqlB,EAAcn/B,SAAQ,CAAC4+B,EAAU7rB,KAC/B,MAAMktB,EAAgBn8B,EAAQuD,WAAW64B,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,KACtEqB,GAAiB,EACnBn8B,EAAQm8B,GAAiB,IACpBn8B,EAAQm8B,GACXD,YAAajtB,EACb+G,MAAOhW,EAAQm8B,GAAenmB,MAAQ,GAGxChW,EAAQpJ,KAAK,CACXkkC,WACAoB,YAAajtB,EACb+G,MAAO,GAEX,IAGF,IAAI,gBAAEqmB,EAAkB,IAAOL,EAc/B,OAZIK,EAAgB1rC,SAClB0rC,EAAkBA,EAAgBrmC,QAAOoI,IAAA,IAAC,OAAEgC,GAAQhC,EAAA,OAAKgC,IAAW5P,EAAOmY,aAAa,KAG1F0yB,EAAcn/B,SAAS4+B,IACrB,MAAM,cAAEnyB,GAAkBnY,EAC1B6rC,EAAgB38B,QAAQ,CACtBU,OAAQuI,EACRmyB,YACA,KAGGlpB,EAAAA,GAAAA,IAAkBphB,EAAQyF,EAAQhF,OAAQgF,EAAQ7D,GAAI,CAC3DypC,UAAW,IACNG,EACHh8B,UACAq8B,oBAGN,CCiESC,CAAmB9rC,EAAQyF,EAAS4lC,EAAU,KAGvDtqC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,UAAEiG,EAAS,SAAEojC,EAAQ,MAAE/pC,GAAQC,EAAAA,EAAAA,OAAsBS,EAErDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASM,gBAAgByE,IAAY8jC,MAAMe,IAAWb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,KACzF,OAAOtqC,EAGT,MAAMgsC,EAA4B7pC,EAASM,gBAAgByE,GACxD1B,QAAQumC,KAAYb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,KAEjDiB,EAAqBS,EAA0B7rC,OAAS,IACzDgC,EAASM,gBACZ,CAACyE,GAAY8kC,IACXtqB,EAAAA,EAAAA,IAAKvf,EAASM,gBAAiB,CAACyE,IAEpC,OAAO3E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiB8oC,GAChBhrC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB+Y,MAAO9Z,EAAQgB,EAASC,KAC7D,MAAM,SAAEqpC,GAAarpC,QAEA2b,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE0tB,gBAKrDtqC,GAASuJ,EAAAA,EAAAA,OAEGkmB,QAKZzvB,EAAS,IACJA,EACHyvB,OAAQ,IACHzvB,EAAOyvB,OACVwc,gBAAiB3B,KAGrB1mC,EAAAA,EAAAA,IAAU5D,IAXRgB,EAAQkrC,aAWO,KAGnBnrC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkqC,yBAAyB5oC,EAAAA,EAAAA,IAAetB,EAAQO,GAC7C2pC,yBAAyB1kC,QAAQumC,GAAWA,EAAOnqC,KAAOA,KAC5DrB,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB+Y,MAAO9Z,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,UAAEyG,EAAS,SAAEojC,GAAarpC,EAClC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKnE,IAAS0C,EACZ,OAGF,MAAM8J,EAAS9J,EAAQ0mC,UAAU9lB,WAC3BtgB,QAAe6W,EAAAA,EAAAA,IAAQ,4BAA6B,CACxD0tB,WACAvnC,OACAmE,YACAqI,WAGGxJ,IAIL/F,GAASuJ,EAAAA,EAAAA,MAELxD,EAAO8W,OAAO1c,SAChBH,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBvX,EAAO8W,MAAO,QAG/D7c,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQyG,EAAW,CACpDilC,SAAUpmC,KAEZnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,IAAEgJ,EAAG,OAAExJ,GAAWQ,EAElB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,IAIL6Z,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3S,MAAKlH,QAAO,KAGjDhC,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,SAAE2pC,EAAQ,EAAEtB,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAEloC,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OACzDS,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1B0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAKwC,GAASZ,EAAS+nC,yBAAyBc,MAAMoB,GAAgBA,EAAYxqC,KAAOA,KACpFnB,IAAWT,EAAOmY,cAMvB,OAFAyE,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE7Z,OAAMqnC,cAEzC7nC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkqC,wBAAyB/nC,EAAS+nC,wBAAwB3kC,KAAKwkC,GACzDA,EAAuBnoC,KAAOA,EACzB,IACFmoC,EACHjB,EAAGD,GAA6B7oC,EAAQ8oC,GACxCc,IACAC,YACAC,cAGGC,KAERxpC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB+Y,MAAO9Z,EAAQgB,EAASC,KAC/D,MAAM,OAAER,EAAM,SAAE0b,GAAalb,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAe6W,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE7Z,OAAMoZ,WAAUM,UAAWN,GAAY,OAAItb,IAGlG,IAAKkF,IAAWA,EAAOT,SAASnF,OAO9B,OALAH,EAASopC,GADTppC,GAASuJ,EAAAA,EAAAA,MAC8B9I,EAAQ,CAC7C4rC,qBAAsB,SAGxBzoC,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,SAAEsF,EAAQ,MAAEwJ,EAAK,MAAE+N,GAAU9W,EAE7BsX,GAAOC,EAAAA,EAAAA,IAAqBhY,EAAU,MACtC2E,EAAMnC,OAAOC,KAAKsV,GAAM9X,IAAI2C,QAElClI,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASud,EAAAA,EAAAA,IAAoBvd,EAAQ+C,EAAKnB,GAAIyb,GAC9Crd,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD7c,EAASopC,GADTppC,GAAS2d,EAAAA,EAAAA,IAAS3d,GAAQsd,EAAAA,EAAAA,IAAqBxO,EAAO,OACfrO,EAAQ,CAC7C6rC,gBAAiB,IAAKvpC,EAAKupC,iBAAmB,MAAQriC,MAGxDrG,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,WAAE8D,EAAU,MAAExE,GAAQC,EAAAA,EAAAA,OAAsBS,GAE5C,eAAEsU,GAAmBvV,EAAOwV,SAASC,MAErC1S,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAAL,CAEA,GAAIA,EAAKspC,qBAAsB,CAC7B,MAAMA,EAAuBtpC,EAAKspC,qBAAuBtnC,EAAW5E,OAC9DmsC,GAAmBvpC,EAAKupC,iBAAmB,IAAI9mC,QAAQ5D,IAAQmD,EAAW0F,SAAS7I,KAEzF5B,EAASopC,GAAsBppC,EAAQ+C,EAAKnB,GAAI,CAC9C0qC,qBAGF1oC,EAAAA,EAAAA,IAAU5D,IAELssC,EAAgBnsC,QAAUksC,GAC7BrrC,EAAQurC,qBAAqB,CAAE9rC,OAAQsC,EAAKnB,GAAIua,SAAUzO,KAAKw7B,OAAOnkC,IAE1E,CAIA,GAFA/D,EAAQsnB,iBAAiB,CAAEvjB,aAAYxE,UAEnCgV,IAAmB+1B,EAAAA,IAIvB,OAFAtrC,GAASuJ,EAAAA,EAAAA,OAEFhH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiB,KACZnB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOkC,mBAC9BqF,OAAO0kC,YAAYznC,EAAWQ,KAAK2B,IACpC,MAAMzB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GAEnD,IAAKzB,EAAS,OAEd,MAAMgnC,EAAShnC,EAAQ4lC,WAAWQ,iBAAiBrmC,QAAOpF,IAAA,IAAC,SAAE6N,GAAU7N,EAAA,OAAK6N,CAAQ,IAEpF,IAAKw+B,EAAQ,OAEb,MAAMpB,EAAYoB,EAAOlnC,KAAKsM,GAAWA,EAAOy4B,WAEhD,MAAO,CAACpjC,EAAWmkC,EAAU9lC,KAAKqmC,IAAC,CACjC1kC,YACAojC,SAAUsB,MACR,IACHpmC,OAAOgC,YAEXjH,EA3CwB,CA2ClB,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAElCwC,GAAMupC,iBAEXtrC,EAAQwH,aAAa,CAAE/H,OAAQsC,EAAKnB,GAAIsF,UAAWnE,EAAKupC,gBAAgB,GAAI/rC,SAAQ,KAGtFQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAIL,OAFA6Z,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE7Z,SAEvBqmC,GAAsBppC,EAAQ+C,EAAKnB,GAAI,CAC5CyqC,0BAAsBxrC,EACtByrC,qBAAiBzrC,GACjB,KCjYJE,EAAAA,EAAAA,IAAiB,kBAAkB+Y,MAAO9Z,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,QAAEisC,EAAO,MAAEnsC,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAMglB,SACT,OAGF,MAAMhiB,QAAe6W,EAAAA,EAAAA,IAAQ8vB,EAAU,uBAAyB,yBAA0B,CAAE3pC,SAC5F,IAAKgD,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,MAAEojC,EAAK,MAAE9vB,GAAU9W,EAIzB,GAFA/F,GAAS0d,EAAAA,EAAAA,IAAS1d,GAAQsd,EAAAA,EAAAA,IAAqBT,EAAO,OAElD,sBAAuB8vB,GAASA,EAAMC,kBAAkBzsC,OAAQ,CAClE,MAAMmF,GAAWD,EAAAA,EAAAA,IAAmBrF,EAAQS,GAE5CksC,EAAMC,kBAAoBD,EAAMC,kBAAkBrnC,KAAKE,IAAO,IAAWA,KAAYH,EAASG,EAAQonC,UACxG,CAEA7sC,GAAS8sC,EAAAA,EAAAA,IAAiB9sC,EAAQS,EAAQksC,EAAOpsC,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB+Y,MAAO9Z,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EACnD8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAMglB,SACT,OAGF,IAAIhiB,QAAe6W,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE7Z,OAAMmE,cACxDnB,IACHA,EAAS,CAAC,GAGZ/F,GAASuJ,EAAAA,EAAAA,MAET,MAAM,MAAEkhB,EAAK,SAAEC,IAAarlB,EAAAA,EAAAA,IAAmBrF,EAAQS,GAAQyG,GAC/DnB,EAAO0kB,MAAQA,EACf1kB,EAAO2kB,SAAWA,EAElB,MAAMqiB,EAAOhqC,EAAKglB,SAAUilB,eACtBC,QAAuBrwB,EAAAA,EAAAA,IAAQ,6BAA8B,CAAE7Z,OAAMmE,YAAW6lC,SACtFhnC,EAAOknC,eAAiBA,GAAgB9sC,OACxC4F,EAAOmnC,mBAAqBD,EAE5BjtC,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASmtC,EAAAA,EAAAA,IAAwBntC,EAAQ+F,EAAQxF,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B+Y,MAAO9Z,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,MAAE2lC,EAAK,KAAEgH,EAAI,aAAEC,EAAY,MAAE9sC,GAAQC,EAAAA,EAAAA,OACzCS,EACE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAMglB,SACT,OAGF,MAAMglB,EAAOhqC,EAAKglB,SAAUilB,eACtBjnC,QAAe6W,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEwpB,QAAO2G,OAAMM,iBAEpEtnC,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASstC,EAAAA,EAAAA,IAAsBttC,EAAQS,EAAQ2sC,EAAMrnC,EAAQxF,IAC7DqD,EAAAA,EAAAA,IAAU5D,GAAO,I,0BCxDnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAQvnB,QAASsqC,EAAW,wBAAEC,IAA4BxqC,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO5oB,KAAO,CAAC,EAsC5F,OApCI4oB,EAAOznB,KAAKyqC,yBAA2BA,GACtChjB,EAAOznB,KAAKyqC,wBAA0BA,IACzChjB,EAAS,IACJA,EACHznB,MAAM2e,EAAAA,EAAAA,IAAK8I,EAAOznB,KAAM,CAAC,6BAI7B/C,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO5oB,GAAI4oB,EAAOznB,KAAMynB,EAAOijB,kBAC3D7pC,EAAAA,EAAAA,IAAU5D,GAELwqB,EAAOkjB,oBAAsBC,EAAAA,EAAAA,GAAmB3tC,EAAQwqB,EAAO5oB,KAElEZ,EAAQ4sC,eAGNpjB,EAAOznB,KAAKnB,KACdisC,EAAAA,GAAAA,IAA0B,CACxBptC,OAAQ+pB,EAAOznB,KAAKnB,GACpBgkB,uBAAwB4E,EAAOznB,KAAK6iB,8BAIxC9d,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAQK,OAAQy1B,IAAkBv1B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACxEutC,EAAatjB,EAEf0L,IAAkB4X,EAAWlsC,IAC5B,YAAaksC,EAAW/qC,MAAQwqC,IAAgBO,EAAW/qC,KAAKE,UAC/DsqC,GACFvsC,EAAQoC,gBAAgB,CAAE7C,UAE5BS,EAAQ6C,SAAS,CAAEjC,GAAIs0B,EAAe31B,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAMi1B,GAAWuY,EAAAA,EAAAA,IAAmB/tC,EAAQwqB,EAAO5oB,IACnD,IAAK4zB,EACH,OAGFx1B,GAASguC,EAAAA,EAAAA,IAAkBhuC,EAAQw1B,EAAU,CAAChL,EAAO5oB,KACrD5B,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO5oB,GAAI,CAAEqsC,aAAa,KACtDrqC,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO5oB,IAKvC,YAJImB,GACF/B,EAAQktC,kBAAkB,CAAEztC,OAAQsC,EAAKnB,KAI7C,CAEA,IAAK,kBACH,OAAOusC,EAAAA,EAAAA,IAAUnuC,EAAQwqB,EAAO5oB,IAGlC,IAAK,kBACH,OAAOoiB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO5oB,GAAI4oB,EAAOznB,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEnB,EAAE,SAAElB,EAAWmB,EAAAA,GAAc,aAAEusC,GAAiB5jB,EAaxD,OAZAxqB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ4B,EAAIlB,EAAU,eAAgB0tC,IAClExqC,EAAAA,EAAAA,IAAU5D,QAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACT,MAAM8kC,GAAsBC,EAAAA,EAAAA,IAAkBtuC,EAAQ4B,EAAIlB,EAAU,gBAChE0tC,GAAgBC,GAAuBD,EAAaxb,YAAcyb,EAAoBzb,YACxF5yB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ4B,EAAIlB,EAAU,oBAAgBG,IAClE+C,EAAAA,EAAAA,IAAU5D,GACZ,GAnF0B,IAuF9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEyF,GAAY+kB,EAEpB,GAAI/kB,EAAQoP,WAAa7U,EAAOmY,gBAAkB1S,EAAQ8oC,gBACxD,OAGF,MAAMxrC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO/pB,QACvC,IAAKsC,EACH,OAGF,MAAMyrC,EAAahnC,QAAQgjB,EAAO/kB,QAAQ7D,IAAM4oB,EAAO/kB,QAAQgpC,kBAoB/D,OAlBAzuC,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO/pB,OAAQ,CACzC6kB,YAAaviB,EAAKuiB,YAAcviB,EAAKuiB,YAAc,EAAI,KACnDkpB,GAAc,CAAEjmB,qBAAsBxlB,EAAKwlB,qBAAuB,GAAK,KAGzEimB,IACFxuC,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO/pB,OAAQ,CACzC4nB,eAAgB,IAAKtlB,EAAKslB,gBAAkB,GAAKmC,EAAO/kB,QAAQ7D,QAIpEgC,EAAAA,EAAAA,IAAU5D,QAEV0uC,EAAAA,GAAAA,IAAmB,CACjB3rC,OACA0C,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEwE,EAAG,cAAE0kC,GAAkBnkB,EAC/B,IAAuC,IAAnCmkB,EAAcF,iBAChB,OAsBF,OAnBAxkC,EAAIyB,SAAS9J,IACX,MAAMnB,EAAU,cAAe+pB,EAASA,EAAOokB,WAAYC,EAAAA,EAAAA,IAAsB7uC,EAAQ4B,GACnFmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,GAAMspC,uBACRrsC,EAASopC,GAAsBppC,EAAQS,EAAQ,CAC7C4rC,qBAAuBtpC,EAAKspC,qBAAuB,QAAMxrC,EACzDyrC,gBAAiBvpC,EAAKupC,iBAAiB9mC,QAAQiZ,GAAMA,IAAM7c,OAI3DmB,GAAMwlB,sBACRvoB,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC8nB,oBAAsBxlB,EAAKwlB,oBAAsB,QAAM1nB,EACvDwnB,eAAgBtlB,EAAKslB,gBAAgB7iB,QAAQiZ,GAAMA,IAAM7c,MAE7D,IAGK5B,CACT,CAEA,IAAK,qBAAsB,CACzB,MAAM,SAAE+nB,GAAayC,EACfmK,EAAa30B,EAAO8O,MAAMuO,KAAKmN,EAAO5oB,IAC5C,IAAK+yB,EACH,OAGF,OAAO3Q,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO5oB,GAAI,CACnCmmB,SAAU,IACL4M,EAAW5M,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,IAAE9d,EAAG,SAAEzF,GAAagmB,EACpBgL,EAAWhxB,IAAasqC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACF9uC,EACH8O,MAAO,IACF9O,EAAO8O,MACVigC,iBAAkB,IACb/uC,EAAO8O,MAAMigC,iBAChB,CAACvZ,GAAWvrB,EAAI9J,OAAS8J,OAAMpJ,IAIvC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEe,EAAE,SAAEotC,GAAaxkB,EACnBgL,GAAWuY,EAAAA,EAAAA,IAAmB/tC,EAAQ4B,GAC5C,IAAK4zB,EACH,OAGF,MAAQ,CAACA,GAAWuZ,GAAqB/uC,EAAO8O,MAAMigC,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoBxkC,SAAS7I,GAAK,CAK5C,GAAiB,WAAb4zB,GAAyByZ,EAAoB9uC,QAAU+uC,EAAAA,IAAyB,CAClF,MAAMC,EAAUnvC,EAAO8O,MAAMqgC,QAAQpD,OACrCkD,EAAsBA,EAAoBzpC,QAAQ4pC,GAAaD,GAAWA,EAAQ1kC,SAAS2kC,IAC7F,CAEAH,EAAsB,CAACrtC,KAAOqtC,EAChC,OAZEA,EAAsBA,EAAoBzpC,QAAQ4pC,GAAaA,IAAaxtC,IAc9E,MAAO,IACF5B,EACH8O,MAAO,IACF9O,EAAO8O,MACVigC,iBAAkB,IACb/uC,EAAO8O,MAAMigC,iBAChB,CAACvZ,GAAWyZ,EAAoB9uC,OAAS8uC,OAAsBpuC,IAIvE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEe,EAAE,SAAE4C,GAAagmB,EAEzB,OAAO6kB,EAAAA,EAAAA,IAAmBrvC,EAAQ4B,EAAI4C,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE5C,EAAE,OAAE0tC,GAAW9kB,GACfnN,KAAMkyB,EAAe,WAAEnrC,GAAepE,EAAOwvC,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAAC3tC,GAAK0tC,IAC5BI,EAAAA,EAAAA,IACAH,EACAznC,OAAOC,KAAKwnC,GAAiBhqC,IAAI2C,QAAQ1C,QAAQhB,GAAaA,IAAa5C,KAGzE+tC,EAAgBL,EAClBlrC,GAAcA,EAAWqG,SAAS7I,GAAMwC,EAAa,IAAKA,GAAc,GAAKxC,GAC7EwC,EAAaA,EAAWoB,QAAQoqC,GAAcA,IAAchuC,SAAMf,EAEtE,MAAO,IACFb,EACHwvC,YAAa,IACRxvC,EAAOwvC,YACVnyB,KAAMoyB,EACNrrC,WAAYurC,GAGlB,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEvrC,GAAeomB,EAEvB,MAAO,IACFxqB,EACHwvC,YAAa,IACRxvC,EAAOwvC,YACVprC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAEyrC,GAAYrlB,EAEpB,MAAO,IACFxqB,EACHwvC,YAAa,IACRxvC,EAAOwvC,YACVM,YAAaD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMlb,EAAa30B,EAAO8O,MAAMuO,KAAKmN,EAAO5oB,KACtC,gBAAEmuC,EAAe,YAAEC,EAAW,gBAAEC,GAAoBzlB,EAC1D,IAAKmK,EACH,OAGF,IAAIub,GAAe,EACfC,EAAUxb,EAAW5M,UAAUooB,QAC/B,IAAIxb,EAAW5M,SAASooB,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQhwC,QACLgwC,EAAQnF,MAAMlkB,GAAMA,EAAElX,SAAWogC,EAAYpgC,WAEjDugC,EAAQ/pC,KAAK4pC,GACbE,GAAe,QAEZ,GAAIC,EAAQhwC,QAAU8vC,EAAiB,CAC5C,MAAMG,EAAcD,EAAQp9B,WAAW+T,GAAMA,EAAElX,SAAWqgC,IACtDG,GAAe,IACjBD,EAAQrjC,MAAMsjC,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQ3qC,QAAOoI,IAAA,IAAC,QAAE0iC,EAAO,QAAEC,GAAS3iC,EAAA,OAAK0iC,GAAWC,CAAO,IAGhF,OAAOvsB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO5oB,GAAI,CACnC4uC,aAAcL,EAAQhwC,OACtB4nB,SAAU,IACL4M,EAAW5M,SACdooB,UACAM,kBAAkBnzB,EAAAA,EAAAA,IAAqB+yB,EAAc,YAG3D,CAEA,MACF,CAEA,IAAK,sBAAuB,CAC1B,MAAM,OAAE5vC,EAAM,IAAEwJ,GAAQugB,EAClBznB,EAAO/C,EAAO8O,MAAMuO,KAAK5c,GAE/B,OAAIsC,GAAMk3B,QACDjW,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAChCw5B,OAAQl3B,EAAKk3B,OAAOz0B,QAAQyyB,IAAWhuB,EAAIQ,SAASwtB,EAAMr2B,aAI9D,CACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJnB,EAAM,cAAEiwC,EAAa,KAAExjC,EAAI,aAAExF,EAAY,SAAEhH,GACzC8pB,EAEJ,IADaxqB,EAAO8O,MAAMuO,KAAK5c,GAE7B,OAMF,OAHAT,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,QAAS6uC,GACjF1wC,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,eAAgB6F,GACxF1H,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEwjB,UAAW/W,GAEnD,CAEA,IAAK,aAAc,CACjB,MAAM,KAAE6G,GAASyW,EAMjB,YAJA1iB,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ6Q,IAAmB,IAAhB3a,GAAIrB,GAAOgc,EAClDvb,EAAQ6oB,WAAW,CAAE9V,OAAMxT,SAAQ,GAIvC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEE,EAAM,gBAAEq0B,EAAe,mBAAED,GAAuBrK,EAClDznB,EAAO/C,EAAO8O,MAAMuO,KAAK5c,GAC/B,IAAKsC,EACH,OAaF,OAVA/C,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClCsnB,SAAU,IACLhlB,EAAKglB,SACR+M,kBACAD,yBAGJjxB,EAAAA,EAAAA,IAAU5D,QAEVgB,EAAQ2vC,qBAAqB,CAAElwC,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE8V,EAAO,SAAEy4B,GAAaxkB,EAGtC,IADaxqB,EAAO8O,MAAMuO,KAAK5c,GAE7B,OAQF,OALAT,GAAS8lB,EAAAA,EAAAA,IAAY9lB,EAAQS,EAAQ8V,EAAS,CAC5Cy4B,kBAEFprC,EAAAA,EAAAA,IAAU5D,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,MAAE2R,GAAUoY,EAG1B,IADaxqB,EAAO8O,MAAMuO,KAAK5c,GACpB,OAOX,OALAT,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClCmwC,sBAAuBx+B,SAEzBxO,EAAAA,EAAAA,IAAU5D,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAES,EAAM,QAAE8V,GAAYiU,EAEtBznB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAME,QAAS,OAIpB,YAFAjC,EAAQk2B,cAAc,CAAEz2B,SAAQ8V,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE9V,GAAW+pB,EAEbznB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAME,QAAS,OAIpB,YAFAjC,EAAQi2B,WAAW,CAAEx2B,SAAQqQ,OAAO,GAGtC,EAGc,I,gBC7YlB,MAAM+/B,GAAkB,IA0lBxB,SAASC,GACP9wC,EACAS,EACAmB,EACAypC,EACAtoC,EACAuK,EACA7H,GAEA,MAAM+lC,EAAmB/lC,GAAS4lC,UAGlC,GAAIG,IAAoBuF,EAAAA,GAAAA,GAAa1F,EAAWG,GAC9C,OAAOxrC,EAKT,GAFAA,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAI,CAAEypC,eAE5C/9B,EACH,OAAOtN,EAGT,MAAMgxC,EAA2BjuC,EAAKupC,iBAAiB7hC,SAAS7I,GAGhE,IAAIqvC,EAAAA,EAAAA,IAA0BjxC,EAAQqrC,KAAe2F,EAA0B,CAC7EhxC,EAASopC,GAAsBppC,EAAQS,EAAQ,CAC7C4rC,sBAAuBtpC,GAAMspC,sBAAwB,GAAK,EAC1DC,gBAAiB,IAAKvpC,GAAMupC,iBAAmB,GAAK1qC,KAGtD,MAAMsvC,GAAax8B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAErD,IAAKmB,IAASmuC,EAAY,OAAOlxC,GAEjC6gB,EAAAA,EAAAA,KAAU,MACR6tB,EAAAA,GAAAA,IAAmB,CACjB3rC,OACA0C,QAASyrC,EACTC,YAAY,GACZ,GAEN,MAAWH,IACThxC,EAASopC,GAAsBppC,EAAQS,EAAQ,CAC7C4rC,sBAAuBtpC,GAAMspC,sBAAwB,GAAK,EAC1DC,gBAAiBvpC,GAAMupC,iBAAiB9mC,QAAQiZ,GAAMA,IAAM7c,OAIhE,OAAO5B,CACT,CAEA,SAASoxC,GACPpxC,EAA6BS,EAAgBmB,EAAY+sC,GACzD,IAD6F0C,EAAWnxC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAExG,MAAMoxC,EAAiBD,GACnB/pB,EAAAA,EAAAA,IAAuBtnB,EAAQS,EAAQmB,IACvC8S,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAGtC,GAAI0vC,GAAkB3C,EAAcvhC,QAAS,CAC3C,MAAM,MACJ6qB,EAAK,MAAEsZ,EAAK,QAAE3/B,EAAO,SAAE1B,IACrBshC,EAAAA,EAAAA,IAAkBF,GAClBrZ,GAAS0W,EAAcvhC,QAAQ6qB,OACjC0W,EAAcvhC,QAAQ6qB,MAAMwZ,QAAUxZ,EAAMwZ,QAC5C9C,EAAcvhC,QAAQ6qB,MAAMyZ,UAAYzZ,EAAMyZ,WACrCH,GAAS5C,EAAcvhC,QAAQmkC,MACxC5C,EAAcvhC,QAAQmkC,MAAME,QAAUF,EAAME,QACnC7/B,GAAW+8B,EAAcvhC,QAAQwE,QAC1C+8B,EAAcvhC,QAAQwE,QAAQ+/B,oBAAsB//B,EAAQ+/B,oBACnDzhC,GAAYy+B,EAAcvhC,QAAQ8C,WAC3Cy+B,EAAcvhC,QAAQ8C,SAAS0hC,eAAiB1hC,EAAS0hC,eAE7D,CAEA,MAAMV,EAAaI,EAAiB,IAAKA,KAAmB3C,GAAkBA,EAE9E,OAAO0C,GACHQ,EAAAA,EAAAA,IAAuB7xC,EAAQS,EAAQmB,EAAIsvC,IAC3C9vB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAIsvC,EAC5C,CAEA,SAASY,GACP9xC,EAAWgB,EAAgCyE,EAAqB+b,GAEhE,MAAM,OAAE/gB,GAAWgF,GAEb,WAAE2C,IAAe2pC,EAAAA,EAAAA,IAAsB/xC,EAAQyF,IAAY,CAAC,EAElE,IAAK2C,GAAc3C,EAAQ6b,iBAAkB,CAC3C,MAAM0wB,GAAgBt9B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQgF,EAAQ6b,kBAC5D0wB,EACFhyC,GAASyhB,EAAAA,EAAAA,IAAuCzhB,EAAQgyC,EAAevxC,EAAQgF,EAAQ7D,GAAI4f,GAE3FxgB,EAAQugB,YAAY,CAClB9gB,SACAyG,UAAWzB,EAAQ6b,iBACnBJ,aAAc,CACZM,aACAlZ,cAAe7C,EAAQ7D,KAI/B,CAEA,OAAO5B,CACT,CAEA,SAASiyC,GACPjyC,EAAWgB,EAAgCyE,GAE3C,MAAM,GAAE7D,EAAE,OAAEnB,GAAWgF,GAEjB,WAAE2C,EAAU,eAAE8pC,IAAmBH,EAAAA,EAAAA,IAAsB/xC,EAAQyF,IAAY,CAAC,EAE5E1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B0xC,EAAwBpvC,GAAMuiB,eAAgBxH,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQoB,EAAAA,IA+BpF,OA7BA7B,EAAS8xC,GAAmB9xC,EAAQgB,EAASyE,GAEzC2C,KACE8pC,IAAmB1H,EAAAA,EAAAA,IAAe/kC,KACpCzF,GAASyd,EAAAA,EAAAA,IAAgBzd,EAAQS,EAAQ2H,EAAW1H,SAAU,CAACkB,IAE/DkG,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ0T,IAAmB,IAAhBxd,GAAIrB,GAAO6e,GAC9CxX,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQ2H,EAAW1H,SAAUH,KAC9DP,GAASoyC,EAAAA,EAAAA,IAAcpyC,EAAQS,EAAQ2H,EAAW1H,SAAUkB,EAAIrB,GAE3D2xC,IACHlyC,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQ2H,EAAW1H,SAAU,iBAAkB+E,EAAQ7D,KAE/F,KAIJ5B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQ2H,EAAW1H,SAAU,aAAc,IAC1E0H,EACHE,cAAe7C,EAAQ7D,MAGpB4oC,EAAAA,EAAAA,IAAe/kC,KAClBzF,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQS,EAAQ2H,EAAW1H,SAAU,CAC7DmqB,eAAgBziB,EAAWyiB,eAAiB,GAAK,MAKnDsnB,IAIJnyC,GAASyd,EAAAA,EAAAA,IAAgBzd,EAAQS,EAAQoB,EAAAA,GAAgB,CAACD,IAE1DkG,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ0rB,IAAmB,IAAhBx1B,GAAIrB,GAAO62B,EAClD,IAAIxvB,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQoB,EAAAA,GAAgBtB,GAAQ,CAEjE,MAAM8xC,GAAgBhtB,EAAAA,EAAAA,IAAoBrlB,EAAQS,EAAQoB,EAAAA,IACpDywC,GAAkBF,EAAAA,EAAAA,IAAcpyC,EAAQS,EAAQoB,EAAAA,GAAgBD,EAAIrB,GACpE6d,GAAiB/W,EAAAA,EAAAA,IAAkBirC,EAAiB7xC,EAAQoB,EAAAA,GAAgBtB,GAE7E8xC,IAAiBj0B,EAAgB3T,SAAS4nC,KAC7CryC,EAASsyC,EAEb,MAfOtyC,CAmBX,CAEA,SAASuyC,GACPvyC,EACAS,EACAgF,GAEA,IADAqL,EAAK5Q,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAEL,MAAM,MAAE4O,GAAU9O,EACZ+C,EAAO+L,EAAMuO,KAAK5c,GAClB+xC,EAAqBzvC,GAAMoF,YAE3Bud,EAAQ3iB,GAAME,SAAUwvC,EAAAA,EAAAA,IAAuBzyC,EAAQyF,QAAW5E,EAOxE,OANI6kB,IACF1lB,GAAS8lB,EAAAA,EAAAA,IAAY9lB,EAAQS,EAAQilB,EAAM9jB,GAAI,CAC7C0G,cAAe7C,EAAQ7D,OAIvB4wC,GAAuB1hC,GAEvB0hC,EAAmB5wC,KAAO6D,EAAQ7D,IAAM4wC,EAAmB5wC,KAAO6D,EAAQsI,iBACvEtI,EAAQ7D,GAAK4wC,EAAmB5wC,IAO9BoiB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAE0H,YAAa1C,IAJxCzF,CAOb,CAEA,SAAS0yC,GAAuC1yC,EAAWS,GACzD,MAAM4c,GAAOhY,EAAAA,EAAAA,IAAmBrF,EAAQS,GAClCod,GAAYC,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQoB,EAAAA,IAElD,IAAKwb,IAASQ,EACZ,OAGF,IAAIY,EAAIZ,EAAU1d,OAClB,KAAOse,KAAK,CACV,MAAMhZ,EAAU4X,EAAKQ,EAAUY,IAC/B,IAAKhZ,EAAQ+b,WACX,OAAO/b,CAEX,CAGF,CAEA,SAASktC,GACP3yC,EAAWS,EAA4BwJ,EAAejJ,GAItD,GAAIP,EAAQ,CACV,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEXkH,EAAIyB,SAAS9J,IACX5B,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAI,CAC7C4f,YAAY,IAKd,MAAMoxB,EAAiBF,GAFvB1yC,GAAS6yC,EAAAA,EAAAA,IAAwB7yC,EAAQS,EAAQmB,GAEFnB,GAC3CmyC,IACF5yC,EAASuyC,GAAsBvyC,EAAQS,EAAQmyC,GAAgB,IAG7D7vC,EAAK8V,SAASjX,KAChB5B,GAAS8yC,EAAAA,EAAAA,IAAY9yC,EAAQS,EAAQmB,GACvC,IAGFZ,EAAQktC,kBAAkB,CAAEztC,WAE5B,MAAMsyC,EAA8B,GA4BpC,OA1BA9oC,EAAIyB,SAAS9J,IACX,MAAM6D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAClD,IAAK6D,EACH,OAGFzF,EAAS8xC,GAAmB9xC,EAAQgB,EAASyE,GAAS,GAEtD,MAAM/E,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQyF,GAC/C/E,GACFqyC,EAAkB3sC,KAAK1F,EACzB,KAGFkD,EAAAA,EAAAA,IAAU5D,QAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgzC,EAAAA,EAAAA,IAAmBhzC,EAAQS,EAAQwJ,IAC5CrG,EAAAA,EAAAA,IAAU5D,IAEVoW,EAAAA,EAAAA,IAAO28B,GAAmBrnC,SAAShL,IACjCM,EAAQiyC,wBAAwB,CAAExyC,SAAQC,YAAW,GACrD,GACDmwC,GAGL,CAIA,MAAMqC,EAA6B,GAEnCjpC,EAAIyB,SAAS9J,IACX,MAAMuxC,GAAkBtE,EAAAA,EAAAA,IAAsB7uC,EAAQ4B,GACtD,GAAIuxC,EAAiB,CACnBD,EAAiB9sC,KAAK+sC,GAMtB,MAAMP,EAAiBF,GAJvB1yC,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQmzC,EAAiBvxC,EAAI,CACtD4f,YAAY,IAGiC2xB,GAC3CP,IACF5yC,EAASuyC,GAAsBvyC,EAAQmzC,EAAiBP,GAAgB,IAG1EtpC,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASgzC,EAAAA,EAAAA,IAAmBhzC,EAAQmzC,EAAiB,CAACvxC,KACtDgC,EAAAA,EAAAA,IAAU5D,EAAO,GAChB6wC,GACL,MAGFjtC,EAAAA,EAAAA,IAAU5D,IAEVoW,EAAAA,EAAAA,IAAO88B,GAAkBxnC,SAAS9J,IAChCZ,EAAQktC,kBAAkB,CAAEztC,OAAQmB,GAAK,GAE7C,EA/4BAb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJ/pB,EAAM,GAAEmB,EAAE,QAAE6D,EAAO,iBAAE2tC,GACnB5oB,EAEJxqB,EAASiyC,GADTjyC,EAASoxC,GAAqBpxC,EAAQS,EAAQmB,EAAI6D,GACNzE,EAASyE,GAEjDA,EAAQmlB,oBACV5qB,GAAS2lB,EAAAA,EAAAA,IACP3lB,EACAyF,EAAQmlB,kBAAkBnqB,OAC1BgF,EAAQmlB,kBAAkBlqB,SAC1B+E,EAAQmlB,oBAIZ,MAAMsmB,GAAax8B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAC/CmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC5BsC,GAAME,SACLiuC,EAAWmC,gBACVZ,EAAAA,EAAAA,IAAuBzyC,EAAQkxC,IAChCA,EAAW5vB,kBACdtgB,EAAQk2B,cAAc,CAAEz2B,SAAQ8V,QAAS26B,EAAW5vB,mBAGtDxZ,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAM2jB,GAAUymB,EAAAA,EAAAA,IAAe/kC,GAC/B,IAAI6tC,EAAAA,EAAAA,IAAoCtzC,EAAQS,EAAQgF,EAAuBlF,GAAQ,CACrF,GAAIwjB,GAAWte,EAAQ6H,aAAgB7H,EAAQ2H,SAAS6H,OAAS,CAC/D,MAAM/S,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACxD2B,GAEFlB,EAAQwH,aAAa,CACnB/H,SACAC,SAAUwB,EAAmBxB,SAC7BwG,UAAWzB,EAAQ7D,GACnB4H,aAAa,EACbQ,qBAAqB,EACrBzJ,SAGN,CAEA,MAAM,WAAE6H,IAAe2pC,EAAAA,EAAAA,IAAsB/xC,EAAQyF,IAA0B,CAAC,EAC5E2C,IAAe2b,GACjB/iB,EAAQiyC,wBAAwB,CAAExyC,SAAQC,SAAU0H,EAAW1H,WAK5DqjB,GACHza,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACL6pC,IACFpzC,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBD,IAE9E5B,EAASuyC,GAAsBvyC,EAAQS,EAAQywC,IAC/CttC,EAAAA,EAAAA,IAAU5D,EAAO,GAChB6wC,GAEP,MACE7wC,EAASuyC,GAAsBvyC,EAAQS,EAAQywC,EACjD,KAGFttC,EAAAA,EAAAA,IAAU5D,IAGL2tC,EAAAA,EAAAA,GAAmB3tC,EAAQS,IAC9BO,EAAQ4sC,eAGV,KACF,CAEA,IAAK,8BACH9lC,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQkC,IAAmB,IAAhBhM,GAAIrB,GAAOqN,EAClD,MAAQnN,OAAQy1B,IAAkBv1B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE9E,GAAI21B,IAAkB1L,EAAO5oB,GAAI,OACjC,MAAM6D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQk2B,EAAe1L,EAAOtjB,WAEhE,IAAKzB,EAAS,OAGd,IAAI8tC,EAAAA,EAAAA,IAAe9tC,KAAa+kB,EAAOlkB,MAAO,OAE9C,MAAMnE,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkqC,wBAAyB,IAAK/nC,EAAS+nC,yBAA2B,GAAK,CACrEtoC,GAAIO,EAAS+nC,yBAAyB/pC,QAAU,EAChD6pC,eAAgBxf,EAAOlkB,MACvBY,UAAWsjB,EAAOtjB,aAEnB3G,EAAM,KAGXqD,EAAAA,EAAAA,IAAU5D,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY+kB,EAEhCxqB,EAASoxC,GAAqBpxC,EAAQS,EAAQmB,EAAI6D,GAAS,GAE3D,MAAM4hB,GAAemsB,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,gBAAgBuU,EAAAA,EAAAA,IAAO,IAAIiR,EAAczlB,KAErG,MAAMlB,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQyF,GACnD,GAAI/E,IAAamB,EAAAA,GAAgB,CAC/B,MAAM4xC,GAAqBD,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,gBAAgB0V,EAAAA,EAAAA,IAAO,IAAIq9B,EAAoB7xC,IACvG,EAEAgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY+kB,EAE1B8mB,GAAiB58B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GACnDmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhCT,EAASoxC,GAAqBpxC,EAAQS,EAAQmB,EAAI6D,GAElD,MAAMyrC,GAAax8B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GACjD6D,EAAQmlB,oBACV5qB,GAAS2lB,EAAAA,EAAAA,IACP3lB,EACAyF,EAAQmlB,kBAAkBnqB,OAC1BgF,EAAQmlB,kBAAkBlqB,SAC1B+E,EAAQmlB,oBAIR0mB,IACFtxC,EAASuyC,GAAsBvyC,EAAQS,EAAQywC,IAG7CzrC,EAAQ4lC,WAAatoC,IACvB/C,EAAS8wC,GAAgB9wC,EAAQS,EAAQmB,EAAI6D,EAAQ4lC,UAAWtoC,EAAMmuC,EAAW5jC,WAAYgkC,IAG3F7rC,EAAQ2H,SAAStJ,MAAMA,OAASwtC,GAAgBlkC,SAAStJ,MAAMA,OACjE9D,GAAS6yC,EAAAA,EAAAA,IAAwB7yC,EAAQS,EAAQmB,KAGnDgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY+kB,EAE1B8mB,GAAiBhqB,EAAAA,EAAAA,IAAuBtnB,EAAQS,EAAQmB,GAC9D,IAAK0vC,EACH,OAGFtxC,EAASoxC,GAAqBpxC,EAAQS,EAAQmB,EAAI6D,GAAS,GAC3D,MAAMwE,EAAMnC,OAAOC,MAAK3C,EAAAA,EAAAA,IAA4BpF,EAAQS,IAAW,CAAC,GAAG8E,IAAI2C,QAAQtC,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IAC1G3mB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBoI,GAE5E,MAAMvJ,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQsxC,GACnD,GAAI5wC,IAAamB,EAAAA,GAAgB,CAC/B,MAAM4xC,GAAqBD,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgB+yC,EAAmB7tC,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IAC9G,EACA/iB,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OAAES,EAAM,QAAEiS,EAAO,QAAEjN,GAAY+kB,EAErCxqB,EAASiyC,GAA2BjyC,EAAQgB,EAASyE,GAErD,MAAM6rC,GAAiB58B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiS,GAEzD1S,GAASgzC,EAAAA,EAAAA,IAAmBhzC,EAAQS,EAAQ,CAACiS,IAGzCjN,EAAQ4rC,cACVrxC,GAAS0zC,EAAAA,EAAAA,IAA4B1zC,EAAQS,EAAQ,CAACiS,KAGxD1S,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQgF,EAAQ7D,GAAI,IAClD0vC,KACA7rC,EACHsI,gBAAiB2E,IAGnB,MAAMw+B,GAAax8B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQgF,EAAQ7D,IAC7D5B,EAASuyC,GAAsBvyC,EAAQS,EAAQywC,GAE/C,MAAMyC,GAAS5B,EAAAA,EAAAA,IAAsB/xC,EAAQyF,GAE7CqC,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQ6Q,IAAmB,IAAhB3a,GAAIrB,GAAOgc,EAClD,MAAQ9b,OAAQy1B,EAAex1B,SAAUy1B,IAAoBx1B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACrG21B,IAAkBz1B,IAChBkzC,GAAQvrC,YAAY1H,UAAYmB,EAAAA,MAAoBs0B,GAI1Dn1B,EAAQ4yC,oBAAoB,CAAEnmC,MAAOhI,EAAQ7D,GAAIrB,SAAQ,IAEvDozC,GAAQvrC,aACVpI,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQkzC,EAAOvrC,WAAW1H,SAAU,aAAc,IACjFizC,EAAOvrC,WACVE,cAAe7C,EAAQ7D,GACvBgkB,uBAAwBngB,EAAQ7D,OAIpCgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OAAES,EAAM,QAAEiS,EAAO,QAAEjN,GAAY+kB,EAC/BnD,GAAemsB,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgB,IAAIwlB,EAAc5hB,EAAQ7D,KAEtG,MAAMlB,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQyF,GACnD,GAAI/E,IAAamB,EAAAA,GAAgB,CAC/B,MAAM4xC,GAAqBD,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgB,IAAI+yC,EAAoBhuC,EAAQ7D,IACxG,CAEA,MAAM0vC,GAAiBhqB,EAAAA,EAAAA,IAAuBtnB,EAAQS,EAAQiS,GAE9D1S,GAAS0zC,EAAAA,EAAAA,IAA4B1zC,EAAQS,EAAQ,CAACiS,IACtD1S,GAAS6xC,EAAAA,EAAAA,IAAuB7xC,EAAQS,EAAQgF,EAAQ7D,GAAI,IACvD0vC,KACA7rC,EACHsI,gBAAiB2E,KAGnB9O,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAES,EAAM,SAAEuuC,EAAQ,WAAEjqC,GAAeylB,EAEnCllB,GAAWuuC,EAAAA,EAAAA,KAAWxuC,EAAAA,EAAAA,IAAmBrF,EAAQS,GAASsE,GAC1D+uC,EAA4C,CAChD,CAACjyC,EAAAA,IAAiBkD,GAEpB+C,OAAOgT,OAAOxV,GAAUoG,SAASjG,IAC/B,MAAM/E,GAAWwmB,EAAAA,EAAAA,IAA0BlnB,EAAQyF,GAInD,GAHAzF,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQgF,EAAQ7D,GAAI,CACrDotC,aAEEtuC,IAAamB,EAAAA,GAAgB,OACjC,MAAMkyC,EAAyBD,EAAgBpzC,IAAa,GAC5DqzC,EAAuB3tC,KAAKX,EAAQ7D,IACpCkyC,EAAgBpzC,GAAYqzC,CAAsB,IAGpDjsC,OAAOsf,QAAQ0sB,GAAiBpoC,SAAQsR,IAAqB,IAAnBtc,EAAUuJ,GAAI+S,EACtD,MAAMg3B,GAAYC,EAAAA,EAAAA,IAAgBj0C,EAAQS,EAAQoB,EAAAA,KAAmB,GAC/DqyC,EAAelF,GACjB54B,EAAAA,EAAAA,IAAO49B,EAAU52B,OAAOnT,IAAMrE,MAAK,CAAC+gB,EAAGC,IAAMA,EAAID,IACjDqtB,EAAUxuC,QAAQ5D,IAAQqI,EAAIQ,SAAS7I,KAC3C5B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQyH,OAAOxH,GAAW,YAAawzC,EAAa,KAE1FtwC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,OACJS,EAAM,SAAEC,EAAQ,WAAE0H,EAAU,eAAE8pC,GAC5B1nB,EAEE2pB,GAAoB9rC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GACrD0zC,EAAgB,IACjBD,KACA/rC,GAGL,IAAKgsC,EAAc1zC,SACjB,OAGFV,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQS,EAAQC,EAAU0zC,GAEhDlC,IACFlyC,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,iBAAkBwxC,IAG1E,MAAMnvC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAMhC,GALIsC,GAAME,SAAWmF,EAAWwd,yBAA2BuuB,GAAmBvuB,wBAC5E5kB,EAAQk2B,cAAc,CAAEz2B,SAAQ8V,QAAS7V,IAIvC0H,EAAWqpB,eAAiB/wB,IAAaqC,GAAME,QAAS,CAC1D,MAAM2iB,EAAyB7iB,GAAM6iB,uBAC/ByuB,EAAiCD,EAAcxuB,wBAA0BA,EAC3EA,GAA0ByuB,IAC5Br0C,GAAS2lB,EAAAA,EAAAA,IAAiB3lB,EAAQS,EAAQC,EAAU,CAClDklB,uBAAwBlY,KAAKC,IAAI0mC,EAAgCzuB,KAGvE,EAEAhiB,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQ4B,GAAInB,GAAW+pB,EACjB8pB,GAAejvC,EAAAA,EAAAA,IAAmBrF,EAAQS,GAE5C6zC,KAAiB1Y,EAAAA,EAAAA,IAASn7B,KAC5BT,GAASgzC,EAAAA,EAAAA,IAAmBhzC,EAAQS,EAAQqH,OAAOC,KAAKusC,GAAc/uC,IAAI2C,UAC1EtE,EAAAA,EAAAA,IAAU5D,GACVgB,EAAQuzC,aAAa,CAAE9zC,SAAQqQ,OAAO,EAAMvQ,OAAOC,EAAAA,EAAAA,SAGrD,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAEyJ,EAAG,OAAExJ,GAAW+pB,EAExBmoB,GAAe3yC,EAAQS,EAAQwJ,EAAKjJ,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEiJ,EAAG,OAAExJ,GAAW+pB,GAyjB9B,SACE/pB,EAA4BwJ,EAAejJ,EAAgChB,GAEtES,IAILwJ,EAAIyB,SAAS9J,IACX5B,GAAS6xC,EAAAA,EAAAA,IAAuB7xC,EAAQS,EAAQmB,EAAI,CAClD4f,YAAY,GACZ,KAGJ5d,EAAAA,EAAAA,IAAU5D,GAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0zC,EAAAA,EAAAA,IAA4B1zC,EAAQS,EAAQwJ,GACrD,MAAMuqC,GAAoBpvC,EAAAA,EAAAA,IAA4BpF,EAAQS,GAC9DT,GAASiH,EAAAA,EAAAA,IACPjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBiG,OAAOC,KAAKysC,GAAqB,CAAC,GAAGjvC,IAAI2C,UAE3FtE,EAAAA,EAAAA,IAAU5D,EAAO,GAChB6wC,IACL,CA/kBM4D,CAAwBh0C,EAAQwJ,EAAKjJ,EAAShB,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,GAAW+pB,EACbrlB,EAAenF,EAAOsF,SAASiG,SAAS9K,GAY9C,GAXIA,IAAWwM,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqBxH,KAAKkN,IAAY,IAC9DA,EACHwK,WAAW,QAGfrZ,EAAAA,EAAAA,IAAU5D,IAGRmF,EAAc,CAChB,MAAM8E,EAAMnC,OAAOC,KAAK5C,EAAakY,MAAM9X,IAAI2C,QAE/CyqC,GADA3yC,GAASuJ,EAAAA,EAAAA,MACc9I,EAAQwJ,EAAKjJ,EACtC,MACEA,EAAQktC,kBAAkB,CAAEztC,WAG9B,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEwJ,EAAG,cAAE0kC,GAAkBnkB,EAE/BvgB,EAAIyB,SAAS9J,IACX,MAAMnB,GAASouC,EAAAA,EAAAA,IAAsB7uC,EAAQ4B,GACzCnB,IACFT,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAI+sC,GACjD,KAGF/qC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAE4uC,EAAS,IAAE3kC,EAAG,cAAE0kC,GAAkBnkB,EAE1CvgB,EAAIyB,SAAS9J,IACX5B,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQ4uC,EAAWhtC,EAAI+sC,EAAc,KAGlE/qC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE00C,EAAM,WAAEC,GAAenqB,EAEzB/kB,GAAUmvC,EAAAA,EAAAA,IAA0B50C,EAAQ00C,GAElD,GAAIjvC,GAAS2H,QAAQ6Y,KAAM,CACzB,MAAM4uB,EAAapvC,EAAQ2H,QAAQ6Y,KAAKzW,QACxC,IAAI6xB,EAAawT,EACbF,EAAWnlC,SAASA,UACjBqlC,EAAWrlC,SAAYmlC,EAAWnlC,QAAQslC,MAEpCD,EAAWrlC,UACpB6xB,EAAa,IACRsT,EAAWnlC,QACdA,QAASmlC,EAAWnlC,QAAQA,QAAQjK,KAAKQ,IAAM,IAC1CA,EACHgvC,SAAUF,EAAWrlC,QAAS7D,MAAMigC,GAAMA,EAAE1lB,SAAWngB,EAAOmgB,UAAS6uB,aAEzED,WAAOj0C,IARTwgC,EAAasT,EAAWnlC,SAY5B,MAAMwlC,EAAc,IAAKvvC,EAAQ2H,QAAQ6Y,QAAS0uB,EAAYnlC,QAAS6xB,GAEvErhC,GAASohB,EAAAA,EAAAA,IACPphB,EACAyF,EAAQhF,OACRgF,EAAQ7D,GACR,CACEwL,QAAS,IACJ3H,EAAQ2H,QACX6Y,KAAM+uB,MAIZpxC,EAAAA,EAAAA,IAAU5D,EACZ,CACA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE00C,EAAM,OAAE9kC,EAAM,QAAEoW,GAAYwE,EAC9B/kB,GAAUmvC,EAAAA,EAAAA,IAA0B50C,EAAQ00C,GAClD,IAAKjvC,IAAYA,EAAQ2H,QAAQ6Y,OAASxgB,EAAQ2H,QAAQ6Y,KAAKzW,QAC7D,MAGF,MAAM,KAAEyW,GAASxgB,EAAQ2H,SAEnB,eAAE6nC,EAAc,YAAEC,EAAW,QAAE1lC,GAAYyW,EAAKzW,QAChD2lC,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjD7T,EAAa7xB,EAAU,IAAIA,GAAW,GAE5C2lC,EAAkB/uC,KAAKwJ,GAEvBoW,EAAQta,SAASwa,IACf,MAAMmvB,EAAoBhU,EAAWtuB,WAAWhN,GAAWA,EAAOmgB,SAAWA,IACvEovB,EAAejU,EAAWgU,GAC1BE,EAA+BD,EAAe,IAAKA,GAAiB,CAAEpvB,SAAQsvB,YAAa,GAEjGD,EAAcC,aAAe,EACzB5lC,IAAW5P,EAAOmY,gBACpBo9B,EAAcR,UAAW,GAGvBM,EACFhU,EAAWgU,GAAqBE,EAEhClU,EAAWj7B,KAAKmvC,EAClB,IAGFv1C,GAASohB,EAAAA,EAAAA,IACPphB,EACAyF,EAAQhF,OACRgF,EAAQ7D,GACR,CACEwL,QAAS,IACJ3H,EAAQ2H,QACX6Y,KAAM,IACDA,EACHzW,QAAS,IACJyW,EAAKzW,QACRylC,eAAgBE,EAChBD,YAAaE,EACb5lC,QAAS6xB,QAMnBz9B,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEyF,GAAY+kB,GAEhBirB,EAAAA,EAAAA,IAAyBz1C,IAC3BgB,EAAQuM,0BAA0B,CAAE9H,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEhF,EAAM,GAAEmB,EAAE,UAAEypC,GAAc7gB,EAC5B/kB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAC5CmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO/pB,QAEvC,IAAKsC,IAAS0C,EAAS,OAEvBzF,EAAS8wC,GAAgB9wC,EAAQS,EAAQmB,EAAIypC,EAAWtoC,EAAM0C,EAAQ6H,WAAY7H,IAClF7B,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJS,EAAM,GAAEmB,EAAE,MAAE8zC,EAAK,QAAEC,GACjBnrB,EACE/kB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAGlD,KAFaoB,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO/pB,UAEzBgF,EAAS,OAEvB,GAAIkwC,EAAS,CACX,IAAKlwC,EAAQ2H,QAAQyxB,QAAS,OAC9B7+B,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAI,CAC7CwL,QAAS,IACJ3H,EAAQ2H,QACXyxB,QAAS,IACJp5B,EAAQ2H,QAAQyxB,QACnB+W,cAAeD,OAIrB/xC,EAAAA,EAAAA,IAAU5D,EACZ,MAAW01C,IACT11C,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQmB,EAAI,CAC7CwL,QAAS,IACJsoC,MAGP9xC,EAAAA,EAAAA,IAAU5D,IAGZ,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEunB,EAAe,KAAEzjB,EAAI,UAAEymB,GAAcC,EAE7CxqB,EAAS,IACJA,EACH61C,eAAgB,IACX71C,EAAO61C,eACV,CAACtuB,GAAkB,IACbvnB,EAAO61C,eAAetuB,IAAoB,CAAC,EAC/CA,kBACAzjB,OACAymB,gBAIN3mB,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,QAAEiS,EAAO,MAAE4E,GAAUkT,EAE/BlT,EAAMqR,MAAM,2BACd7gB,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQwR,IAAmB,IAAhBtb,GAAIrB,GAAO2c,EAClDlc,EAAQipB,oCAAoC,CAAExpB,SAAQF,SAAQ,IAIlEP,GAASohB,EAAAA,EAAAA,IAAkBphB,EAAQS,EAAQiS,EAAS,CAAEojC,aAAc,+BACpElyC,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJS,EAAM,WAAEsE,EAAU,eAAEmlB,EAAc,aAAE6rB,GAClCvrB,EAEJxqB,GAASg2C,EAAAA,EAAAA,IAA0Bh2C,EAAQS,EAAQsE,EAAYmlB,EAAgB6rB,IAE/EnyC,EAAAA,EAAAA,IAAU5D,GACV,KACF,EAAC,IC7oBL,MAEMi2C,IAA8BhrB,EAAAA,EAAAA,KASpC,WAEE,IAAIjrB,GAASuJ,EAAAA,EAAAA,MAEbvJ,GAASm6B,EAAAA,EAAAA,IAAoBn6B,EAAQ,IAChCA,EAAO6c,MAAMud,gBACb8b,MAELtyC,EAAAA,EAAAA,IAAU5D,GAEVk2C,GAAuB,CAAC,CAC1B,GAtB+B,KAE0D,GAEzF,IAAIA,GAAsD,CAAC,GAoB3Dn1C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAO2rB,EAAAA,EAAAA,IAAcn2C,EAAQwqB,EAAO5oB,IAGtC,IAAK,aAgBH,OAfAkG,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAC9CoqB,EAAO5oB,KAAO5B,EAAOmY,eAAiBqS,EAAO5G,KAAK6K,aAAcjI,EAAAA,EAAAA,IAA2BxmB,KAEzFwqB,EAAO5G,KAAK6K,WAAWztB,EAAQo1C,iBAAiB,CAAE1S,WAAW,EAAMnjC,UAGvEP,EAAS,IACJA,EACH+1C,aAAc,CACZxqC,SAAU,CAAC,IAGjB,KAGK6vB,EAAAA,EAAAA,IAAWp7B,EAAQwqB,EAAO5oB,GAAI4oB,EAAO5G,MAG9C,IAAK,0BACH5iB,EAAQq1C,aAAa,CAAEzmC,OAAQ4a,EAAO5oB,KACtC,MAGF,IAAK,wBACH,OAAOw5B,EAAAA,EAAAA,IAAWp7B,EAAQwqB,EAAO5a,OAAQ,CAAEosB,YAAaxR,EAAOwR,cAGjE,IAAK,mBAGH,OAvDwBpsB,EAsDH4a,EAAO5a,OAtDY0mC,EAsDJ9rB,EAAOvR,OArD/Ci9B,GAAqBtmC,GAAU0mC,OAC/BL,KAwDE,IAAK,qBAAsB,CACzB,MAAM,GAAEr0C,EAAE,SAAEmmB,GAAayC,EACnB+rB,EAAav2C,EAAO6c,MAAMQ,KAAKzb,GACrC,IAAK20C,EACH,OAGF,OAAOnb,EAAAA,EAAAA,IAAWp7B,EAAQ4B,EAAI,CAC5BmmB,SAAU,IACLwuB,EAAWxuB,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAEpT,EAAK,OAAE8qB,GAAWjV,EAEpB+rB,GAAa1yB,EAAAA,EAAAA,IAAW7jB,EAAQ2U,GACtC,IAAK4hC,GAAYxuB,UAAUyuB,QACzB,OAGF,OAAOpb,EAAAA,EAAAA,IAAWp7B,EAAQ2U,EAAO,CAC/BoT,SAAU,IACLwuB,EAAWxuB,SACdyuB,QAAS,IACJD,EAAWxuB,SAASyuB,QACvBC,WAAYhX,KAIpB,EA1FJ,IAA8B7vB,EAAgB0mC,CA6F5B,KCvGlBv1C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOkB,EAAAA,EAAAA,IAAiB1rB,EAAQwqB,EAAO5oB,GAAI4oB,EAAOc,WAItC,KCHlBvqB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOyX,WACFyU,EAAAA,EAAAA,IAAkB12C,EAAQwqB,EAAO5oB,KAEjC8+B,EAAAA,EAAAA,IAAqB1gC,EAAQwqB,EAAO5oB,IAG/C,IAAK,yBACH5B,EAAS,IACJA,EACHu6B,YAAa,CACXpI,QAAS,MAGbvuB,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,eACHgB,EAAQkrC,aACR,MAEF,IAAK,yBACHlrC,EAAQ21C,uBACR,MAEF,IAAK,uBACH31C,EAAQkqB,qBACR,MAEF,IAAK,4BACHlqB,EAAQ41C,0BACR,MAEF,IAAK,4BAA6B,CAChC,MAAMC,EAAWrsB,EAAOnY,cAAgBrS,EAAOwS,aAAaF,MAAMC,OAASvS,EAAO8R,SAASQ,MAAMC,OACjG,IAAKskC,EAAU,OAAO72C,EACtB,MAAM82C,EAAW,CAACtsB,EAAO5oB,MAAOi1C,EAASrxC,QAAQ5D,GAAOA,IAAO4oB,EAAO5oB,MACtEZ,EAAQ+1C,mBAAmB,CAAE3kC,MAAO0kC,EAAUzkC,cAAemY,EAAOnY,gBACpE,KACF,CAEA,IAAK,oBACHrR,EAAQg2C,kBACR,MAEF,IAAK,yBACHh2C,EAAQ+1C,mBAAmB,CAAE3kC,MAAOoY,EAAOpY,MAAOC,cAAemY,EAAOnY,gBACxE,MAEF,IAAK,kBACHrR,EAAQi2C,gBACR,MAEF,IAAK,gBACHj3C,EAAS,IACJA,EACHwV,SAAU,IACLxV,EAAOwV,SACV0hC,QAAS,IACJl3C,EAAOwV,SAAS0hC,QACnB,CAAC1sB,EAAO2sB,KAAM3sB,EAAO4sB,UAI3BxzC,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,kCACH8H,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClDJ,GAASq3C,EAAAA,EAAAA,IAAqBr3C,EAAQwqB,EAAOlW,IAAK/T,GAClDP,GAAS++B,EAAAA,EAAAA,IAAe/+B,EAAQg/B,EAAAA,GAAAA,eAA4Bz+B,EAAM,KAEpEqD,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,0BACH8H,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAASvJ,IACjCA,EAASigC,QAAQR,UAAYpX,EAAOoX,UACtC5gC,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,MAAO4B,EAASP,KAChEZ,EAAQuhC,YAAY,CAAEhiC,MAAO4B,EAASP,KACxC,IAKU,KCzFlBb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAO8sB,EAAAA,EAAAA,IAAqBt3C,EAAQwqB,EAAO+sB,SAAU/sB,EAAOhG,SAAUgG,EAAOgtB,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJ/2C,EAAM,QAAEmI,EAAO,SAAE4b,EAAQ,mBAAEgzB,GACzBhtB,EACSxqB,EAAO8O,MAAMuO,KAAK5c,KAG7BT,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAAEmI,aAGxC5I,GAASy3C,EAAAA,EAAAA,IAAmBz3C,EAAQS,EAAQ,CAAEmI,UAAS4b,WAAUgzB,wBACjE5zC,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJS,EAAM,QAAE8V,EAAO,QAAE3N,GACf4hB,EAEJxqB,GAAS8lB,EAAAA,EAAAA,IAAY9lB,EAAQS,EAAQ8V,EAAS,CAAE3N,aAEhDhF,EAAAA,EAAAA,IAAU5D,GACV,KACF,EAGc,KCrClBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFxqB,EACH03C,cAAe,IACV13C,EAAO03C,cACV19B,WAAW,EACX6pB,uBAAwBrZ,EAAOrqB,SAKrC,IAAK,mBACH,MAAO,IACFH,EACH03C,cAAe,IACV13C,EAAO03C,cACVpgC,MAAOkT,EAAO/kB,UAMN,I,6BCblB1E,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAOmtB,KAAK7f,gBACd,OAAI93B,EAAO43C,WAAWC,uBAChB,mBAAoB72C,GAASA,EAAQ82C,eAAe,CAAEC,cAAc,EAAMx3C,OAAOC,EAAAA,EAAAA,UAG9Ew3C,EAAAA,GAAAA,IAAgBh4C,EAAQwqB,EAAOmtB,KAAK/1C,IAI/C,MAAMq2C,GAAYC,EAAAA,GAAAA,IAAgBl4C,EAAQwqB,EAAOmtB,KAAK/1C,IAChDnB,EAASw3C,GAAWx3C,OAO1B,OANIA,IACFT,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC03C,eAAiBF,EAAUG,kBAAoB,GAAK5wC,QAAQywC,EAAUI,cAAcl4C,YAIjFm4C,EAAAA,GAAAA,IACLt4C,EACAwqB,EAAOmtB,KAAK/1C,IACZ8f,EAAAA,EAAAA,IAAK8I,EAAOmtB,KAAM,CAAC,yBACnB92C,EACA2pB,EAAOmtB,KAAKS,kBAEhB,CACA,IAAK,wBAAyB,CAC5B,MAAMr1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQwqB,EAAO/pB,QASvC,OARIsC,IACF/C,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQwqB,EAAO/pB,OAAQ,CACzCsnB,SAAU,IACLhlB,EAAKglB,SACRwwB,YAAa/tB,EAAOmtB,KAAK/1C,OAIxB5B,CACT,CACA,IAAK,8BAA+B,CAClC,MAAM,YAAEu4C,EAAW,aAAEF,EAAY,WAAEhyB,GAAemE,GAC5C,cAAErS,GAAkBnY,EAG1BA,GAASuJ,EAAAA,EAAAA,MACT8uC,EAAa3sC,SAAS8sC,IAChBA,EAAY52C,KACd5B,GAASy4C,EAAAA,GAAAA,IACPz4C,EAAQu4C,EAAaC,EAAY52C,GAAI42C,EAAahxC,QAAQ6e,IAAelO,IAAkBqgC,EAAY52C,IAE3G,IAEEykB,IACFrmB,GAASs4C,EAAAA,GAAAA,IAAgBt4C,EAAQu4C,EAAa,CAC5ClyB,gBAIJ,MAAM4xB,GAAYC,EAAAA,GAAAA,IAAgBl4C,EAAQu4C,GACpC93C,EAASw3C,GAAWx3C,OAM1B,OALIA,IACFT,GAASgkB,EAAAA,EAAAA,IAAWhkB,EAAQS,EAAQ,CAClC03C,eAAiBF,EAAUG,kBAAoB,GAAK5wC,QAAQywC,EAAUI,cAAcl4C,WAGjFH,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK04C,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACTxgC,GACEnY,GAEE,KAAE23C,GAASntB,EAEjB,GAAImuB,EACF,MAAmB,cAAfhB,EAAKiB,OACP53C,EAAQ63C,mBAAmB,CAAEC,MAAO,QAChC,WAAY93C,GAASA,EAAQ+3C,OAAO,CAAEx4C,OAAOC,EAAAA,EAAAA,QAE1C,IACFR,KACC23C,EAAKqB,YAAc,CAAEC,gBAAiBtB,UAI9C,EAKF,GAFmBA,GAAMpkB,UAAYpb,GAEH,cAAfw/B,EAAKiB,MAgBtB,OAfA/3B,EAAAA,EAAAA,KAAU,KACR7gB,GAASuJ,EAAAA,EAAAA,OACT2vC,EAAAA,GAAAA,IAAgB,CACdvB,OACA/zB,MAAMu1B,EAAAA,GAAAA,IAAoBn5C,IAC1B,KAGJo5C,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,IAAmCr5C,EAAQgB,EAAS22C,EAAK2B,SAAS94C,EAAAA,EAAAA,OACvER,EAAS,IACJA,EACH24C,UAAWhB,IAGNp1C,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bu5C,oBAAoB,IACnB/4C,EAAAA,EAAAA,MAEP,EAGc,I,gBCzHlBO,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASwpB,KAEvC,gCADCA,EAAO,UAEX1iB,OAAOgT,OAAO9a,EAAO4Z,SAASlO,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAM,aAAEu+B,IAAiBr9B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QAEvD,GAAIylB,GAAgB,WAAYA,GAAgB,cAAeA,EAAc,CAC3E,MAAMl5B,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ2+B,EAAal+B,OAAQk+B,EAAaz3B,WAE5E,GAAIzB,GAAWA,EAAQ2H,QAAQyxB,QAAS,CACtC,MAAM,OAAEwJ,EAAM,SAAEF,EAAQ,MAAE13B,GAAUhL,EAAQ2H,QAAQyxB,QAEpD79B,EAAQqL,iBAAiB,CACvB9L,QACAkF,QAASP,EAAAA,GAAuB,kBAAmB,EACjDs0C,EAAAA,GAAAA,GAAenR,EAAQF,EAAUjjC,EAAAA,KAAgC4+B,MACjErzB,KAGN,CACF,CAKKgpC,EAAAA,KACHz5C,GAASoZ,EAAAA,EAAAA,IAAapZ,EAAQO,IAG5BiqB,EAAOgY,MAAQ7D,GAAgB,SAAUA,GAAgBA,EAAa6D,OAAShY,EAAOgY,OAI1FxiC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkZ,QAAS,KACJ5X,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2Y,QACjCD,OAAQ,SAET1Y,GAAM,GAKC,I,yECjDH,SAASm5C,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACDlgC,EAAAA,EAAAA,IAAeigC,IACrB,CAACA,GACN,C,gBCLA,MAAME,GAAe3pC,SAAS4pC,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAatoC,GACpBA,EAAEuoC,gBACJ,C,4ECjCA,MAQA,IAAeC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE93C,GAAW83C,EACbC,GAAkBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBj4C,GAG3E,OAAO+3C,EAAkBG,EAAAA,GAAAA,cAACH,EAAoBD,QAAYv5C,CAAS,I,uCCArE,MAmBA,IAAes5C,EAAAA,EAAAA,KAnBqB/5C,IAAuB,IAAtB,cAAEq6C,GAAer6C,GACpDs6C,EAAAA,GAAAA,MACA,MAAMC,GAA2B1iC,EAAAA,EAAAA,MAQjC,IANA2hC,EAAAA,EAAAA,KAAU,KACJa,IACFG,EAAAA,GAAAA,GAAeD,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEH,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wBAAuBmsB,EAAAA,GAAAA,IAAqBF,GAAgC,I,iHCtBxF,IAAKG,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtB91C,EACA6yB,EACAzC,EACA2lB,EACArkC,EACAskC,GAEA,IAAIhiC,EAUA5U,EAWAP,EAWJ,OA3BEmV,EC5BW,WACb,MAAOiiC,EAAUC,IAAeC,EAAAA,EAAAA,IAAS73C,OAAO83C,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAY53C,OAAO83C,UAAUC,OAC/B,CAKA,OAHA/3C,OAAOi4C,iBAAiB,SAAUD,GAClCh4C,OAAOi4C,iBAAiB,UAAWD,GAE5B,KACLh4C,OAAOk4C,oBAAoB,UAAWF,GACtCh4C,OAAOk4C,oBAAoB,SAAUF,EAAa,CACnD,GACA,IAEIL,CACT,CDM0BQ,IACoB,8BAApB5jB,EAEbzC,EACAylB,GAAiBa,QAEjBb,GAAiBc,OAJjBd,GAAiBe,kBAS1Bx3C,EADE4U,IAAW6hC,GAAiBc,QAAUX,EAC7B,OACFD,EACE,eACFrkC,EACE,YAEA,UAITsC,IAAW6hC,GAAiBe,kBAC9B/3C,EAAOmB,EAAK,qBACHgU,IAAW6hC,GAAiBa,UACrC73C,EAAOmB,EAAK,aAGG,iBAAbZ,IACFP,EAAOA,EAAMg4C,cAAcxrC,QAAQ,OAAQ,KAGtC,CACLyrC,iBAAkB9iC,EAClB+iC,yBAA0B33C,EAC1B43C,qBAAsBn4C,EAE1B,C,0HE5CA,MA0BA,IAAeq2C,EAAAA,EAAAA,KA1B+B/5C,IAIxC,IAJyC,iBAC7C27C,EAAgB,qBAChBE,EAAoB,QACpBC,GACD97C,EACC,MAAM6E,GAAOk3C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,0BAA0Bw6C,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,EAAWq7C,QAASA,GAC9E1B,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UACf/B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWV,EAAkB3O,KAAK,cAC3C6O,IAGLzB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,OACLJ,MAAM,qBAEN/B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,gBAEd,I,sCCvCV,SAAyD,uBCmEzD,IAAeyrB,EAAAA,EAAAA,KA9CyB/5C,IAIlC,IAJmC,SACvCkqC,EAAQ,SACRsS,EAAQ,UACRluB,GACDtuB,EACC,MAAMy8C,GAAcC,EAAAA,EAAAA,IAAsBxS,EAASp4B,YAE7C6qC,GAAmBC,EAAAA,GAAAA,GAAUJ,OAAyB/7C,EAAdg8C,GAExCI,GAAkBC,EAAAA,EAAAA,KAAQ,IACzBC,EAAAA,GACE98C,MAAMwe,KAAK,CAAE1e,OAbF,IAa2BoF,KAAI,IAqCrD,WACE,MAAMujC,GAAK,GAAqB,GAAhBp7B,KAAKya,WAAkBza,KAAKya,SAAW,GAAM,GAAK,GAC5DyhB,EAAI,GAAqB,GAAhBl8B,KAAKya,SAEpB,MAAQ,eAAc2gB,MAAMc,EAAI,MAAMd,KAAKc,GAC7C,CA1C2DwT,KADjB,IAErC,IAEH,GAAKL,GAAqBH,EAI1B,OACEpC,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GDxCG,uBCwCyB3uB,IACzCuuB,EAAM13C,KAAK+3C,IACV,MAAMC,EAAS,wBAAuBD,OACtC,OAAIV,EAEApC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVtrC,WAAYo4B,EAASp4B,WACrBwc,UAAW+uB,GACXF,MAAOA,EACPG,qBAAmB,IAMvBlD,EAAAA,GAAAA,cAAA,OACEmD,IAAKZ,EACLa,IAAI,GACJlvB,UAAW+uB,GACXF,MAAOA,GACP,IAGF,IC/CV,IAAepD,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE93C,GAAW83C,EACbyD,GAAmBvD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBj4C,GAG7E,OAAOu7C,EAAmBrD,EAAAA,GAAAA,cAACqD,EAAqBzD,QAAYv5C,CAAS,ICiFvE,IAAes5C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAY99C,IAC9B,MAAM,cAAEmY,GAAkBnY,EACpB+9C,EAAc5lC,GAAgB0L,EAAAA,EAAAA,IAAW7jB,EAAQmY,QAAiBtX,EAExE,MAAO,CACLm7B,YAAa+hB,GAAa/hB,YAC3B,GANiB8hB,EApEiB19C,IAAqB,IAApB,YAAE47B,GAAa57B,EACnD,MAAM,eAAE49C,EAAc,gBAAEC,IAAoBllC,EAAAA,EAAAA,MAGtCmlC,GAAYC,EAAAA,EAAAA,IAA0B,OACrCC,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQhjB,GAAaijB,MAA4B,IAApBjjB,EAAYijB,MAAevyC,KAAKC,MAAgC,KAAxBuyC,EAAAA,EAAAA,WAA+Br+C,GAC1Gs+C,EAAAA,GAAAA,GAAWlB,EAAiBe,IAE5BI,EAAAA,GAAAA,IAAsBxxC,IAAuB,IAArByxC,GAAgBzxC,EAClCwwC,GAAoBpiB,GAAeqjB,GAAmBrjB,EAAY9pB,aAAemtC,EAAgBntC,aACnGusC,IACAH,IACF,GACC,CAACtiB,EAAaoiB,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuBC,EAAAA,EAAAA,KAAa3tC,IACxCysC,IACAL,EAAe,CAAEhiB,YAAapqB,GAAU,GACvC,CAACysC,EAAsBL,KAE1BmB,EAAAA,GAAAA,GAAWT,EAAYF,EA5BE,UA4BmC39C,GAE5D,MAAM2+C,GAAyBD,EAAAA,EAAAA,KAAY,KACzCX,GAAkB,GACjB,CAACA,IAEJ,OACEpE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACZlnB,QAAQg3C,GAAiBxiB,IACxBwe,EAAAA,GAAAA,cAACiF,GAAiB,CAChBnV,SAAUtO,EACV4gB,UAAQ,EACRluB,UAAU,wBAGd8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLonC,IAAKxB,EACLyB,QAASb,EACTnC,KAAK,UACLJ,MAAM,cACN7tB,UAAU,eACVwtB,QAASsD,GAERxjB,EACCwe,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVrG,IAAKnb,EAAY9pB,WACjBA,WAAY8pB,EAAY9pB,WACxByqC,KAvDc,GAwDdiD,UAAWC,EAAAA,MAEXrF,EAAAA,GAAAA,cAACsF,GAAAA,EAAW,OAElBtF,EAAAA,GAAAA,cAACqD,GAAgB,CACfkC,gBAAiB7B,EACjB57C,OAAQq8C,EACRqB,oBAAqBV,EACrBW,QAASpB,IAEP,KCRJqB,GAA0B,CAAC,EAAG,EAAG,GAuXvC,IAAe/F,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9BkB,MAAOi/C,EAAW,eAAEtxC,EAAc,OAAEpO,EAAM,KAAEyM,GAC1C/K,EAASqM,cACP,cACJ2J,EAAa,gBAAE2f,EAAe,UAAEzC,EAAS,gBAAE5e,GACzCzW,GACIqd,KAAM+iC,GAAcpgD,EAAO8O,OAC7B,4BAAEuxC,EAA2B,eAAE9qC,GAAmBvV,EAAOwV,SAASC,MAExE,MAAO,CACL0qC,cACAnmC,YAAWnL,GAAiBrH,QAAQqH,EAAeC,OAASD,EAAevJ,UAC3E6S,gBACAioC,YACAE,mBAAoB7/C,EACpB8/C,WAAYrzC,EACZ+yB,OAAOugB,EAAAA,EAAAA,IAAYxgD,GACnBuV,iBACAuiB,kBACAzC,YACAorB,kBAAmBj5C,SAAQ7G,EAAAA,EAAAA,IAAyBX,IACpDqgD,8BACA95B,sBAAsBC,EAAAA,EAAAA,IAA2BxmB,GACjD0gD,eAAgBl5C,QAAQxH,EAAO8O,MAAMqgC,QAAQpD,QAC7CpyB,YAAanS,QAAQxH,EAAOyY,SAASkB,aACrCgnC,WAAYn5C,QAAQrF,EAASw+C,YAC7BlqC,kBACAmqC,iBAAkB5gD,EAAO6gD,eAC1B,GA/Be/C,EApX8B19C,IA6B5C,IA7B6C,iBACjD0gD,EAAgB,QAChB1zC,EAAO,eACP2zC,EAAc,cACdC,EAAa,gBACbC,EAAe,iBACfC,EAAgB,iBAChBC,EAAgB,iBAChBC,EAAgB,QAChBC,EAAO,YACPlB,EAAW,UACXnmC,EAAS,qBACTuM,EAAoB,qBACpB+6B,EAAoB,cACpBnpC,EAAa,mBACbmoC,EAAkB,WAClBC,EAAU,MACVtgB,EAAK,eACL1qB,EAAc,UACd6qC,EAAS,gBACTtoB,EAAe,UACfzC,EAAS,kBACTorB,EAAiB,4BACjBJ,EAA2B,eAC3BK,EAAc,YACd/mC,EAAW,iBACXinC,EAAgB,WAChBD,EAAU,gBACVlqC,GACDrW,EACC,MAAM,SACJyD,EAAQ,oBACR09C,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,mBACrBC,EAAkB,WAClBC,EAAU,0BACVC,EAAyB,iBACzBC,EAAgB,QAChBvjB,IACEvlB,EAAAA,EAAAA,MAEE9T,GAAOk3C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,MACf+C,EAAU10C,IAAY20C,EAAAA,GAAAA,SAGtBC,GAAqB9E,EAAAA,EAAAA,KAAQ,IAC1BqD,GACH0B,EAAAA,GAAAA,IAAmB,IAAIv1C,KAAkB,IAAb6zC,SAC5B1/C,GACH,CAAC0/C,IACE2B,GAA2BhF,EAAAA,EAAAA,KAAQ,IAClC4E,GAAY1B,EAIVt4C,OAAOgT,OAAOslC,GAAWp6C,QAAO,CAACm8C,EAAOp/C,KACxCq/C,EAAAA,EAAAA,IAAer/C,IAIbA,EAAKuiB,YAAc68B,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACL,EAAS1B,KAEP,iBAAErE,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6BjB,GAC3E91C,EAAM6yB,EAAiBzC,EAAWorB,EAAmBJ,GAA8BK,GAG/E2B,GAAyB9C,EAAAA,EAAAA,KAAa5tC,IAC1CA,EAAEuoC,iBACFvoC,EAAE2wC,kBACE3oC,EACFgoC,IAEAC,EAA0B,CAAE1wC,OAAQqxC,EAAAA,GAAAA,kBACtC,GACC,CAAC5oC,KAEJ6oC,EAAAA,GAAAA,GAAW5B,EAAmB,CAC5B,eAAgByB,EAChB,cAAeA,EACf,eAAgBA,KACZI,EAAAA,IAAU,CAAE,QAASJ,SACvBxhD,GAEJ,MAAM6hD,GAAoBn/C,OAAOq5B,SAASzT,WAAaw5B,EAAAA,KAAuBC,EAAAA,IAExEC,IAA8D3F,EAAAA,EAAAA,KAAQ,IACnEtvC,IAAA,IAAC,UAAEk1C,EAAS,OAAExgD,GAAQsL,EAAA,OAC3B4sC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,OAAQmC,IAAYhD,EACpBnC,KAAK,UACLJ,MAAM,cACN7tB,UAAWpsB,EAAS,SAAW,GAE/B45C,QAAS4F,EAAUgB,EAAY,IAAMzB,IACrC0B,UAAWjB,EAAU78C,EAAK,qBAAuB,uBAEjDu1C,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GACd,sBACCyE,GAAW,aACZR,GAAwB,kBAGnB,GAEV,CAACQ,EAAShD,EAAU75C,EAAMo8C,EAASC,IAEhC0B,IAAoBzD,EAAAA,EAAAA,KAAY,KAC/BY,GACHa,EAAc,GAChB,GACC,CAACb,EAAaa,IAEXiC,IAAyB1D,EAAAA,EAAAA,KAAY,KACzCiC,EAAiB,CAAEnB,6BAA8BA,GAA8B,GAC9E,CAACA,EAA6BmB,IAE3B0B,IAAoB3D,EAAAA,EAAAA,KAAY,KACpC17C,EAAS,CAAEjC,GAAIuW,EAAepW,sBAAsB,GAAO,GAC1D,CAACoW,EAAetU,IAEbs/C,IAAuB5D,EAAAA,EAAAA,KAAa5tC,IACxCA,EAAE2wC,kBACF,MAAMc,EAAqB,UAAVnjB,EAAoB,OAAS,QAE9CuhB,EAAiB,CAAEvhB,MAAOmjB,IAC1B5B,EAAiB,CAAE6B,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAU7tC,IAAmB+1B,EAAAA,IAAoB,GAC5D,CAAC/1B,EAAgBisC,EAAkBvhB,IAEhCsjB,IAA6BhE,EAAAA,EAAAA,KAAa5tC,IAC9CA,EAAE2wC,kBAEF,MAAMkB,EAA8B,IAAnBjuC,EAAuB,EAAI,EAC5C2qC,GAAwBx0C,SAAQ,CAAC+3C,EAAGhlC,KAClCvO,SAASg2B,KAAKwd,UAAUC,OAAQ,mBAAkBllC,IAAK+kC,IAAa/kC,EAAE,IAGxE+iC,EAAiB,CAAEjsC,eAAgBiuC,GAAW,GAC7C,CAACjuC,EAAgBisC,IAEdoC,IAAuBrE,EAAAA,EAAAA,KAAY,KACvCh8C,OAAOC,KAAKqgD,EAAAA,IAAoB,SAAU,WAAW,GACpD,IAEGC,IAAqBvE,EAAAA,EAAAA,KAAY,KCvOvCwE,aAAaC,QAJe,aAIgB7pC,KAAKC,UDwOxB,OACvB6pC,EAAAA,GAAAA,MACApC,GAAkB,GACjB,CAACA,IAEEqC,IAAqB3E,EAAAA,EAAAA,KAAY,KACrCmC,EAAmB,CAAE31B,SAAU9mB,EAAK,0BAA2B,GAC9D,CAACA,EAAMy8C,IAEJyC,IAAuB5E,EAAAA,EAAAA,KAAY,KACvCjhB,EAAQ,CAAEhqB,IAAK8vC,EAAAA,KAAe,GAC7B,CAAC9lB,IAEE+lB,IAAmB9E,EAAAA,EAAAA,KAAY,KACnCoC,GAAY,GACX,CAACA,IAEE2C,GACJ98C,QAAQ84C,IACLlzC,IAAY20C,EAAAA,GAAAA,cACZ30C,IAAY20C,EAAAA,GAAAA,UAGjBnI,EAAAA,EAAAA,KAAU,IAAO0K,IAAkBC,EAAAA,GAAAA,IAAsB,IAAMlD,WAAaxgD,GAAY,CAACyjD,GAAiBjD,IAE1G,MAAMmD,GAAyBp3C,IAAY20C,EAAAA,GAAAA,SACvC98C,EAAK,iBACLA,EAAK,UAEHw/C,GAAgBC,EAAAA,IAAW,GAAE73C,EAAAA,oBAAwCuK,EAAAA,IAAQutC,SAAe93C,EAAAA,KAG5F,uCACJ+3C,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsChE,GAEpCiE,IAAY7H,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,iBACL/I,QAASgH,IAERj+C,EAAK,kBAEPwR,EAAgBC,UACf8jC,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,UACL/I,QAASkF,GAET5G,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,kBAAkBzpB,EAAK,kBACtCi9C,EAA2B,GAC1B1H,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAewzB,IAIpC1H,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,OACL/I,QAASiF,GAERl8C,EAAK,aAERu1C,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,WACL/I,QAASgF,GAERj8C,EAAK,aAERu1C,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,WACL/I,QAASiH,IAET3I,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,kBAAkBzpB,EAAK,wBACvCu1C,EAAAA,GAAAA,cAAC0K,GAAAA,EAAQ,CACPtjD,GAAG,WACHujD,MAAOlgD,EAAe,SAAVg7B,EAAmB,mCAAqC,mCACpEmlB,QAAmB,SAAVnlB,EACTolB,aAAW,KAGf7K,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,aACL/I,QAASqH,IAET/I,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,6BAA6BzpB,EAAK,yBAAyB62C,eAC3EtB,EAAAA,GAAAA,cAAC0K,GAAAA,EAAQ,CACPtjD,GAAG,aACHujD,MAAM,oBACNC,QAAS7vC,EAAiB,KAG9BilC,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,OACL/I,QAASgI,IAERj/C,EAAK,qBAERu1C,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,MACL/I,QAASiI,IACV,cAGAO,EAAAA,KACClK,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,cACL/I,QAAS0H,IACV,kBAIFlB,IACClI,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,SACL50C,KA1Qe,8BA2Qf6rC,QAAS4H,IACV,uBAIFnD,GACCnG,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAK,UACL/I,SAASoJ,EAAAA,GAAAA,MACV,iBAKJ,CACD/vC,EAAgB2sC,EAA0BvB,EAAY4C,GAA4BY,GAAsBl/C,EACxG2+C,GAAsBT,GAAsBe,GAAoBhB,GAAmBY,GACnF1C,EAAkBD,EAAkBD,EAAkBjhB,EAAOyiB,GAAmBjsC,IAGlF,OACE+jC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBACb8rB,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,iBAAiB8sB,UAAU,eAChCzpB,EAAKo3C,OAAS7B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,uBAC9B8rB,EAAAA,GAAAA,cAAC+K,GAAAA,EAAY,CACXC,QAAS3C,GACT4C,OAAS,GAAEC,EAAAA,OAAYjB,KACvB/1B,WAAW2uB,EAAAA,GAAAA,GACTp4C,EAAKo3C,OAAS,MACdyE,GAAoB77C,EAAKo3C,OAAS,gBAClCuI,GAAuCh2B,SAAW3pB,EAAKo3C,OAAS,sBAElEsJ,UAAW7E,GAAoB77C,EAAKo3C,MAAQ,QAAU,OACtDuJ,gBAAiB3gD,EAAKo3C,MAAQwI,QAAkChkD,GAE/DkkD,IAEHvK,EAAAA,GAAAA,cAACqL,GAAAA,EAAW,CACVC,QAAQ,wBACRC,yBAAyB,aACzBr3B,WAAW2uB,EAAAA,GAAAA,GACRiD,GAAsBC,EAAc,wBAAqB1/C,EAC1DigD,GAAoB,uBAEtBzZ,MAAO4Z,OAAkBpgD,EAAakgD,GAAkBZ,EACxD6F,QAAS1B,GACTtqC,UAAWA,GAA0C,cAA7BgiC,EACxBiK,aAA2C,cAA7BjK,EAA2C,cAAWn7C,EACpEqlD,uBAAqD,cAA7BlK,GAAsD,UAAV/b,EAAoB,aAAUp/B,EAClGslD,YAAa3B,GACb4B,aAAa,MACbC,SAAU7+C,QAAQ84C,GAAsBC,GACxC+F,SAAUtF,EACVK,QAASA,EACTkF,QAASvD,GACTwD,eAA6C,cAA7BxK,EAA2CiH,QAAyBpiD,GAEnFmhD,GACCxH,EAAAA,GAAAA,cAACiM,GAAAA,EAAkB,CACjBxB,KAAK,WACLx0C,MAAOuxC,EACPqE,UAAQ,EACR1vC,YAAanP,QAAQ84C,GACrB5xB,UAAU,cACVwtB,QAASqF,EACTmF,SA7RmB,CAAEx5C,UAAMrM,KAgS9By/C,GACC9F,EAAAA,GAAAA,cAACiM,GAAAA,EAAkB,CACjBE,aAAcrG,EACdpE,QAASuF,EACT4E,UAAQ,EACRK,SApSmB,CAAE9kD,QAAIf,MAwS9B0lB,GAAwBi0B,EAAAA,GAAAA,cAACoM,GAAY,MACrCjtC,GACC6gC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,QAASb,EACTnC,KAAK,UACLJ,MAAM,cACNwG,UAAY,GAAE99C,EAAK,8DACnBi3C,QAASmI,GACT31B,WAAW2uB,EAAAA,GAAAA,IAAgB92B,GAAwB,kBAEnDi0B,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAGjB8rB,EAAAA,GAAAA,cAACqM,GAAAA,EAAc,CACbvkD,OAAqC,YAA7B05C,EACR8K,UAAQ,EACRp4B,UAAU,4BAEV8rB,EAAAA,GAAAA,cAACuM,GAAuB,CACtBhL,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAAS+G,OAIX,K,oDEvZV,MA+MA,IAAe9I,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACC,MACEwvC,aACEnyB,KAAMkyB,EACNnrC,WAAY4iD,GAEdl4C,OACEqgC,SAAS,SACP8X,IAEH,cACD9uC,EAAa,aACbyf,EAAY,gBACZnhB,GACEzW,GACE,4BAAEknD,EAA2B,iBAAEC,IAAqB7lD,EAAAA,EAAAA,IAAetB,GAEzE,MAAO,CACLuvC,kBACAyX,mBACAG,mBACAhvC,gBACAyf,eACAsvB,8BACAE,iBAAkB5/C,QAAQy/C,GAAU9mD,QACpCknD,YAAY/4B,EAAAA,GAAAA,GAAmBtuB,EAAQ,iBACvCyW,kBACD,GA5BeqnC,EA5M2B19C,IAezC,IAf0C,gBAC9CknD,EAAe,uBACfC,EAAsB,0BACtBC,EAAyB,gBACzBjY,EAAe,iBACfyX,EAAgB,iBAChBG,EAAgB,cAChBhvC,EAAa,iBACbsvC,EAAgB,aAChB7vB,EAAY,4BACZsvB,EAA2B,WAC3BG,EAAU,qBACVK,EAAoB,iBACpBN,EAAgB,gBAChB3wC,GACDrW,EACC,MAAM,gBACJunD,EAAe,oBACfC,EAAmB,SACnB/jD,IACEkV,EAAAA,EAAAA,MAGE8uC,GAAgB1J,EAAAA,EAAAA,IAAuB,MAEvCl5C,GAAOk3C,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJhiB,GACF+vB,GACF,GACC,CAAC/vB,EAAc+vB,IAElB,MAAMG,GAAiB5K,EAAAA,EAAAA,KAAQ,KACtB,CACLt7C,GAAImmD,EAAAA,IACJt3C,MAAOu2C,IAAmB,KAAOe,EAAAA,IAAgB9iD,EAAK,uBAAyBA,EAAK,qBAErF,CAAC+hD,EAAkB/hD,IAEhB+iD,GAAmB9K,EAAAA,EAAAA,KAAQ,IACxB8J,EACHA,EAAiBzhD,KAAK3D,GAClBA,IAAOmmD,EAAAA,IACFD,EAGFvY,EAAgB3tC,IAAO,CAAC,IAC9B4D,OAAOgC,cACR3G,GACH,CAAC0uC,EAAiBuY,EAAgBd,IAE/BiB,EAAsBD,GAAkBj1C,WAAWu8B,GAAWA,EAAO1tC,KAAOmmD,EAAAA,MAC5EG,EAAqBD,IAAwBd,EAC7CgB,EAxDmB,IAwDsBhB,EAEzCiB,GAAqB1N,EAAAA,GAAAA,MACrB2N,GAAanL,EAAAA,EAAAA,KAAQ,KACzB,GAAK8K,GAAqBA,EAAiB7nD,OAI3C,OAAO6nD,EAAiBziD,KAAI,CAAAqI,EAAgB6Q,KAAM,IAArB,GAAE7c,EAAE,MAAE6O,GAAO7C,EACxC,MAAMq0B,EAAYrgC,IAAOmmD,EAAAA,KAAiBtpC,EAAI4oC,EAAa,EAE3D,MAAQ,CACNzlD,KACA6O,QACA63C,WAAYF,EAAmBxmD,IAAK2mD,WACpCC,cAAehhD,QAAQ4gD,EAAmBxmD,IAAK6mD,oBAC/CxmB,YACD,GACD,GACD,CAAC+lB,EAAkBI,EAAoBf,IAEpCqB,GAAkBnJ,EAAAA,EAAAA,KAAa/gC,IACnCopC,EAAoB,CAAET,iBAAkB3oC,GAAS,CAAE9T,uBAAuB,GAAO,GAChF,CAACk9C,KAGJhO,EAAAA,EAAAA,KAAU,KACHyO,GAAYloD,QAIbgnD,GAAoBkB,EAAWloD,QACjCynD,EAAoB,CAAET,iBAxFD,GAyFvB,GACC,CAACA,EAAkBkB,EAAYT,KAElChO,EAAAA,EAAAA,KAAU,KACR,GAAKttC,EAAAA,IAAiB+7C,GAAYloD,SAAUsnD,EAI5C,OAAOkB,EAAAA,GAAAA,IAAcd,EAAcj5B,QAAU,CAC3Cg6B,wBAAyB,aACzBC,QAAUA,CAACl3C,EAAGhH,IACRA,IAAcm+C,GAAAA,GAAAA,MAChBlB,EACE,CAAET,iBAAkBz5C,KAAKw7B,IAAIie,EAAmB,EAAGkB,EAAWloD,OAAS,IACvE,CAAEuK,uBAAuB,KAEpB,GACEC,IAAcm+C,GAAAA,GAAAA,QACvBlB,EAAoB,CAAET,iBAAkBz5C,KAAKC,IAAI,EAAGw5C,EAAmB,IAAM,CAAEz8C,uBAAuB,KAC/F,IAKX,GACD,CAACy8C,EAAkBkB,EAAYZ,EAAkBG,IAEpD,MAAMmB,GAAwB5K,EAAAA,EAAAA,MAC9B4K,EAAsBn6B,SAAWu5B,GACjCvO,EAAAA,EAAAA,KAAU,IAAOmP,EAAsBn6B,SAAU21B,EAAAA,GAAAA,IAAsB,KACjEwE,EAAsBn6B,SACxBg5B,EAAoB,CAAET,iBAxHD,GAyHvB,SACGtmD,GAAY,CAACsmD,EAAkBS,KAEpCoB,EAAAA,GAAAA,GAAe,CACb/3C,UAAWk3C,EACXc,OAAQA,IAAMrB,EAAoB,CAAET,iBA9Hb,GA8HqD,CAAEz8C,uBAAuB,OAGvGkvC,EAAAA,EAAAA,KAAU,KACR,MAAMsP,EAAiBv3C,IACrB,GAAIA,EAAEw3C,SAAWx3C,EAAEy3C,UAAYz3C,EAAEmyB,KAAKulB,WAAW,UAAYhB,EAAY,CACvE,MAAO,CAAEiB,GAAS33C,EAAEmyB,KAAKnb,MAAM,cAAgB,GAC/C,IAAK2gC,EAAO,OAEZ,GAxIsB,MAwIlBA,EAEF,YADAzlD,EAAS,CAAEjC,GAAIuW,EAAepW,sBAAsB,IAItD,MAAMutC,EAASpnC,OAAOohD,GAAS,EAC/B,GAAIha,EAAS+Y,EAAWloD,OAAS,EAAG,OAEpCynD,EAAoB,CAAET,iBAAkB7X,GAAU,CAAE5kC,uBAAuB,IAC3EiH,EAAEuoC,gBACJ,GAKF,OAFAhqC,SAASsrC,iBAAiB,UAAW0N,GAAe,GAE7C,KACLh5C,SAASurC,oBAAoB,UAAWyN,GAAe,EAAK,CAC7D,GACA,CAAC/wC,EAAekwC,EAAYxkD,EAAU+jD,IAEzC,MACE2B,aAAcC,EAAuB,qBAAEC,IACrCC,EAAAA,GAAAA,IAAmB1C,OAAkBnmD,GAAW,GAEpD,SAAS8oD,EAAiB14C,GACxB,MAAM24C,EAAe9hD,OAAOgT,OAAOy0B,GAChC5jC,MAAK4Q,IAAA,IAAC,GAAE3a,GAAI2a,EAAA,OAAK3a,IAAOymD,EAAYlB,GAAkBvlD,EAAE,IACrDioD,EAAWD,IAAiB1B,EAElC,OACE1N,EAAAA,GAAAA,cAACsP,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClCrlD,SAAUqlD,EAAWD,EAAahoD,QAAKf,EACvCoQ,SAAUA,EACVw2C,iBAAkBA,EAClB7vB,aAAcA,EACd0vB,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BwC,kBAAmB5C,IAAqB3wC,EAAgBC,SACxDD,gBAAiBA,GAGvB,CAEA,MAAMwzC,EAAsB5B,GAAcA,EAAWloD,OAAS,EAE9D,OACEq6C,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GACT,cACA4M,GAAuBvC,GAAwB,6BAGhDuC,EACCzP,EAAAA,GAAAA,cAAC0P,GAAAA,EAAO,CAACC,KAAM9B,EAAY+B,UAAWjD,EAAkBkD,YAAa3B,EAAiB4B,YAAU,IAC9Fd,EACFhP,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,mBAAoBoM,UACjD5oD,EACJ25C,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTkD,IAAKmI,EACLza,KAAM8Z,EAA8B,OAASjiD,EAAKo3C,MAAQ,sBAAwB,kBAClFI,UAAW0K,EACXoD,YAAaN,EAAsB5B,EAAWloD,YAASU,GAEtD8oD,GAEC,K,gBClPV,MAOA,IAAexP,EAAAA,EAAAA,KAPwBC,IACrC,MAAMoQ,GAAalQ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOiQ,EAAahQ,EAAAA,GAAAA,cAACgQ,EAAepQ,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICG7D,IAAetQ,EAAAA,EAAAA,KAPyBC,IACtC,MAAMsQ,GAAcpQ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOmQ,EAAclQ,EAAAA,GAAAA,cAACkQ,EAAgBtQ,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,I,gBCS/D,MAgEA,IAAetQ,EAAAA,EAAAA,KAhEqB/5C,IAK9B,IAL+B,QACnCuqD,EAAO,iBACPC,EAAgB,aAChBC,EAAY,WACZC,GACD1qD,EACC,MAAO2qD,EAAYC,IAAiB5P,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACH+Q,GACHK,GAAc,EAChB,GACC,CAACL,IAEJ,MAAM1lD,GAAOk3C,EAAAA,GAAAA,KAEP8O,GAAe5N,EAAAA,GAAAA,GACnB,gBACAsN,GAAW,WACXI,GAAc,gBAGVG,GAAmB3L,EAAAA,EAAAA,KAAY,KACnCyL,GAAeD,EAAW,GACzB,CAACA,IAEEI,GAAc5L,EAAAA,EAAAA,KAAY,KAC9ByL,GAAc,EAAM,GACnB,IAEGjG,GAAY7H,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,UAAU/I,QAAS2O,GAAe5lD,EAAK,eACtDu1C,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,QAAQ/I,QAAS4O,GAAa7lD,EAAK,aAClDu1C,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,OAAO/I,QAAS0O,GAAmB3lD,EAAK,sBAExD,CAACA,EAAM4lD,EAAcC,EAAYF,IAEpC,OACEpQ,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWu8B,EAAc7O,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,GACtD25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,UACN7tB,UAAWq8B,EAAa,SAAW,GACnC7O,QAASgP,EACTnI,UAAW99C,EAAK8lD,EAAa,QAAU,mBACvCK,UAAW,GAEX5Q,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,yBACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEf8rB,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACH/oD,OAAQyoD,EACRpF,UAAW1gD,EAAKo3C,MAAQ,OAAS,QACjCiP,UAAU,SACVC,WAAS,EACTtL,QAASkL,GAERpG,GAEC,I,gBCrCV,MAAMyG,GAA0B1jD,OAAOC,KAAKg6C,EAAAA,IAAmB5hD,OAAS,EAGxE,IAAIsrD,GAEJ,MAuLA,IAAetR,EAAAA,EAAAA,KAvLgB/5C,IAezB,IAf0B,QAC9BgN,EAAO,YACP+yC,EAAW,WACXI,EAAU,gBACVU,EAAe,eACfF,EAAc,qBACdO,EAAoB,gBACpBgG,EAAe,kBACfpwC,EAAiB,iBACjBuwC,EAAgB,cAChBzG,EAAa,gBACb0K,EAAe,uBACfnE,EAAsB,QACtBlG,EAAO,cACPsK,GACDvrD,EACC,MAAM,gBAAEgD,IAAoB2V,EAAAA,EAAAA,OACrB6yC,EAAsBC,IAA2BzQ,EAAAA,EAAAA,IAAS9uC,EAAAA,KAE3D,uBACJw/C,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBzE,GAClB0E,EAAuB1E,GAAoBr6C,IAAY20C,EAAAA,GAAAA,SACvDqK,EAAsBD,GAAwBF,GAGlD1C,aAAc8C,EACd5C,qBAAsB6C,IACpB5C,EAAAA,GAAAA,GAAkBxyC,GAEhBq1C,GAAgBpO,EAAAA,EAAAA,KAAO,GAEvBqO,GAAmBjN,EAAAA,EAAAA,KAAY,KAC/BnyC,IAAY20C,EAAAA,GAAAA,WAGhBwK,EAAc39B,SAAU,EACxBi9B,GAAwB,GAAK,GAC5B,CAACz+C,IAEEq/C,GAAmBlN,EAAAA,EAAAA,KAAY,KACnCgN,EAAc39B,SAAU,EAEpB68B,KACFphD,aAAaohD,IACbA,QAAe5qD,GAGjB4qD,GAAeloD,OAAO+F,YAAW,KAC1BijD,EAAc39B,SACjBi9B,GAAwB,EAC1B,GAxDwB,IAyDD,GACxB,IAEGa,GAAuBnN,EAAAA,EAAAA,KAAY,KACvCmM,EAAgB3J,EAAAA,GAAAA,SAA2B,GAC1C,CAAC2J,IAEEiB,GAAuBpN,EAAAA,EAAAA,KAAY,KACvCmM,EAAgB3J,EAAAA,GAAAA,SAA2B,GAC1C,CAAC2J,IAEEkB,GAAuBrN,EAAAA,EAAAA,KAAY,KACvCmM,EAAgB3J,EAAAA,GAAAA,UAChB3+C,GAAiB,GAChB,CAACA,EAAiBsoD,IAEfmB,GAAoBtN,EAAAA,EAAAA,KAAY,KACpCh8C,OAAOq5B,SAASkwB,QAAQ,GACvB,IAEGC,GAAyBxN,EAAAA,EAAAA,KAAY,KACzCmM,EAAgB3J,EAAAA,GAAAA,gBAAkC,GACjD,CAAC2J,IAEEsB,GAAuBzN,EAAAA,EAAAA,KAAY,KACvCmM,EAAgB3J,EAAAA,GAAAA,cAAgC,GAC/C,CAAC2J,KAEJ9R,EAAAA,EAAAA,KAAU,KACR,IAAIqT,EASJ,OARI7/C,IAAY20C,EAAAA,GAAAA,SACdkL,EAAmB1pD,OAAO+F,YAAW,KACnCuiD,GAAwB,EAAM,GAzFR,MA2FfU,EAAc39B,SAAWtiB,EAAAA,KAClCu/C,GAAwB,GAGnB,KACDoB,IACF5iD,aAAa4iD,GACbA,OAAmBpsD,EACrB,CACD,GACA,CAACuM,IAEJ,MAAMnI,GAAOk3C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OACE54C,GAAG,kBACHsrD,aAAe5gD,EAAAA,QAAkCzL,EAAnB2rD,EAC9BW,aAAe7gD,EAAAA,QAAkCzL,EAAnB4rD,GAE9BjS,EAAAA,GAAAA,cAAC4S,GAAc,CACbtM,iBAAkBsL,EAClBh/C,QAASA,EACT2zC,eAAgBA,EAChBC,cAAeA,EACfE,iBAAkBwL,EAClBvL,iBAAkBwL,EAClBvL,iBAAkBwL,EAClBvL,QAASA,EACTC,qBAAsBA,EACtBL,gBAAiBA,IAEnBzG,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAMkU,EAAuB,OAAS,YACtCiJ,YAAaiB,GACb/O,UAAWrvC,EACXigD,eAAa,EACbC,oBAAqBvL,EAAAA,GAAAA,WAEnB9wC,IACA,OAAQ7D,GACN,KAAK20C,EAAAA,GAAAA,SACH,OACEvH,EAAAA,GAAAA,cAAC+S,GAAW,CACV7F,qBAAsB0E,EACtB7E,uBAAwBA,EACxBC,0BAA2BkE,EAC3BpE,gBAAiBA,EACjBG,iBAAkB2E,IAGxB,KAAKrK,EAAAA,GAAAA,aACH,OACEvH,EAAAA,GAAAA,cAACgQ,GAAU,CACTrK,YAAaA,EACbI,WAAYA,EACZtvC,SAAUA,EACVowC,QAASA,IAGf,KAAKU,EAAAA,GAAAA,SACH,OAAOvH,EAAAA,GAAAA,cAACkQ,GAAW,CAACllD,OAAQu7C,EAAgB9vC,SAAUA,EAAUowC,QAASA,IAC3E,QACE,OAAiB,IAIxBgL,GACC7R,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL8Q,OAAK,EACLC,MAAI,EACJ/+B,WAAW2uB,EAAAA,GAAAA,GAAe,aAAciP,GACxCpQ,QAAS2Q,GAER5nD,EAAK,wBAGT6mD,GACCtR,EAAAA,GAAAA,cAACkT,GAAAA,EAAU,CACTprD,OAAQmlD,EACR/wC,UAAWy1C,EACXR,cAAeA,EACfgC,qBAAsB3B,EACtB4B,oBAAqB7B,IAGzBvR,EAAAA,GAAAA,cAACqT,GAAa,CACZlD,QAASiB,EACThB,iBAAkB+B,EAClB9B,aAAckC,EACdjC,WAAYkC,IAEV,ICpNV,IAAe7S,EAAAA,EAAAA,KAPsBC,IACnC,MAAM0T,GAAWxT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAOuT,EAAWtT,EAAAA,GAAAA,cAACsT,EAAa1T,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICGzD,IAAetQ,EAAAA,EAAAA,KAPqBC,IAClC,MAAM2T,GAAUzT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAOwT,EAAUvT,EAAAA,GAAAA,cAACuT,EAAY3T,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICEvD,IAAetQ,EAAAA,EAAAA,KAP2BC,IACxC,MAAM4T,GAAgB1T,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOyT,EAAgBxT,EAAAA,GAAAA,cAACwT,EAAkB5T,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICWxC,IAmBtBwD,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAepmD,OAAOC,KAAKkmD,IAAa9tD,OAAS,EA+bvD,IAAeg6C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9BwO,cAAc,MACZtN,EAAK,KACLgM,GACD,4BACDg6C,EAA2B,iBAC3BC,EAAgB,mBAChBgH,GACEhsD,GACE,gBACJ4O,EAAe,cACfoH,EACAM,UAAU,YACRkB,GACD,kBACDzC,EAAiB,gBACjBT,GACEzW,EAEE2Y,GAAc7M,EAAAA,EAAAA,IAAkB9L,GAKtC,MAAO,CACLmgD,YAAaj/C,EACbq/C,WAAYrzC,EACZkhD,wBAA8C,IAArBjH,EACzBD,8BACAn2C,kBACAoH,gBACAwB,cACAw0C,qBACAE,WAbiB7mD,QAAQmR,GAAa/W,IActCsV,oBACAuwC,kBAduB6G,EAAAA,EAAAA,IAAuBtuD,GAe9CmD,iBAduBhB,EAASgB,iBAehC89C,gBAAiB9+C,EAASqM,aAAaO,UACvC0H,kBACD,GA1CeqnC,EA5be19C,IAe7B,IAf8B,YAClC+/C,EAAW,WACXI,EAAU,wBACV6N,EAAuB,4BACvBlH,EAA2B,gBAC3Bn2C,EAAe,cACfoH,EAAa,YACbwB,EAAW,mBACXw0C,EAAkB,WAClBE,EAAU,kBACVn3C,EAAiB,iBACjBuwC,EAAgB,iBAChBtkD,EAAgB,gBAChB89C,EAAe,gBACfxqC,GACDrW,EACC,MAAM,qBACJmuD,EAAoB,uBACpBC,EAAsB,sBACtB/M,EAAqB,kBACrBgN,EAAiB,oBACjBlN,EAAmB,iBACnBmN,EAAgB,gBAChBC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBhrD,EAAQ,0BACR+9C,IACE7oC,EAAAA,EAAAA,MAGE+1C,GAAY3Q,EAAAA,EAAAA,IAAuB,OAClC/wC,EAAS2hD,IAAc3T,EAAAA,EAAAA,IAA4B2G,EAAAA,GAAAA,WACnDiN,EAAgBC,IAAqB7T,EAAAA,EAAAA,IAASmH,EAAAA,GAAAA,OAC9CxB,EAAgBmO,IAAqB9T,EAAAA,EAAAA,IAAiB,KACtD+T,EAAc7H,IAAmB8H,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBlU,EAAAA,EAAAA,IAAiB,GAE3D,IAAImU,EAA2BtB,GAAYuB,KAC3C,OAAQpiD,GACN,KAAK20C,EAAAA,GAAAA,SACHwN,EAActB,GAAYwB,SAC1B,MACF,KAAK1N,EAAAA,GAAAA,SACHwN,EAActB,GAAYH,SAC1B,MACF,KAAK/L,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHwN,EAActB,GAAYyB,WAC1B,MACF,KAAK3N,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHwN,EAActB,GAAY0B,SAI9B,MAAMC,GAAcrQ,EAAAA,EAAAA,KAAasQ,IAC/B,SAASC,IACPf,EAAWhN,EAAAA,GAAAA,UACXmN,EAAkB,IAClBV,EAAuB,CAAEz/C,WAAW,IACpC0/C,IACAnlD,YAAW,KACTilD,EAAqB,CAAErtD,MAAO,KAC9BqgD,EAAoB,CAAEr0C,UAAMrM,IAC5B4gD,EAAsB,CAAE7/C,QAAIf,IAC5B2tD,EAAuB,CAAEz/C,WAAW,IACpCugD,EAAiB5iD,KAAKC,MAAM,GAvEF,IAyE9B,CAEA,IAA8B,IAA1BkjD,EAKJ,GAAIziD,IAAY20C,EAAAA,GAAAA,cAKhB,GAAI30C,IAAY20C,EAAAA,GAAAA,gBAAhB,CAKA,GAAI30C,IAAY20C,EAAAA,GAAAA,cAAiC,CAC/C,MAAMgO,EAAoB7/C,SAAS8/C,eAAe,2BAC9CD,GACFA,EAAkBpzB,MAEtB,CAEA,GAAIvvB,IAAY20C,EAAAA,GAAAA,SACd,OAAQiN,GACN,KAAKzM,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,aAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,wBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,oBAEH,YADA0M,EAAkBt1C,EAAc4oC,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,kBAGpE,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,iBAGpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,qBAGpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,2BAGpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAwM,EAAWhN,EAAAA,GAAAA,eACXkN,EAAkB1M,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,UAGpB,KAAKA,EAAAA,GAAAA,eAEH,YADA0M,EAAkB1M,EAAAA,GAAAA,UAOpBn1C,IAAY20C,EAAAA,GAAAA,UAA8BqM,EAC5CW,EAAWhN,EAAAA,GAAAA,cAKb+N,GA7KA,MAFEf,EAAWhN,EAAAA,GAAAA,sBALXgN,EAAWhN,EAAAA,GAAAA,oBALX+N,GAyLS,GACV,CACD1iD,EAASghD,EAAyBI,EAAwBC,EAAmBF,EAC7EhN,EAAqBE,EAAuBuN,EAAgBr1C,IAGxDs2C,GAAoB1Q,EAAAA,EAAAA,KAAar+C,IACjCkM,IAAY20C,EAAAA,GAAAA,UAKhBgN,EAAWhN,EAAAA,GAAAA,cAEP7gD,IAAUi/C,GACZoO,EAAqB,CAAErtD,WAPvBguD,EAAkBhuD,EAQpB,GACC,CAACkM,EAAS+yC,EAAaoO,IAEpB2B,GAAoB3Q,EAAAA,EAAAA,KAAY,KACpCwP,EAAWhN,EAAAA,GAAAA,cACXwM,EAAqB,CAAErtD,MAAO,KAC9BugD,EAAsB,CAAE7/C,GAAIuB,GAAmB,GAC9C,CAACA,EAAkBs+C,EAAuB8M,KAE7C3U,EAAAA,EAAAA,KACE,IAAOxsC,IAAY20C,EAAAA,GAAAA,UAA+BqM,IAA4BC,IAAe5G,GACzFlD,EAAAA,GAAAA,IAAsB,IAAMqL,WAC5B/uD,GACJ,CAACutD,EAAyBhhD,EAASwiD,EAAavB,EAAY5G,IAG9D,MAAM0I,GAAqB5Q,EAAAA,EAAAA,KAAa5tC,IAClCvE,IAAY20C,EAAAA,GAAAA,eAIhBpwC,EAAEuoC,iBACF6U,EAAWhN,EAAAA,GAAAA,cAA+B,GACzC,CAAC30C,IAEEgjD,GAA4B7Q,EAAAA,EAAAA,KAAa5tC,IAC7CA,EAAEuoC,iBACFr2C,EAAS,CAAEjC,GAAIuW,EAAepW,sBAAsB,GAAO,GAC1D,CAACoW,EAAetU,IAEbwsD,GAAsB9Q,EAAAA,EAAAA,KAAa5tC,IACvCA,EAAEuoC,iBACF6U,EAAWhN,EAAAA,GAAAA,SAA2B,GACrC,IAEGuO,GAAuB/Q,EAAAA,EAAAA,KAAa5tC,IACxCA,EAAEuoC,iBACF6U,EAAWhN,EAAAA,GAAAA,SAA2B,GACrC,KAEHS,EAAAA,GAAAA,GAAW,CACT,cAAe2N,EACf,cAAeC,KACX3N,EAAAA,IAAU,CACZ,QAAS2N,EACT,QAASC,MAEPE,EAAAA,IAAa9N,EAAAA,IAAU,CAAE,QAAS6N,MAGxC1W,EAAAA,EAAAA,KAAU,KACR+U,IAEIK,IAAmBzM,EAAAA,GAAAA,SACrBmM,GACF,GACC,CAACC,EAAiBD,EAAkBM,KAEvCwB,EAAAA,GAAAA,IAAc,UACe3vD,IAAvBstD,IACFY,EAAWhN,EAAAA,GAAAA,UACXkN,EAAkBd,GAClBvM,EAA0B,CAAE1wC,YAAQrQ,IACtC,GACC,CAACstD,EAAoBvM,IAExB,MAAM,WACJ6O,EAAU,YAAEC,EAAW,cAAEC,GCxYtB,SACLC,EACAC,EACAxP,EACAyP,EACAC,GAEA,MAAO9/C,EAAU+/C,EAAcC,IAAkB1S,EAAAA,GAAAA,MAC1C2S,EAAeC,IAAoB/V,EAAAA,EAAAA,IAAiB,IACpDgW,EAAqBC,IAA0BjW,EAAAA,EAAAA,IAAiB,GAEjEkW,GAAkB/R,EAAAA,EAAAA,KAAalqC,IACnC,IAAKu7C,EAAWhiC,QACd,OAGF,MAAM2iC,EAAUl8C,EAAS,GAAEA,MAAY,GACvCu7C,EAAWhiC,QAAQ2uB,MAAMloC,MAAQk8C,EAC7BR,GACFH,EAAWhiC,QAAQ2uB,MAAMiU,YAAYT,EAAiBQ,EACxD,GACC,CAACR,EAAiBH,IAUrB,SAASD,IACPzgD,SAASg2B,KAAKwd,UAAU+N,OAAO,mBACjC,CA8CA,OAxDAC,EAAAA,EAAAA,KAAgB,KACTd,EAAWhiC,SAAYkiC,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiBH,EAAYE,EAAcQ,KAsB/C1X,EAAAA,EAAAA,KAAU,KACR,IAAK3oC,EAAU,OAEf,MAAM0gD,EAAmBhgD,IACvB,MAAMigD,EAAWlkD,KAAKmkD,KAAKT,EAAsBz/C,EAAEmgD,QAAUZ,GAC7DI,EAAgBM,EAAS,EAG3B,SAASG,IACPC,IACAnB,EAASD,EAAWhiC,QAASqjC,YAC/B,CAEA,SAASD,IACPrB,IACAzgD,SAASurC,oBAAoB,YAAakW,GAAiB,GAC3DzhD,SAASurC,oBAAoB,UAAWsW,GAAU,GAClD7hD,SAASurC,oBAAoB,OAAQsW,GAAU,GAC/Cd,GACF,CAMA,OAJA/gD,SAASsrC,iBAAiB,YAAamW,GAAiB,GACxDzhD,SAASsrC,iBAAiB,UAAWuW,GAAU,GAC/C7hD,SAASsrC,iBAAiB,OAAQuW,GAAU,GAErCC,CAAO,GACb,CAACZ,EAAqBF,EAAeN,EAAYC,EAAU5/C,EAAUggD,EAAgBK,IAEjF,CAAEb,WA5CT,SAAoB9+C,GAClBA,EAAEuoC,iBAEFhqC,SAASg2B,KAAKwd,UAAU/gB,IAAI,oBAE5BwuB,EAAiBx/C,EAAEmgD,SACnBT,EAAuBT,EAAWhiC,QAASqjC,aAC3CjB,GACF,EAoCqBN,YAlCrB,SAAqB/+C,GACnBA,EAAEuoC,iBACFoX,OAAgBzwD,GAChBwgD,GACF,EA8BkCsP,gBACpC,CDyTMuB,CAAUpD,GAAY97C,GAAM47C,EAAmB,CACjD79C,gBAAiBiC,KACf67C,EAAsB99C,EAAiB,uBAErCohD,GAA6B5S,EAAAA,EAAAA,KAAaruC,IAC9C69C,EAAWhN,EAAAA,GAAAA,UACXkN,EAAkB/9C,EAAO,GACxB,IAEH,OACEspC,EAAAA,GAAAA,cAAA,OACE54C,GAAG,aACH89C,IAAKoP,GAELtU,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAM8Z,EAA8B,OAASkL,EAAAA,GAC7C7H,YAAa2D,GACbzR,UAAW8S,EACXlC,eAAa,EACbC,oBAAqBW,GAAYuB,OAE/Bv+C,IACA,OAAQs+C,GACN,KAAKtB,GAAYwB,SACf,OACEjV,EAAAA,GAAAA,cAACwT,GAAa,CACZ/8C,SAAUA,EACVowC,QAASuO,EACTjE,cAAeuE,EACf5I,gBAAiBA,EACjBC,uBAAwB4K,EACxB3K,0BAA2BuH,EAC3BtH,iBAAkBA,EAClBhxC,gBAAiBA,IAGvB,KAAKw3C,GAAYH,SACf,OACEtT,EAAAA,GAAAA,cAACsT,GAAQ,CACP78C,SAAUA,EACVohD,cAAerD,EACfG,aAAcA,EACd7H,gBAAiBA,EACjBgL,eAAgBH,EAChB9Q,QAASuO,EACTtO,qBAAsB4F,IAG5B,KAAK+G,GAAYyB,WACf,OACElV,EAAAA,GAAAA,cAACuT,GAAO,CACN5W,IAAKkY,EACLp+C,SAAUA,EACVshD,WAAS,EACTnlD,QAASA,EACTs+C,gBAAiBqD,EACjB1N,QAASuO,IAGf,KAAK3B,GAAY0B,SACf,OACEnV,EAAAA,GAAAA,cAACuT,GAAO,CACN5W,IAAKkY,EACLp+C,SAAUA,EACV7D,QAASA,EACTs+C,gBAAiBqD,EACjB1N,QAASuO,IAGf,QACE,OACEpV,EAAAA,GAAAA,cAACgY,GAAQ,CACPplD,QAASA,EACT6zC,gBAAiBA,EACjBd,YAAaA,EACbI,WAAYA,EACZQ,eAAgBA,EAChBuG,gBAAiBA,EACjBoE,gBAAiBqD,EACjB/N,cAAeiP,EACf1I,uBAAwB4K,EACxB9Q,QAASuO,EACTtO,qBAAsB4F,EACtBhwC,kBAAmBA,EACnBuwC,iBAAkBA,EAClBkE,cAAeuE,IAEjB,IAIV1V,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,gBACV+jC,YAAahC,EACbiC,UAAW/B,EACXgC,cAAejC,IAEb,K,qPE/eV,UAAgB,wBAAwB,uBAAuB,oBAAsB,uBAAuB,kCAAkC,uBAAuB,4BAA8B,uBAAuB,gCAAgC,uBAAuB,2BAA6B,uBAAuB,6BAA6B,uBAAuB,wBAA0B,wBC2LnZ,SAASkC,GAAS9pB,EAAWc,EAAWv0B,EAAeC,EAAgBu9C,GACrE,MAAQ,IAAG/pB,KAAKc,EAAIipB,KAAUA,KAAUA,eACtCx9C,OAAWC,EAAS,EAAIu9C,KAAUA,KAAUA,YAAiBx9C,MACjE,CAoCA,UAAe8kC,EAAAA,EAAAA,KAhN+B/5C,IAExC,IAFyC,MAC7ColB,EAAK,MAAEhH,GACRpe,EAEC,MAAM0yD,GAAe3U,EAAAA,EAAAA,IAAuB,MAEtC4U,GAAe7V,EAAAA,EAAAA,KAAQ,IAmF/B,SAAyB13B,EAAehH,GACtC,MAAMw0C,EAAextC,EAAQhH,EAAQ,EAC/By0C,EAmBR,SAAsBztC,GACpB,IAAIytC,EAAY,EAahB,OAZc,IAAVztC,EACFytC,EAAY,GACO,IAAVztC,EACTytC,EAAY,GACO,IAAVztC,EACTytC,EAAY,IACO,IAAVztC,GAEAA,EAAQ,KADjBytC,EAAY,KAKPA,CACT,CAlCoBC,CAAa1tC,GACzB2tC,EAmCR,SAAuB3tC,EAAehH,GACpC,IAAIy0C,EAAY,GAahB,OAZc,IAAVztC,EACFytC,EAAY,GACO,IAAVztC,EACTytC,EAAY,GACO,IAAVztC,EACTytC,EAAsB,IAAVz0C,EAAc,GAAK,IACZ,IAAVgH,GAEAA,EAAQ,KADjBytC,EAAY,KAKPA,CACT,CAlDqBG,CAAc5tC,EAAOwtC,GAClCK,EAmDR,SAAwB7tC,EAAeytC,GACrC,OAAOztC,GAAS,EAAI,GAAKytC,EAAYztC,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB8tC,CAAe9tC,EAAOytC,GAEpCM,EAAc,WAAU/tC,IACxBguC,EAoDR,SAAqB5xD,EAAYqxD,EAAmBztC,GAGlD,IAAIiuC,EAAI,GACR,GAAc,IAAVjuC,EACFiuC,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAIx0C,EAAI,EAAGA,EAAI+G,EAAO/G,IACzBg1C,GAAKb,GAAS,GAAIK,EAAY,GAAKx0C,EAAG,EAAGw0C,EAT9B,GAaf,MACG,iBAAgBrxD,uBACJ6xD,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWztC,GAE9CmuC,EA4ER,SAA2Bn1C,EAAey0C,EAAmBztC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVhH,EAAc,EAAIy0C,EAAY,EAGzB,IAAVztC,EACY,IAAVhH,EACK,EACY,IAAVA,EACF,GAGF,IAECy0C,EAAY,GAAKz0C,CAE7B,CA9FyBo1C,CAAkBZ,EAAcC,EAAWztC,GAC5DquC,EA+FR,SAA4Br1C,EAAegH,EAAeytC,EAAmBI,GAC3E,OAAI7tC,GAAS,GAIThH,GAAS,EAHJ,EAKEA,GAASgH,EAAQ,EACnB6tC,EAAc,IAGfJ,EAAY,GAAK,GAAKz0C,EAAQ,IAAMy0C,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcxtC,EAAOytC,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CArGWQ,CAAgBvuC,EAAOhH,IAC7B,CAACgH,EAAOhH,IAyCX,IAvCAo7B,EAAAA,EAAAA,KAAU,KACR,IAAKkZ,EAAalkC,QAChB,OAGF,MAAM,YACJykC,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEiB,EAAalB,EAAalkC,QAAQqlC,kBACxC,GAAInB,GAAclkC,QAAS,CACzB,MAAMslC,EAAiBpB,EAAalkC,SAC9B,MAAE2uB,GAAU2W,EAClB3W,EAAMjoC,OAAU,GAAE+9C,MAClB9V,EAAM4W,UAAa,eAAcN,OACjCtW,EAAMiW,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAepa,cAAc,OACnCua,EAAMH,EAAepa,cAAc,OACnCwa,EAAOJ,EAAepa,cAAc,QACrCsa,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAI9W,MAAMjoC,OAAU,GAAE69C,MACtBkB,EAAI9W,MAAM4W,UAAa,cAAaR,OAExC,IACC,CAACZ,IAEU,IAAVvtC,EACF,OACEg1B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW+uB,GAAAA,qBACdjD,EAAAA,GAAAA,cAAA,OACE9rB,UAAW+uB,GAAAA,4BACXiC,IAAKoT,KAMb,MAAM,YACJO,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACEvY,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GACdI,GAAAA,oBACAj4B,EArEoB,GAqESi4B,GAAAA,0BAG7BjD,EAAAA,GAAAA,cAAA,OACE9rB,UAAW+uB,GAAAA,2BACXiC,IAAKoT,EACLvV,MACG,oBAAmBgW,uCACVF,+BAAyCQ,SAGrDrZ,EAAAA,GAAAA,cAAA,aACAA,EAAAA,GAAAA,cAAA,OACE9rB,UAAW+uB,GAAAA,wBACXF,MAAQ,aAAY4V,uBAAgCQ,2BAC1BE,UAG1B,I,wCCvGV,SAAyK,uBAAzK,GAAoN,uBCyLpN,IAAe1Z,EAAAA,EAAAA,KA3I2B/5C,IAGpC,IAHqC,QACzCqF,EAAO,MAAE+f,EAAK,MAAEhH,EAAK,YAAEg2C,EAAW,UAAE9lC,EAAS,eAAE+lC,EAAc,QAAEvY,EAAO,iBAAEwY,EAAgB,UACxF16C,EAAS,YAAE26C,GACZv0D,EACC,MAAM,qBAAEw0D,IAAyB77C,EAAAA,EAAAA,MAC3B9T,GAAOk3C,EAAAA,GAAAA,KAEP0Y,GAAiBC,EAAAA,GAAAA,GAAarvD,GAC9BsvD,GAAe/X,EAAAA,GAAAA,IAASgY,EAAAA,EAAAA,IAAoBvvD,EAAS,cACrDwvD,GAAYC,EAAAA,EAAAA,IAAoBzvD,GAEhC0vD,GADkBC,EAAAA,GAAAA,GAAkB,CAACp7C,GAxBnB,MAyBoBA,GAErCq7C,EAAmBC,EAAiBC,IAAoBhX,EAAAA,GAAAA,KAEzDiX,GAAqBjW,EAAAA,EAAAA,KAAY,KACrCgW,IAEId,GACFA,EAAehvD,EAAQ7D,GACzB,GACC,CAAC2zD,EAAkBd,EAAgBhvD,EAAQ7D,KAExC6zD,GAAeC,EAAAA,EAAAA,IAA6BjwD,GAE5CkwD,GAA0BpW,EAAAA,EAAAA,KAAY,KACtCkW,GACFb,EAAqB,CAAE1tD,UAAWzB,EAAQ7D,GAAI69B,OAAQg2B,GACxD,GACC,CAACb,EAAsBa,EAAchwD,EAAQ7D,MAEzCg0D,EAAcC,EAAkBC,IAAsBvX,EAAAA,GAAAA,KAgB7D,OACE/D,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GACd,6BD/FiB,uBC+F0BsX,GAAe,aAAcjmC,KAGtElJ,EAAQ,GAAK2vC,IACb3a,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,UACLJ,MAAM,cACNwG,UAAW99C,EAAK,gCAChBi3C,QAAUiZ,OAAsCt0D,EAAnB6zD,GAE7Bla,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CACNC,MAAM,OACN7tB,WAAW2uB,EAAAA,GAAAA,GD5G6G,uBC6GtGI,IAAqB0X,GAAoB1X,MAG7DjD,EAAAA,GAAAA,cAAA,KACE9rB,WAAW2uB,EAAAA,GAAAA,GACT,gBAAiBI,GAAoB0X,GAAoB1X,OAKhEgX,GACCja,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,UACLJ,MAAM,cACNwG,UAAW99C,EAAK,0BAChBi3C,QAASoZ,GAET9a,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAGjB8rB,EAAAA,GAAAA,cAACub,GAAAA,EAAa,CACZzzD,OAAQ+yD,EACRpV,QAASsV,EACTzxD,KAAK,wCACLkyD,aAAa,QACbC,eAAgBT,IAElBhb,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GD1I2C,uBC0INuY,GD1I+N,wBC2I/Q1Z,QAASA,EACTE,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,GAE1B25C,EAAAA,GAAAA,cAAC0b,GAAuB,CACtB1wC,MAAOA,EACPhH,MAAOA,IAETg8B,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWh3C,EAAQ7D,GAAIwrC,KAAK,iBAAiB1e,UDlJ2b,wBC+E1f,SAAyBynC,EAAuB1kB,EAAkB2kB,GAChE,MAAM,MAAE/gD,EAAK,OAAEC,IAAW+gD,EAAAA,GAAAA,MACpBC,EAAS7kB,GAAW0kB,EAE1B,OACE3b,EAAAA,GAAAA,cAAA,OAAK9rB,UDpFshB,wBCqFxhBynC,IAAiBC,GACb5b,EAAAA,GAAAA,cAAA,OAAK9rB,UDtFyjB,uBCsFrhBivB,IAAK2Y,EAAQjhD,MAAOA,EAAOC,OAAQA,EAAQsoC,IAAI,KAC5FuY,GACI3b,EAAAA,GAAAA,cAAC+b,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWhvD,QAAQ4uD,GAAU/gD,MAAOA,EAAOC,OAAQA,IAGlG,CAwDSmhD,CACC5B,EACAE,EACAE,IAGJza,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GDzJ2E,uBCyJxCwX,GDzJ8S,yBC0J/Vra,EAAAA,GAAAA,cAAA,OAAK9rB,UD1JyX,uBC0JhW0tB,IAAI,SAC9BoY,GACAha,EAAAA,GAAAA,cAACkc,GAAAA,EAAe,CAAC5yD,KAAO,GAAEmB,EAAK,oBAAoBuZ,EAAQ,EAAK,KAAGgH,EAAQhH,GAAU,OAGtFg2C,IAAemC,EAAAA,GAAAA,GAAWnC,IAE7Bha,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWh3C,EAAQ7D,GAAIwrC,KAAK,sBAAsB1e,UDjK8P,wBCkK1T8rB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,OAAO1tB,UDlK+Y,wBCmK3Z8rB,EAAAA,GAAAA,cAACoc,GAAAA,EAAc,CAAC3xD,KAAMA,EAAMQ,QAASA,EAASoxD,QAASrvD,QAAQqtD,QAIrEra,EAAAA,GAAAA,cAACsc,GAAAA,EAAY,MACZrB,GACCjb,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLjuB,UD3Kmc,uBC4KncwtB,QAASyZ,EACToB,uBAAqB,EACrB7J,aAAe5gD,EAAAA,QAAkCzL,EAAnBg1D,EAC9B1I,aAAe7gD,EAAAA,QAAoCzL,EAArBi1D,GAE7BL,EAAa3xD,OAIhB,I,oDCpLV,MAAMkzD,GAAiB,IAEhB,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAkBl3D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YACnF,MAAMoU,EAAM4iD,aAAiBG,KAAOpuC,IAAIquC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIprC,SAASqrC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKA,EAAIliD,MAAQ8hD,EAAOI,EAAIjiD,OAAS6hD,EAAOC,GAC/CtgD,MAAM8gD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAO5uC,IAAIquC,gBAAgBM,EAAK,IAEjC9gD,KAAK2gD,GACLK,SAAQ,KACHZ,aAAiBG,MACnBpuC,IAAI8uC,gBAAgBzjD,EACtB,GACA,EAENijD,EAAI5Z,IAAMrpC,CAAG,GAEjB,CAyBAwF,eAAe69C,GACbJ,EAAuBliD,EAAeC,GAChB,IADgC8hD,EAAkBl3D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAG3E,KAAI,sBAAuBqD,QA6BzB,OAAOy0D,GAAaT,EAAKliD,EAAOC,OAAQzU,EAAWu2D,GA5BnD,IACE,MAAMa,QAAe10D,OAAO20D,kBAAkBX,EAC5C,CAAEY,YAAa9iD,EAAO+iD,aAAc9iD,EAAQ+iD,cAAe,SAC7D,GAAIJ,EAAO3iD,SAAWA,GAAU2iD,EAAO5iD,QAAUA,EAC/C,MAAM,IAAIwiD,MAAM,sCAElB,MAAMS,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAI5Z,KACzC6a,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OACzE,aAAa,IAAI5qC,SAASssC,IACxB,MAAMC,EAASzoD,SAAS0oD,cAAc,UACtCD,EAAOtjD,MAAQ4iD,EAAO5iD,MACtBsjD,EAAOrjD,OAAS2iD,EAAO3iD,OACvB,MAAMujD,EAAQF,EAAOG,WAAW,MAChCD,EAAME,UAAYP,EAClBK,EAAMG,SAAS,EAAG,EAAGL,EAAOtjD,MAAOsjD,EAAOrjD,QAC1C,MAAM2jD,EAAMN,EAAOG,WAAW,kBAC1BG,EACFA,EAAIC,wBAAwBjB,GAE5BY,EAAMM,UAAUlB,EAAQ,EAAG,GAE7BU,EAAOS,OAAOV,EAAKtB,EAAW,GAElC,CAAE,MAAOzlD,GAEP,OAAOqmD,GAAaT,EAAKliD,EAAOC,OAAQzU,EAAWu2D,EACrD,CAIJ,CAEAt9C,eAAek+C,GACbT,EAAuBliD,EAAeC,GAChB,IADgCgyB,EAAYpnC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAKk3D,EAAkBl3D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE/F,MAAMy4D,EAASzoD,SAAS0oD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MACxBO,EAAKnpD,SAAS0oD,cAAc,UAC5BU,EAAOD,EAAGP,WAAW,MAK3B,GAHAH,EAAOtjD,MAAQA,EACfsjD,EAAOrjD,OAASA,EAEZiiD,EAAIliD,MAAQiyB,EAAOjyB,EAAO,CAC5B,MAAMkkD,EAAM,EAAIjyB,EAChB,IAAIkyB,EAAM,CACRnkD,MAAO3H,KAAKI,MAAMypD,EAAIliD,MAAQiyB,GAC9BhyB,OAAQ5H,KAAKI,MAAMypD,EAAIjiD,OAASgyB,IAQlC,IALA+xB,EAAGhkD,MAAQmkD,EAAInkD,MACfgkD,EAAG/jD,OAASkkD,EAAIlkD,OAEhBgkD,EAAKH,UAAU5B,EAAK,EAAG,EAAGiC,EAAInkD,MAAOmkD,EAAIlkD,QAElCkkD,EAAInkD,MAAQiyB,EAAOjyB,GACxBmkD,EAAM,CACJnkD,MAAO3H,KAAKI,MAAM0rD,EAAInkD,MAAQiyB,GAC9BhyB,OAAQ5H,KAAKI,MAAM0rD,EAAIlkD,OAASgyB,IAElCgyB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAInkD,MAAQkkD,EAAKC,EAAIlkD,OAASikD,EAAK,EAAG,EAAGC,EAAInkD,MAAOmkD,EAAIlkD,QAGnF2jD,EAAIE,UAAUE,EAAI,EAAG,EAAGG,EAAInkD,MAAOmkD,EAAIlkD,OAAQ,EAAG,EAAGqjD,EAAOtjD,MAAOsjD,EAAOrjD,OAC5E,MACE2jD,EAAIE,UAAU5B,EAAK,EAAG,EAAGoB,EAAOtjD,MAAOsjD,EAAOrjD,QAGhD,MAAMgjD,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAI5Z,KACzC6a,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OAIzE,OAHAiC,EAAIF,UAAYP,EAChBS,EAAIQ,yBAA2B,mBAC/BR,EAAID,SAAS,EAAG,EAAGL,EAAOtjD,MAAOsjD,EAAOrjD,QACjC,IAAI8W,SAASqrC,IAClBkB,EAAOS,OAAO3B,EAASL,EAAW,GAEtC,C,6EC9GMsC,GAAkB,CAAErkD,MAAO,IAAKC,OAAQ,KACxCqkD,GAAe,I,4BCgCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuB/xD,OAAOC,KAAK6xD,IAAgBh0D,OAAOL,IAAI2C,QA2SpE,IAAe41C,EAAAA,EAAAA,KACb,CAAC99C,EAAMgd,KAA8B,IAA5B,QAAEvX,GAASuX,EAClB,MAAM9W,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAC9B1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQyF,EAAQhF,SAClC,OACJiI,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEG,IAC7BzH,EAAAA,EAAAA,IAAetB,GAAQ6I,YAE3B,MAAO,CACL3C,SACAnD,OACA2F,SACAC,eACAI,uBACAH,UACD,GAfL,EAtS+CxI,IAUzC,IAV0C,QAC9CqF,EAAO,UACPipB,EAAS,KACTorC,EAAI,OACJ5zD,EAAM,KACNnD,EAAI,OACJ2F,EAAM,aACNC,EAAY,qBACZI,EAAoB,QACpBH,GACDxI,EACC,MAAM,qBACJ25D,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBzxD,EAAY,iBACZkvB,IACE3e,EAAAA,EAAAA,MAGE2mC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bl5C,GAAOk3C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,OACf,MAAEmb,EAAK,MAAEv5C,EAAK,MAAE4wB,IAAUC,EAAAA,EAAAA,IAAkB/rC,GAC5C00D,EAAU3yD,QAAQmZ,GAAS4wB,GAC3B6oB,EAA6BD,IAAYD,GAAOG,UAAY,GAAKC,EAAAA,IACjEC,EAAar0D,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,QAAUrF,EACrD25D,EAAYhxB,GAAAA,IAA0BwrB,EAAAA,EAAAA,IAAoBvvD,EAAS,WACnEg1D,EDrEwBC,EAC9Bj1D,EAAqBS,EAA4BnD,KAEjD,MAAMkC,GAAOk3C,EAAAA,GAAAA,MAEP,MAAE+d,EAAK,MAAEv5C,IAAU6wB,EAAAA,EAAAA,IAAkB/rC,GACrCgL,EAAQypD,EAASA,EAAMzpD,OAASypD,EAAMS,SAAYh6C,EAAQ,gBAAkB,GAC5Ei6C,EAASV,GAAOW,WAAc30D,IAAUG,EAAAA,EAAAA,IAAepB,EAAMiB,GAC7D40D,EAAS/3D,IAAQ6V,EAAAA,EAAAA,GAAa3T,EAAMlC,IAAU,WAE9Cg4D,EAAkBb,IAASc,EAAAA,EAAAA,IAAiBd,KAAUlF,EAAAA,EAAAA,IAAoBvvD,EAAS,aACnFi0B,EAAaxzB,IAAU+0D,EAAAA,EAAAA,IAAkB/0D,EAAQ,OACjD6L,EAAQmoD,GAASa,GAAoBp6C,GAAS+Y,EAC9Cgc,GAAQsH,EAAAA,GAAAA,GAASjrC,GAEjB4qC,GAAOO,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsBgd,EAAkBv5C,EAAkBrM,GACxD,IAAKA,EAAK,OAAOolD,GACjB,GAAIQ,EAAO,CACT,IAAKA,EAAMgB,gBAAgB/6D,OAAQ,OACnC,MAAMg7D,EAAYjB,EAAMgB,eAAevvD,MAAMgxC,GAAuB,MAAdA,EAAK76C,OAC3D,OAAOq5D,GAAajB,EAAMgB,eAAe,EAC3C,CAEA,OAAIv6C,EACKy6C,GAAAA,QADT,CAKF,CAvCWC,CAAanB,EAAOv5C,EAAO+0B,IACjC,CAACwkB,EAAOxkB,EAAO/0B,KACV5a,OAAQuO,IAAQgnD,EAAAA,GAAAA,IAAS,IAanC,SAAyBhnD,EAAcqoC,GACrC,IAAKroC,EAAK,OAAO8X,QAAQqrC,QAAQ8D,IACjC,IAAK5e,EAAM,OD/BN,SACLua,EAAsB7hD,EAAeC,GACpB,IADoC8hD,EAAkBl3D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE1E,MAAMoU,EAAM4iD,aAAiBG,KAAOpuC,IAAIquC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIprC,SAASqrC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKliD,EAAOC,EAAQ8hD,GACvBtgD,MAAM8gD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAO5uC,IAAIquC,gBAAgBM,EAAK,IAEjC9gD,KAAK2gD,GACLK,SAAQ,KACHZ,aAAiBG,MACnBpuC,IAAI8uC,gBAAgBzjD,EACtB,GACA,EAENijD,EAAI5Z,IAAMrpC,CAAG,GAEjB,CCUoBknD,CAAYlnD,EAAKqlD,GAAcA,IACjD,MAAMzwB,EAAMx7B,KAAKw7B,IAAIyT,EAAKtnC,MAAOsnC,EAAKrnC,QACtC,OAAI4zB,EAAMywB,GAED1C,GAAW3iD,EADJqlD,GAAezwB,GAGxB9c,QAAQqrC,QAAQnjD,EACzB,CArBImnD,CAAgB/lB,EAAOiH,IACtB,CAACjH,EAAOiH,GAAO4e,IAClB,OAAOre,EAAAA,EAAAA,KAAQ,KACNwe,EAAAA,GAAAA,IAAmB,CACxBjrD,QACAmqD,SACAE,QACAa,QAAS,CAAC,CAAEhe,IAAKrpC,OAElB,CAACwmD,EAAOF,EAAQnqD,EAAO6D,GAAK,ECyCTomD,CAAwBj1D,EAASS,EAAQnD,IAEzD,UACJ64D,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpB54C,EAAO,OACP64C,EAAM,UACNC,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAY72D,IACZ82D,EAAAA,EAAAA,IAAiB92D,GACjB00D,EAAU,QAAU,QACpBK,OACA35D,EACA45D,OACA55D,GACA,OACAA,OACAA,GACA2pC,EAAAA,EAAAA,IAAe/kC,IACf,IAGI,kBACJ+2D,EAAiB,wBACjBC,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBnd,GAErBod,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B/2C,EAAa,CAAE/H,OAAQgF,EAAQhF,OAAQyG,UAAWzB,EAAQ7D,IAAK,GAC9D,CAAC4G,EAAc/C,EAAQhF,OAAQgF,EAAQ7D,KAEpCupD,GAAc5L,EAAAA,EAAAA,KAAY,KAC1Buc,GACFF,IAEFlkC,KACAqlC,EAAAA,GAAAA,MACAlB,GAAM,GACL,CAACnkC,EAAkBokC,EAAWF,EAAWC,IAEtCmB,GAAqBzd,EAAAA,EAAAA,KAAalY,IACtC0yB,EAAqB,CAAErxD,OAAQ2+B,EAAQ,MAEvC60B,EAAU70B,EAAQ,IAAI,GACrB,CAAC0yB,EAAsBmC,IAEpBe,GAAoB1d,EAAAA,EAAAA,KAAY,KAChCjzC,EAAAA,KAAiByT,EAAAA,KACrBo8C,IACAlC,EAAoB,CAAErxD,SAAUA,IAAU,GACzC,CAACA,EAASqxD,EAAqBkC,IAE5Be,GAAqB3d,EAAAA,EAAAA,KAAY,SAAC4d,GACtC,MAAMC,EAAOxD,GAAeuD,GACtBE,EA5FoB,IA4FHF,MAFwCj9D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,IAG/D85D,EAA2B,CAAErxD,aAAcy0D,EAAMr0D,qBAAsBs0D,IACvEjB,EAAgBiB,EAAiBD,EA9FP,EA+F5B,GAAG,CAACpD,EAA4BoC,IAE1BkB,GAAsB/d,EAAAA,EAAAA,KAAY,KACtCod,IACA,MAAMY,EAAUr1D,OAAOJ,OAAOsf,QAAQwyC,IAAgBjuD,MAAKiC,IAAA,IAAE,CAAEwvD,GAAKxvD,EAAA,OAAKwvD,IAASz0D,CAAY,MAAI,KAnGxE,EAqGpB60D,GAAez0D,EAErBm0D,EACEM,GAxGwB,IAwGTD,EAvGc,EAuGmDA,EAChFC,EACD,GACA,CAACb,EAAwB5zD,EAAsBJ,EAAcu0D,IAE1DO,GAAqBle,EAAAA,EAAAA,KAAY,KACrC,MAAMme,EAAc51D,OAAOsf,QAAQwyC,IAAgBjuD,MAAK4Q,IAAA,IAAE,CAAE6gD,GAAK7gD,EAAA,OAAK6gD,IAASz0D,CAAY,MAAI,IA9GrE,EAgHpB7E,EAAQ,GAhHY,IAgHV6E,EA/Ge,EA+GuD+0D,KACtF,OACEljB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,oBACZ8tC,GAAqBhiB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,oBAAoBwtB,QAASygB,IAElEniB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLoW,WAAW2uB,EAAAA,GAAAA,GACT,kBAAmBt0C,GAAwB,UAAWyzD,GAAqB,UAE7EjgB,MAAM,cACNI,KAAK,UACLoG,UAAU,gBACVpD,QAASb,EACToO,aAAcwP,EACdxgB,QAASohB,EACT7K,YAAagK,EACbkB,cAAejB,GAEfliB,EAAAA,GAAAA,cAAA,QAAM9rB,WAAW2uB,EAAAA,GAAAA,GACf,wBACgB,IAAhBv5C,EAAK3D,QAAgB,QACL,IAAhB2D,EAAK3D,QAAgB,SAGpB2D,IAGD,GAEP,CACD24D,EAAyBC,EAAmBC,EAAwBW,EAAqBd,EACzF1d,EAAU/1C,EAAsBJ,IAG5Bi1D,IAAa1gB,EAAAA,EAAAA,KAAQ,IACV,IAAXx0C,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAIkxD,EAIJ,OACEtf,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,cAAe3uB,GAAY0tB,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,EAAW6+C,IAAKA,GAClGlF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,sBAAsBwtB,QAAS4gB,GAC3C5C,EA+FT,SAAqBA,GACnB,MAAM,MAAEzpD,EAAK,UAAEoqD,EAAS,SAAEF,GAAaT,EAEvC,OACE1f,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,QAAQ0tB,IAAI,SAAQua,EAAAA,GAAAA,GAAWlmD,GAASkqD,IACtDE,GACCrgB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WAAW0tB,IAAI,SAAQua,EAAAA,GAAAA,GAAWkE,IAIzD,CA1GiBgD,CAAY3D,GA4G7B,SAAqB4D,EAAkBvD,GACrC,OACE/f,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,QAAQ0tB,IAAI,QAAQme,IAAc5D,EAAAA,GAAAA,GAAW4D,IAC5D/f,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WAAW0tB,IAAI,QAAQ0hB,GAG5C,CAnHsCC,CAAY94D,EAAK,eAAgBs1D,GAC/D/f,EAAAA,GAAAA,cAACsc,GAAAA,EAAY,OAGftc,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLjuB,UAAU,gBACVsvC,SAAU56C,IACV84B,QAAS8f,EACTjZ,UAAU,kBAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,wBAEf8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLjuB,WAAW2uB,EAAAA,GAAAA,GAAe,cAAe,gBAAiBye,EAAY,QAAU,QAChF5f,QAAS0f,EACT7Y,UAAW+Y,EAAY,cAAgB,cAEvCthB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEf8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLjuB,UAAU,gBACVsvC,SAAU/B,IACV/f,QAAS6f,EACThZ,UAAU,cAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,oBAGf8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBACb8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLoW,UAAU,8BACV6tB,MAAM,cACNI,KAAK,UACLoG,UAAU,SACV7G,QAAS+gB,EACTtd,QAASb,GAETtE,EAAAA,GAAAA,cAAA,KAAG9rB,UAAWkvC,OAGd79C,EAAAA,IACAy6B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBACf8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACb8rB,EAAAA,GAAAA,cAACyjB,GAAAA,EAAW,CAACC,MAAI,EAAC72B,MAAOz+B,EAAU,EAAa,IAATF,EAAc49C,SAAU0W,OAMtE5C,GACC5f,EAAAA,GAAAA,cAAC+K,GAAAA,EAAY,CACX4Y,UAAW3B,EACX7W,UAAU,QACV2F,UAAU,MACV58B,UAAU,qBACV82B,QAASiY,EACTxd,QAAS0c,EACTyB,OAAQxB,EACRyB,qBAAsB1B,GAErB9C,GAAqBt0D,KAAK63D,GA0CrC,SACEA,EAAckB,EAAqBpiB,EACnCnzC,GAEA,MAAMw1D,EAAcD,IAAgB1E,GAAewD,IAASr0D,GA1RhC,IA2RtBq0D,IAAmCr0D,EACzC,OACEyxC,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACP7N,IAAKimB,EAELlhB,QAASA,IAAMA,EAAQkhB,GACvBnY,KAAMsZ,EAAa,aAAU19D,EAC7B29D,WAAaD,OAAkD19D,EAArC25C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,sBAEtC0uC,EAAK,IAGZ,CA1DmBqB,CAA2BrB,EAAMz0D,EAAcu0D,EAAoBn0D,MAKhFyxC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLoW,UAAU,eACV6tB,MAAM,cACNI,KAAK,UACLT,QAASiP,EACTpI,UAAU,gBAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEX,I,2BCzRV,MAgJA,IAAeyrB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAA,IAAE,OAAEnN,GAAQmN,EAAA,MAAkB,CACnCuK,cAAenY,EAAOmY,cACtBpV,MAAMC,EAAAA,EAAAA,IAAWhD,EAAQS,GACzBmjB,MAAMgY,EAAAA,EAAAA,IAASn7B,IAAUojB,EAAAA,EAAAA,IAAW7jB,EAAQS,QAAUI,EACvD,GALiBi9C,EAhJ+B19C,IAE7C,IAF8C,OAClDK,EAAM,UAAEiuB,EAAS,KAAE3rB,EAAI,KAAE6gB,EAAI,SAAEpO,EAAQ,cAAE2C,GAC1C/X,EACC,MAAM,qBACJs+D,EAAoB,aACpBC,EAAY,WACZC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACEnmD,EAAAA,EAAAA,MAEE9T,GAAOk3C,EAAAA,GAAAA,MACNgjB,EAAsBC,EAAoBC,IAAuB9gB,EAAAA,GAAAA,MACjE+gB,EAAkBC,IAAuBnkB,EAAAA,EAAAA,KAAkB,IAC3DokB,EAAkBC,IAAuBrkB,EAAAA,EAAAA,KAAkB,IAC5D,WAAEzxB,GAAe5mB,GAAQ,CAAC,GAC1B,eACJ28D,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5CrqD,GAAY,CAAC,EACXsqD,EAAe/8D,IAAQg9D,EAAAA,EAAAA,IAAiBh9D,GAExCi9D,GAAmBzgB,EAAAA,EAAAA,KAAY,KACnCmf,EAAqB,CAAE9uD,OAAQnP,IAC3Bi/D,GACFT,EAAmB,CAAEr9D,GAAInB,GAC3B,GACC,CAACi+D,EAAsBgB,EAAgBT,EAAoBx+D,IAExDw/D,GAAqB1gB,EAAAA,EAAAA,KAAY,KACrC8f,IACAV,EAAa,CAAEuB,UAAWz/D,EAAQkpB,WAAYA,IAC1Cg2C,GAAiBL,GACnBV,EAAW,CAAEn+D,WAEX++D,GACFX,EAAW,CAAEp+D,UACf,GACC,CACDkpB,EAAYg1C,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkB7+D,IAGd0/D,GAAyB5gB,EAAAA,EAAAA,KAAY,KACzC2f,EAAoB,CAAEz+D,UAAS,GAC9B,CAACA,EAAQy+D,IAENkB,GAAuB7gB,EAAAA,EAAAA,KAAY,KACvC8f,IACAT,EAAW,CAAEn+D,WACTq/D,GACFf,EAAe,CAAEt+D,SAAQmP,OAAQuI,IACjC6mD,EAAc,CAAEv+D,SAAQikB,oBAAoB,KAE5Co6C,EAAa,CAAEr+D,UACjB,GACC,CACDA,EAAQ4+D,EAAqBlnD,EAAe4mD,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAKppD,EAIL,OACEglC,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,kBAAmB3uB,GAAY0tB,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,GACrF++D,GACCplB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL2jB,QAAM,EACN7S,OAAK,EACL7Q,KAAK,OACLjuB,UAAU,0BACVwtB,QAAS8jB,GAER/6D,EAAK,wBAGT46D,GACCrlB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACN8jB,QAAM,EACN7S,OAAK,EACL7Q,KAAK,OACLjuB,UAAU,0BACVwtB,QAASkjB,GAERn6D,EAAK,0BAGT06D,IAAkBE,GACjBrlB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACN8jB,QAAM,EACN7S,OAAK,EACL7Q,KAAK,OACLjuB,UAAU,0BACVwtB,QAASkjB,GAERn6D,EAAK,8BAGVu1C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqnC,QAAM,EACNhD,KAAK,OACLJ,MAAM,cACNL,QAASikB,EACTpd,UAAW99C,EAAK,UAEhBu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEf8rB,EAAAA,GAAAA,cAACub,GAAAA,EAAa,CACZzzD,OAAQ68D,EACRlf,QAASof,EACT5uD,MAAOxL,EAAK,iBAAkB2e,GAAOuR,EAAAA,EAAAA,IAAuBvR,IAAQhL,EAAAA,EAAAA,GAAa3T,EAAMlC,IACvFe,KAAM8f,EACF3e,EAAK,mCAAmC6kB,EAAAA,EAAAA,IAAgBlG,IACxD3e,EAAK,mCACTq7D,sBAAoB,EACpBtK,aAAc/wD,EAAK,SACnBgxD,eAAgBryC,EAAOq8C,EAAqBG,GAE3Cx8C,GACC42B,EAAAA,GAAAA,cAAC+lB,GAAAA,EAAQ,CACPpb,MAAOlgD,EAAK,kBACZmgD,QAASoa,EACTgB,QAASf,IAGZ77C,GAAQ+7C,GACPnlB,EAAAA,GAAAA,cAAC+lB,GAAAA,EAAQ,CACPpb,MAAOlgD,EAAK,cACZmgD,QAASka,EACTkB,QAASjB,KAIX,KCwSV,IAAeplB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAEW,IAFT,OACPnN,EAAM,SAAEC,EAAQ,gBAAEsE,EAAe,SAAE85C,GACpClxC,EACC,MAAM,kBACJyD,EAAiB,4BAAE61C,EAA2B,YAAEr+C,EAAW,aAAEyI,IAC3DhQ,EAAAA,EAAAA,IAAetB,IACb,aAAE43B,GAAiB53B,EACnB+C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAExBA,OAAQ+2B,EAAatwB,UAAWuwB,GAAmB5uB,EACrD43D,EAAejpC,GAAeC,GAChC/iB,EAAAA,EAAAA,IAAkB1U,EAAQw3B,EAAaC,QACvC52B,EAEJ,IAAIgqB,EACJ,GAAwB,WAApB7lB,EAA8B,CAChC,MAAMgvC,GAAYC,EAAAA,EAAAA,IAAgBj0C,EAAQS,EAAQC,GAClDmqB,EAAgBmpB,GAAW7zC,MAC7B,MAAO,GAAwB,cAApB6E,EAAiC,CAC1C,MAAMqiB,GAAemsB,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQC,GACxDmqB,EAAgBxD,GAAclnB,MAChC,MAAO,GAAwB,WAApB6E,GAAgCtE,IAAamB,EAAAA,GAAgB,CACtE,MAAMuG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GACpDmqB,EAAgBziB,GAAYyiB,eAAiB,CAC/C,CAEA,MAAM61C,EAAmC,WAApB17D,GAAgCtE,IAAamB,EAAAA,GAC5D8+D,EAAgB59D,IAAQ69D,EAAAA,EAAAA,IAAoB5gE,EAAQ+C,GACpD89D,EAAgBr5D,QAAQm5D,IAAiBG,EAAAA,EAAAA,IAAoB9gE,EAAQS,IACrEsgE,EAAcJ,IAAkBE,GAAiBr5D,SAAQw5D,EAAAA,EAAAA,IAA0BhhE,EAAQS,IAC3FwgE,EAAez5D,QACnBzE,IAAS29D,GAAgB39D,EAAKE,YAAai+D,EAAAA,EAAAA,IAAcn+D,KAASo+D,EAAAA,EAAAA,IAAiBp+D,KAAUA,EAAKkrC,aAE9FmzB,EAAwB55D,QAAQzE,GAAMkrC,aAAelrC,EAAKs+D,eAG1DzoB,EAAoB,CACxBxK,cAHmBE,EAAAA,EAAAA,IAAkBtuC,EAAQS,EAAQC,EAAU,gBAI/D2Q,oBACAiwD,oBAAoBp4D,EAAAA,EAAAA,IAAyBlJ,EAAQ8+C,GACrDyiB,oBAAoBC,EAAAA,EAAAA,IAAqBxhE,GACzCygE,eACA19D,OACA8nB,gBACA42C,gBAAgBC,EAAAA,EAAAA,IAAqB1hE,EAAQS,GAC7Cm3B,eACAsvB,8BACAya,qBAAsBj0D,KAAKC,IAAI,EAAG2D,EAAanR,OAAS,GACxD23B,gBAAiB93B,EAAO83B,gBACxBzC,UAAWr1B,EAAOq1B,UAClBusC,kBAAmBb,GAAeF,GAAiBI,GAAgBG,GAG/D9sB,GAAejvC,EAAAA,EAAAA,IAAmBrF,EAAQS,GAChD,GAAwB,WAApBuE,IAAiCsvC,EACnC,OAAOsE,EAKT,GAFA9wC,OAAO+5D,OAAOjpB,EAAO,CAAEtE,iBAEnB5zC,IAAamB,EAAAA,KAAmBkB,GAAME,QAAS,CACjD,MAAM6+D,GAAkB7hD,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,GAC3D+E,EAAUq8D,GAAkBptD,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQqhE,QAAmBjhE,EACjFkhE,EAAmBt8D,GAAUu8D,EAAAA,EAAAA,IAAsBhiE,EAAQyF,QAAW5E,EACtEuH,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD,MAAO,IACFk4C,EACHqpB,iBAAkBH,EAClBI,UAAU,EACVH,mBACAI,WAAY36D,QAAQY,GAAYwuB,iBAEpC,CAEA,MAAMqrC,GAAmBhuB,EAAAA,EAAAA,IAAgBj0C,EAAQS,EAAQC,GACzD,GAAIuhE,GAAkB9hE,OAAQ,CAC5B,MAAMiiE,EAAqB9tB,EAAa2tB,EAAiB,KACnD,SACJC,GACGE,IAAsB18D,EAAAA,EAAAA,IAA4B1F,EAAQoiE,EAAoB1hE,IAAc,CAAC,EAElG,MAAO,IACFk4C,EACHqpB,mBACAC,WAEJ,CAEA,OAAOtpB,CAAK,GA1FIkF,EA3W4B19C,IA4B1C,IA5B2C,OAC/CK,EAAM,SACNC,EAAQ,gBACRsE,EAAe,QACfq9D,EAAO,SACPvjB,EAAQ,iBACRmjB,EAAgB,aAChB3tB,EAAY,SACZ4tB,EAAQ,iBACRH,EAAgB,aAChB3zB,EAAY,mBACZmzB,EAAkB,kBAClBlwD,EAAiB,mBACjBiwD,EAAkB,aAClBb,EAAY,KACZ19D,EAAI,cACJ8nB,EAAa,WACbs3C,EAAU,eACVV,EAAc,aACd7pC,EAAY,kBACZgqC,EAAiB,4BACjB1a,EAA2B,qBAC3Bya,EAAoB,gBACpB7pC,EAAe,UACfzC,EAAS,wBACTitC,EAAuB,mBACvBC,EAAkB,qBAClBC,GACDpiE,EACC,MAAM,iBACJ4/B,EAAgB,WAChByiC,EAAU,aACVj6D,EAAY,SACZ3E,EAAQ,iBACR6+D,EAAgB,mBAChBC,EAAkB,iBAClBC,EAAgB,sBAChBlgE,IACEqW,EAAAA,EAAAA,MAEE9T,GAAOk3C,EAAAA,GAAAA,KACP0mB,GAAqB1kB,EAAAA,EAAAA,KAAO,IAC5B,SAAE2kB,IAAa/jB,EAAAA,EAAAA,MAGfgkB,GADuBC,EAAAA,GAAAA,GAAgBV,GACI,GAAE7hE,KAAUC,MAAe,EACtEuiE,GAAqBD,EAAAA,GAAAA,GAAgBT,GACrCT,EAAkBzhE,MAAM6iE,QAAQjB,GAAoBA,EAAiBc,GAAsBd,EAC3FkB,EAAgB7uB,GAAgBwtB,EAAkBxtB,EAAawtB,QAAmBjhE,EAClFuiE,EAAsB/iE,MAAM6iE,QAAQjB,GACtCA,EAAiB9hE,OAAU8hE,EAAmB,OAAIphE,EAChDwiE,EAAkBtgE,IAAQ6V,EAAAA,EAAAA,GAAa3T,EAAMlC,GAAM5C,OACnDmjE,EAAkBvB,GAAmB17D,EAAAA,EAAAA,IAAepB,EAAM88D,QAAoBlhE,GAC9E,SAAE2U,GAAazS,GAAQ,CAAC,EACxBE,EAAUF,GAAME,SAEtB22C,EAAAA,EAAAA,KAAU,KACJhiB,GAAgByqC,IAAY3hE,IAAamB,EAAAA,IAAkBoB,IAC7D0/D,EAAmB,CAAEliE,SAAQC,YAC/B,GACC,CAACD,EAAQkiE,EAAoB/qC,EAAcl3B,EAAU2hE,EAASp/D,KAEjEsgE,EAAAA,GAAAA,GAAiB9iE,EAAQqhE,EAAiBqB,GAE1C,MAAQ9tD,MAAO0zB,KAAgBy6B,EAAAA,GAAAA,KAEzBC,GAAuB16B,IAAeI,EAAAA,IACtCu6B,GAAwBZ,GAAYzxD,EAGpCsyD,IAAexlB,EAAAA,EAAAA,IAAuB,MACtCylB,IAAqBzlB,EAAAA,EAAAA,KAAgB,GAErC0lB,IAAoBtkB,EAAAA,EAAAA,KAAY,KACpCvf,EAAiB,CAAEp+B,GAAInB,EAAQC,YAAW,GACzC,CAACs/B,EAAkBv/B,EAAQC,IAExB80D,IAAqBjW,EAAAA,EAAAA,KAAar4C,IACtCu7D,EAAW,CAAEv7D,YAAWod,SAAS,GAAO,GACvC,CAACm+C,IAEEqB,IAA2BvkB,EAAAA,EAAAA,KAAY,KACtC4jB,GAEDX,EAAqBW,EAAcvhE,KACrC4G,EAAa,CACX/H,OAAQ0iE,EAAc1iE,OAAQC,WAAUwG,UAAWi8D,EAAcvhE,GAAIK,mBAAmB,GAE5F,GACC,CAACkhE,EAAeziE,EAAU8hE,IAEvBuB,IAAuBxkB,EAAAA,EAAAA,KAAY,KACvC17C,EAAS,CAAEjC,GAAInB,EAAQC,WAAUoB,KAAM,UAAW,GACjD,CAAC+B,EAAUpD,EAAQC,IAEhBsjE,IAAsBzkB,EAAAA,EAAAA,KAAY,KACtCj2C,YAAW,KACTu5D,EAAmBj0C,SAAU,CAAI,GArIL,IAsID,GAC5B,IAEGq1C,IAAkB1kB,EAAAA,EAAAA,KAAa5tC,IACnC,GAAKkxD,EAAmBj0C,QAAxB,CAIA,GADAi0C,EAAmBj0C,SAAU,EACzBkwB,EAAU,CACZ,MAAMolB,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KAC5DD,GAAcvnC,MAChB,CAEA,GAAI4kC,EAGF,OAFA7+D,SACAshE,KAIF,GAAwB,WAApBh/D,GAAyD,IAAzB28D,EAUlC,OATKmB,GAAYY,IACf/xD,EAAE2wC,kBACFz+C,EAAS,CAAEjC,QAAIf,GAAa,CAAE6J,uBAAuB,KAErDk4D,SAGFoB,KAKFtB,IACAsB,IA7BuC,CA6BlB,GACpB,CACDllB,EAAUyiB,EAAoBv8D,EAAiB28D,EAAsBqC,GAAqBlB,EAC1FY,KAGIU,GACJr7B,IAAeI,EAAAA,KACZJ,GAAcs7B,EAAAA,KAEjBt7B,GAAcu7B,EAAAA,KACXv7B,GAAcI,EAAAA,OACZk6B,GAAmBA,EAAkB,IAEtCkB,GAA6BH,IACjCr7B,GAAcE,EAAAA,KACXF,GAAcy7B,EAAAA,IAGbC,GAAkBj9D,QAAQgO,GAAUoqD,eAAiBpqD,GAAUqqD,iBAAmBrqD,GAAUmqD,gBAEhGpW,aAAcmb,GACdjb,qBAAsBkb,KACpBjb,EAAAA,GAAAA,GAAkB+a,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBjvD,OAAW3U,GAAW,IAGrF0oD,aAAcub,GACdrb,qBAAsBsb,KACpBrb,EAAAA,GAAAA,GAAkBliD,QAAQi5D,IAExBuE,IAAwBH,EAAAA,GAAAA,GAAiBpE,GAAc,IAG3DlX,aAAc0b,GACdxb,qBAAsByb,KACpBxb,EAAAA,GAAAA,GAAkBliD,QAAQ27D,IAExBgC,IAAyBN,EAAAA,GAAAA,GAAiB1B,GAAe,GACzDiC,IAA+BP,EAAAA,GAAAA,GAAiBzB,GAAqB,GACrEiC,IAAoBR,EAAAA,GAAAA,GAAiB3C,GAAU,GAC/CoD,IAA8BT,EAAAA,GAAAA,GAAiBvB,GAE/CiC,IAAoBC,EAAAA,GAAAA,GAAY7D,GAChCrU,QACkBzsD,IAAtB0kE,IAAmCA,GAAoB5D,EAAuB4D,QAAoB1kE,EAG9F4kE,GAAkBR,IAA6BE,IAC/CL,IAA2BE,IAGjCprB,EAAAA,EAAAA,KAAU,KACR,MAAM8rB,EAAc/B,GAAa/0C,QACjC,GAAK82C,EAIL,OAAKnB,IAA+BkB,QAMhCnE,GAAsB8C,IACpBR,GAAmBh1C,UACrB82C,EAAYhiB,UAAU/gB,IAAI,gBAAiB,YAC3CihC,GAAmBh1C,SAAU,GAI/BtlB,YAAW,KACTo8D,EAAYhiB,UAAU+N,OAAO,WAAW,GAhPrB,OAmPrBiU,EAAYhiB,UAAU+N,OAAO,iBAC7BmS,GAAmBh1C,SAAU,KAjB7B82C,EAAYhiB,UAAU+N,OAAO,gBAAiB,iBAC9CmS,GAAmBh1C,SAAU,GAiB/B,GACC,CAAC21C,GAA4BkB,GAAgBrB,GAA6B9C,IAE7E,MAAM,qBAAErlB,IAAyBlB,GAAoB91C,EAAM6yB,EAAiBzC,GAAW,GAiEvF,SAASswC,KAA6D,IAA5CC,EAAO1lE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAU2lE,EAAiB3lE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAC1D,OACEs6C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eACb8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,UACLJ,MAAM,cACNL,QAAS+nB,GACTlhB,UAAW99C,EAAK2gE,EAAU,QAAU,SAEpCprB,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,uBAAwBuoB,GAAW,iBAEnEC,GAAqBrrB,EAAAA,GAAAA,cAACsrB,GAAa,MAG1C,CAEA,MAAMC,GAAwBv+D,QAAQs9D,IAA2BE,IAC3DgB,GAA4BD,KAC3BjnB,GAAY8iB,GAAqB74B,GAAck9B,EAAAA,IAEtD,OACEzrB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAegxB,IAAKikB,IACjCnpB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAM8Z,EAA8B,OAAS,aAC7CzK,UAAWklB,EACXtU,eAAa,EACbC,oBAAqBA,IAzFD,WAApBtoD,GACEtE,IAAamB,EAAAA,KAAkBkB,GAAME,QAMzCu3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGmrB,KACDnrB,EAAAA,GAAAA,cAAA,eACqB35C,IAAlBgqB,EACqB,WAApB7lB,EACEC,EAAKk9D,EAAa,gBAAkB,UAAWt3C,EAAe,KACxC,WAApB7lB,EAAgCC,EAAK,sBAAuB4lB,EAAe,KACrD,cAApB7lB,EACAy8D,EAAiBx8D,EAAK,aAAeA,EAAK,WAAY4lB,EAAe,UACnEhqB,EACNoE,EAAK,aAQbu1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACIipB,IAAwB9B,EAAuB,IAAMgE,GAAiBjC,IAAuB,GAC/FlpB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,oBAAoBwtB,QAAS2nB,KACzCjoC,EAAAA,EAAAA,IAASn7B,GACR+5C,EAAAA,GAAAA,cAAC0rB,GAAAA,EAAe,CACd/uB,IAAK12C,EACLmP,OAAQnP,EACR2tC,aAAcA,EACdn1B,OAAQgjC,GACRkqB,SAAU3+D,QAAQy0C,IAClBmqB,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClBC,gBAAiBlE,EACjBmE,gBAhSY,GAiSZC,OAAK,IAGPjsB,EAAAA,GAAAA,cAACksB,GAAAA,EAAa,CACZvvB,IAAK12C,EACLA,OAAQA,EACRC,SAAUA,EACV0tC,aAAcA,EACdn1B,OAAQgjC,GACRkqB,SAAU3+D,QAAQy0C,IAClBoqB,gBAAiB3lE,IAAamB,EAAAA,GAC9BukE,aAAc1lE,IAAamB,EAAAA,GAC3BykE,oBAAkB,EAClBC,gBAAiBlE,EACjBoE,OAAK,OAwCZ/lE,IAAamB,EAAAA,KAAmBkB,GAAME,SACrCu3C,EAAAA,GAAAA,cAACmsB,GAAAA,EAAgB,CACfC,gBACG3B,IAA6Bz9D,QAAQ29D,KACpCL,IAA2Bt9D,QAAQw9D,IAEvCvkE,OAAQA,IAIXwkE,IAA6BE,IAC5B3qB,EAAAA,GAAAA,cAACqsB,GAAmB,CAClB1vB,IAAK12C,EACLgF,QAAS0/D,GACT3/C,MAAO4/C,IAAgC,EACvC5mD,MAAOukD,EACPvO,YAAa8Q,GACb52C,UAAWw2C,GACXzQ,eAAgB4Q,GAAoB7P,QAAqB30D,EACzDq7C,QAAS4nB,GACTpP,iBAAkBqP,GAClB/pD,eAAkCnZ,IAAvBoiE,EACXtO,YAAaqR,KAIhBtB,IACClqB,EAAAA,GAAAA,cAACssB,GAAe,CACd3vB,IAAK12C,EACLA,OAAQA,EACR+U,SAAUovD,GACVl2C,UAAWi2C,KAIfnqB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACZq3C,IACCvrB,EAAAA,GAAAA,cAACusB,GAAW,CACV5vB,KAAK6vB,EAAAA,EAAAA,IAAchC,IACnBv/D,QAASu/D,GACTt2C,UAAWq2C,KAGfvqB,EAAAA,GAAAA,cAACysB,GAAAA,EAAa,CACZxmE,OAAQA,EACRC,SAAUA,EACVsE,gBAAiBA,EACjB85C,SAAUA,EACVooB,kBAAmBnB,MAGnB,KCxcJoB,GAAyB,IAQxB,SAASC,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GAAchiE,EAAwB+sC,GACpD,IAMIk1B,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAcpiE,EAAS,GAAG4H,KAC1By6D,UAAUC,EAAAA,GAAAA,IAAiC,IAAnBtiE,EAAS,GAAG4H,MACpC26D,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DAniE,EAASoG,SAAQ,CAACjG,EAAS+Y,KACrB/Y,EAAQklC,UACL48B,GAOHA,EAAajiE,SAASc,KAAKX,GACvBA,EAAQ2H,QAAQtJ,OAClByjE,EAAaQ,YAActiE,IAR7B8hE,EAAe,CACbS,QAASviE,EAAQoE,UACjBvE,SAAU,CAACG,GACXsiE,YAAatiE,GASjB+hE,EAAmBphE,KAAKX,GAG1B,MAAMwiE,EAAc3iE,EAASkZ,EAAQ,GASrC,IANE+oD,GACKU,GAAgBA,EAAYp+D,WAAao+D,EAAYp+D,YAAc09D,EAAaS,UAErFR,EAAmBphE,KAAKmhE,GACxBA,OAAe1mE,GAEbonE,EAAa,CACf,MAAMC,GAAyBN,EAAAA,GAAAA,IAAiC,IAAnBK,EAAY/6D,MACrDu6D,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAY/6D,KAC1By6D,SAAUO,EACVL,aAAc,IAEhBC,EAAW1hE,KAAKqhE,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAazhE,KAAKohE,KAEnCS,EAAYrmE,KAAOywC,GAChB5sC,EAAQoP,WAAaozD,EAAYpzD,UACjCpP,EAAQ6H,aAAe26D,EAAY36D,aACnC66D,EAAAA,EAAAA,IAAgB1iE,KAChB0iE,EAAAA,EAAAA,IAAgBF,IAEjBxiE,EAAQ2iE,aAAeH,EAAYG,cAEjC3iE,EAAQ2iE,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1D5iE,EAAQ2iE,YAAYt9D,aAAem9D,EAAYG,YAAYt9D,YAC3DrF,EAAQ2iE,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnE7iE,EAAQ8iE,eACRN,EAAYM,eACXN,EAAY/6D,KAAOzH,EAAQyH,KAAQi6D,MAEvCK,EAAqB,GACrBC,EAAiBI,aAAazhE,KAAKohE,GAEvC,KAGKM,CACT,C,oDCzFA,MAAMU,GAAW,IACXC,GAAa,GACbC,GAAwB,G,gBCL9B,MCUA,GAVoCC,CAClCzsD,EAAqC0sD,EAAiBC,KAEtD,MAAMC,GAAWtD,EAAAA,GAAAA,GAAeoD,GAChC,OAAOlX,EAAAA,EAAAA,KAAgB,IACdx1C,EAAG4sD,GAAY,KAErBF,EAAcC,EAAS,E,2BCG5B,MCDME,GAAkC5sC,EAAAA,GAAa,IAAO,ICD/C6sC,GAAgC,GAAKxgC,GAAAA,GACrCygC,GAA4B,GAAKzgC,GAAAA,GACxC0gC,GAAyC,GAAK1gC,GAAAA,GAC9C2gC,GAAkB,EAAI3gC,GAAAA,GACf4gC,GAAmB,EAAI5gC,GAAAA,GAC9B6gC,GAAwB,GAEvB,SAASC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EAAmBN,GAAyCD,GAC5DO,EAAmBR,GAAgCG,EAC1D,CAEO,SAASM,GACdhkE,EAAqBikE,EAAuBC,EAAqB7qB,GAEjE,MAAM8qB,GAAQC,EAAAA,EAAAA,IAAapkE,GACrBwyB,GAAQ6xC,EAAAA,EAAAA,IAAgBrkE,KAAYskE,EAAAA,EAAAA,IAAuBtkE,GAC3D8rC,GAAQy4B,EAAAA,EAAAA,IAAgBvkE,GAExBwkE,EAAiBziE,SAAQuiE,EAAAA,EAAAA,IAAuBtkE,IAChDykE,EAAiB1iE,SAAQ2iE,EAAAA,EAAAA,IAAuB1kE,KAChD,MAAE4P,EAAK,OAAEC,GAAW2iB,GACtBmyC,EAAAA,GAAAA,IAA+BnyC,EAAO2xC,EAAOF,EAAaO,EAAgBN,EAAW7qB,IACrFurB,EAAAA,GAAAA,IAAyB94B,EAAQq4B,EAAOF,EAAaQ,EAAgBP,EAAW7qB,GAG9EwrB,EAAgBhB,GADN9hE,SAAQ+rC,EAAAA,EAAAA,IAAe9tC,KAGvC,IAAI8kE,EAAgB,EAChBl1D,EAAQi1D,GAAiBA,EAAgBj1D,EAAQg0D,KACnDkB,EAAgBD,EAAgBj1D,GAE9BC,EAASi1D,EAAgBnB,IAAoBA,GAAmB9zD,EAASi1D,EAAgBlB,KAC3FkB,EAAgBnB,GAAmB9zD,GAGrC,MAAMk1D,EAAa98D,KAAK4K,MAAMjD,EAAQk1D,GAChCE,EAAc/8D,KAAK4K,MAAMhD,EAASi1D,GAExC,MAAO,CACLl1D,MAAOm1D,EACPl1D,OAAQm1D,EACRC,QAASF,EAAaF,GAAiBG,EAAcrB,GAEzD,CC5CO,MAAMuB,GAAgB,CAC3BC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAiDR,SAASC,GAAWC,EAAgBC,GAClC,OAAOD,EAAKllE,QAAO,CAAColE,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAM9tB,EAAwB,CAAEpoC,MAAO,EAAGC,OAAQ,GAalD,OAZAi2D,EAAO7/D,SAAQtL,IAGT,IAHU,WACdorE,EAAU,MACVC,GACDrrE,EACKqrE,EAAQd,GAAcG,QACxBrtB,EAAOpoC,MAAQm2D,EAAWn2D,MAAQm2D,EAAW1iC,GAE3C2iC,EAAQd,GAAcI,SACxBttB,EAAOnoC,OAASk2D,EAAWl2D,OAASk2D,EAAW5hC,EACjD,IAGK6T,CACT,CAEO,SAASiuB,GACd9B,EACAF,EACAC,EACA7O,EACAhc,GAEA,MACM6sB,EArDR,SAAmBrmE,EAAwBw5C,GACzC,OAAOx5C,EAASC,KACbE,IACC,MAAM+lE,EAAa/B,GAAyBhkE,OAAS5E,OAAWA,EAAWi+C,GAE3E,OAAO0sB,EAAWn2D,MAAQm2D,EAAWl2D,MAAM,GAGjD,CA6CiBs2D,CAAU9Q,EAAMx1D,SAAUw5C,GACnC+sB,EA5CR,SAAwBF,GACtB,OAAOA,EAAOpmE,KAAK4xD,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOzwD,KAAK,GACrF,CA0CsBolE,CAAeH,GAC7BI,EAzCR,SAAyBJ,GACvB,OAAOA,EAAO3lE,QAAO,CAACD,EAAQoxD,IAAUA,EAAQpxD,GAAQ,GAAK4lE,EAAOxrE,MACtE,CAuCuB6rE,CAAgBL,GAC/BM,EAAaN,EAAOxrE,OACpB+rE,EAAYP,EAAO3gC,MAAMmsB,GAAUA,EAAQ,IAC3CgV,GAAWC,EAAAA,GAAAA,IAAkBxC,EAAOF,GAAa,EAAOC,EAAW7qB,IAAa4qB,EAAc,IAAM,GAAKlhC,GAAAA,GAG/G,IAAI+iC,EAEJ,MAAMrsD,EAAS,CACbysD,SACAE,cACAE,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEhB,EADEU,GAAc,GAAKC,EAgBzB,SAAkCt+D,GAOhB,IANhB+9D,OAAQa,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,GACfv+D,EACd,MAAM+9D,EA3ER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAOpmE,KAAK4xD,GACT4U,EAAe,KAAMU,EAAAA,GAAAA,IAAMtV,EAAO,EAAG,OAAQsV,EAAAA,GAAAA,IAAMtV,EAAO,MAAQ,IAE9E,CAuEiBuV,CAAWF,EAAgBT,GACpCvmD,EAAQgnD,EAAersE,OACvB4F,EAAS,IAAI1F,MAAMmlB,GACnBmnD,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAIv9D,EAAS,EACbs9D,EAAWnhE,SAASqhE,IAClBD,EAAQ1mE,KAXQ4mE,EAACz9D,EAAgB09D,KACnC,MACMC,EAAMjC,GADUU,EAAO7+D,MAAMyC,EAAQA,EAAS09D,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAYz9D,EAAQw9D,IACjCx9D,GAAUw9D,CAAY,IAGxBJ,EAASvmE,KAAK,CACZymE,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAU3nD,IAAS2nD,EAAO,CAC5C,MAAMC,EAAS5nD,EAAQ2nD,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAU3nD,EAAQ,IAAK2nD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW5nD,EAAQ2nD,IAASC,EAAQ,CACvD,MAAMC,EAAQ7nD,EAAQ2nD,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAU3nD,EAAQ,IAAK2nD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW5nD,EAAQ2nD,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU7nD,EAAQ2nD,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS9nD,EAAQ2nD,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAI/uD,EAAI,EAAGA,EAAIkuD,EAASxsE,OAAQse,IAAK,CACxC,MAAM,QACJquD,EAAO,WACPD,GACEF,EAASluD,GACPgvD,EAAYZ,EAAW1sE,OACvButE,EAAczC,GAAW6B,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgBjgE,KAAKw7B,OAAO4jC,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAOpgE,KAAKqgE,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASluD,GAC1B+uD,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAc7tE,OAC/B,IAAIqe,EAAQ,EACRorB,EAAI,EACR,IAAK,IAAIukC,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5B74D,EAAS5H,KAAK4K,MAAM+1D,GAC1B,IAAIvlC,EAAI,EAER,IAAK,IAAIwlC,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAAQd,GAAcC,MACf,IAARuD,EAAYxD,GAAcE,IAAMF,GAAcC,OAC9CuD,IAAQD,EAAW,EAAIvD,GAAcI,OAASJ,GAAcC,OACpD,IAAR0D,EAAY3D,GAAcK,KAAOL,GAAcC,OAC/C0D,IAAQF,EAAW,EAAIzD,GAAcG,MAAQH,GAAcC,MAC1DzT,EAAQwU,EAAOntD,GACfnJ,EAAQi5D,IAAQF,EAAW,EAAIjC,EAAWrjC,EAAIp7B,KAAK4K,MAAM6+C,EAAQkX,GACvEtoE,EAAOyY,GAAS,CACdgtD,WAAY,CACV1iC,IACAc,IACAv0B,QACAC,UAEFm2D,SAEF3iC,GAAKzzB,EAAQk3D,IACX/tD,CACJ,CACAorB,GAAKt0B,EAASi3D,CAChB,CAEA,OAAOxmE,CACT,CA3IawoE,CAA0BrvD,GACX,IAAf+sD,EA4Ib,SAAmB/sD,GACjB,MAAM,OACJysD,EAAM,YACNE,EAAW,aACXE,GACE7sD,EACJ,MAAuB,OAAhB2sD,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4BzsD,GAC1B,MAAM,OACJysD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACEptD,EACE5J,EAAS5H,KAAK4K,MAAM5K,KAAKw7B,IAAIijC,EAAWR,EAAO,GAAIj+D,KAAKw7B,IAAIijC,EAAWR,EAAO,IAAKW,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNf,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAO82D,EACP72D,UAEFm2D,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV1iC,EAAG,EACHc,EAAGt0B,EAASi3D,EACZl3D,MAAO82D,EACP72D,UAEFm2D,MAAOd,GAAcK,KAAOL,GAAcI,OAASJ,GAAcG,OAErE,CAhCM0D,CAAmBtvD,GACH,OAAhB2sD,GAAwC,OAAhBA,EAiC9B,SAAiC3sD,GAC/B,MAAM,OACJysD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACEptD,EACE7J,GAAS82D,EAAWI,GAAW,EAC/Bj3D,EAAS5H,KAAK4K,MAAM5K,KAAKw7B,IAAI7zB,EAAQs2D,EAAO,GAAIj+D,KAAKw7B,IAAI7zB,EAAQs2D,EAAO,GAAIW,KAClF,MAAO,CAAC,CACNd,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,QACAC,UAEFm2D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV1iC,EAAGzzB,EAAQk3D,EACX3iC,EAAG,EACHv0B,QACAC,UAEFm2D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CA1DQ0D,CAAwBvvD,GA4DhC,SAA4BA,GAC1B,MAAM,OACJysD,EAAM,SACNU,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACEptD,EACEwvD,EAAehhE,KAAK4K,MAAM,IAAM+zD,GAChCsC,EAAcjhE,KAAKw7B,IACvBx7B,KAAK4K,MACH5K,KAAKC,IACH,IAAOw+D,EAAWI,IACjBJ,EAAWI,GAAWZ,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWI,EAAUmC,GAEjBE,EAAazC,EAAWwC,EAAcpC,EACtCj3D,EAAS5H,KAAKw7B,IAAIojC,EAAW5+D,KAAK4K,MAAM5K,KAAKw7B,IAAI0lC,EAAajD,EAAO,GAAIgD,EAAchD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAOu5D,EACPt5D,UAEFm2D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV1iC,EAAG8lC,EAAarC,EAChB3iC,EAAG,EACHv0B,MAAOs5D,EACPr5D,UAEFm2D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CAjGQ8D,CAAmB3vD,EAC3B,CAtJa4vD,CAAU5vD,GACK,IAAf+sD,EAuPb,SAAqB/sD,GACnB,MAAM,YAAE2sD,GAAgB3sD,EAExB,MAA0B,MAAnB2sD,EAAY,GAKrB,SAAiC3sD,GAC/B,MAAM,UACJotD,EAAS,QACTC,EAAO,OACPZ,EAAM,SACNQ,EAAQ,SACRE,GACEntD,EACE6vD,EAAczC,EACd0C,EAActhE,KAAK4K,MACvB5K,KAAKw7B,KACFojC,EAAYC,GAAW,EACvBZ,EAAO,IAAMQ,EAAWI,IAAaZ,EAAO,GAAKA,EAAO,MAGvDsD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAaxhE,KAAKC,IACtB0+D,EACA3+D,KAAK4K,MACH5K,KAAKw7B,KACFijC,EAAWI,GAAW,EACvB7+D,KAAKw7B,IACH8lC,EAAcrD,EAAO,GACrBsD,EAAetD,EAAO,OAKxBwD,EAAYzhE,KAAKw7B,IAAIx7B,KAAK4K,MAAMy2D,EAAcpD,EAAO,IAAKQ,EAAWI,EAAU2C,GAErF,MAAO,CAAC,CACN1D,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAO85D,EACP75D,OAAQy5D,GAEVtD,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV1iC,EAAGqmC,EAAY5C,EACf3iC,EAAG,EACHv0B,MAAO65D,EACP55D,OAAQ25D,GAEVxD,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACV1iC,EAAGqmC,EAAY5C,EACf3iC,EAAGqlC,EAAe1C,EAClBl3D,MAAO65D,EACP55D,OAAQ05D,GAEVvD,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CA3DMsE,CAAwBlwD,GA6D9B,SAAgCA,GAC9B,MAAM,SACJitD,EAAQ,OACRR,EAAM,UACNW,EAAS,QACTC,GACErtD,EACE0vD,EAAazC,EACb4C,EAAcrhE,KAAK4K,MAAM5K,KAAKw7B,IAAI0lC,EAAajD,EAAO,GAAI,KAAQW,EAAYC,KAC9EoC,GAAexC,EAAWI,GAAW,EACrC0C,EAAevhE,KAAKw7B,IACxBojC,EAAYyC,EAAcxC,EAC1B7+D,KAAK4K,MAAM5K,KAAKw7B,IACdylC,EAAchD,EAAO,GACrBgD,EAAchD,EAAO,MAGnB0D,EAAaT,EAAaD,EAAcpC,EAE9C,MAAO,CAAC,CACNf,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAOu5D,EACPt5D,OAAQy5D,GAEVtD,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV1iC,EAAG,EACHc,EAAGmlC,EAAcxC,EACjBl3D,MAAOs5D,EACPr5D,OAAQ25D,GAEVxD,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACV1iC,EAAG6lC,EAAcpC,EACjB3iC,EAAGmlC,EAAcxC,EACjBl3D,MAAOg6D,EACP/5D,OAAQ25D,GAEVxD,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CAxGMwE,CAAuBpwD,EAC7B,CA5PaqwD,CAAYrwD,GAqWzB,SAAoBA,GAClB,MAAM,YAAE2sD,GAAgB3sD,EAExB,MAA0B,MAAnB2sD,EAAY,GAKrB,SAA8BtvD,GAMZ,IANa,SAC7B4vD,EAAQ,OACRR,EAAM,QACNY,EAAO,UACPD,EAAS,SACTD,GACc9vD,EACd,MAAMizD,EAAIrD,EACJsD,EAAK/hE,KAAK4K,MAAM5K,KAAKw7B,IAAIsmC,EAAI7D,EAAO,GAAI,KAAQW,EAAYC,KAC5DmD,EAAIhiE,KAAK4K,OAAO6zD,EAAW,EAAII,IAAYZ,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAKjiE,KAAKC,IAAI0+D,EAAU3+D,KAAK4K,MAAM5K,KAAKw7B,IAAI,IAAOijC,EAAW,EAAII,GAAUmD,EAAI/D,EAAO,MACvFiE,EAAKliE,KAAK4K,MAAM5K,KAAKC,IAAID,KAAKC,IAAI0+D,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAKpiE,KAAKw7B,IAAIojC,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAOm6D,EACPl6D,OAAQm6D,GAEVhE,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV1iC,EAAG,EACHc,EAAG6lC,EAAKlD,EACRl3D,MAAOs6D,EACPr6D,OAAQw6D,GAEVrE,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACV1iC,EAAG6mC,EAAKpD,EACR3iC,EAAG6lC,EAAKlD,EACRl3D,MAAOw6D,EACPv6D,OAAQw6D,GAEVrE,MAAOd,GAAcI,QACpB,CACDS,WAAY,CACV1iC,EAAG6mC,EAAKpD,EAAUsD,EAAKtD,EACvB3iC,EAAG6lC,EAAKlD,EACRl3D,MAAOu6D,EACPt6D,OAAQw6D,GAEVrE,MAAOd,GAAcG,MAAQH,GAAcI,QAE/C,CApDMgF,CAAsB7wD,GAsD5B,SAA+BlC,GAMb,IANc,UAC9BsvD,EAAS,OACTX,EAAM,SACNQ,EAAQ,QACRI,EAAO,SACPF,GACcrvD,EACd,MAAM0yD,EAAIpD,EACJqD,EAAKjiE,KAAK4K,MAAM5K,KAAKw7B,IAAIwmC,EAAI/D,EAAO,GAAI,IAAOQ,EAAWI,KAC1DiD,EAAI9hE,KAAK4K,OAAOg0D,EAAY,EAAIC,IAAY,EAAIZ,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAK/hE,KAAK4K,MAAMk3D,EAAI7D,EAAO,IAC3BmE,EAAKpiE,KAAK4K,MAAMk3D,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAKniE,KAAKC,IAAI0+D,EAAU3+D,KAAKw7B,IAAIijC,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACV1iC,EAAG,EACHc,EAAG,EACHv0B,MAAOs6D,EACPr6D,OAAQo6D,GAEVjE,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV1iC,EAAG6mC,EAAKpD,EACR3iC,EAAG,EACHv0B,MAAOw6D,EACPv6D,OAAQm6D,GAEVhE,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACV1iC,EAAG6mC,EAAKpD,EACR3iC,EAAG6lC,EAAKlD,EACRl3D,MAAOw6D,EACPv6D,OAAQw6D,GAEVrE,MAAOd,GAAcG,OACpB,CACDU,WAAY,CACV1iC,EAAG6mC,EAAKpD,EACR3iC,EAAG6lC,EAAKK,EAAK,EAAIvD,EACjBl3D,MAAOw6D,EACPv6D,OAAQ06D,GAEVvE,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CArGMmF,CAAuB/wD,EAC7B,CAzWagxD,CAAWhxD,GAGf,CACLqsD,SACA4E,eAAgB7E,GAAuBC,GAE3C,CCvIA,IAAI6E,GACAC,GACW,SAASC,GAAqBxsE,GAiB3C,OAhBKusE,KACHA,GAAaE,iBAAiBrgE,SAASsgE,iBAAiBC,iBAAiB,kBAGtEL,KACHA,GAAUlgE,SAAS0oD,cAAc,QACjCwX,GAAQ7yB,MAAMmzB,KAAQ,YAAWL,KACjCD,GAAQ7yB,MAAMozB,WAAa,SAC3BP,GAAQ7yB,MAAMl5C,SAAW,WACzB+rE,GAAQ7yB,MAAMnoC,KAAO,SACrBg7D,GAAQ7yB,MAAMqzB,QAAU,MACxB1gE,SAASg2B,KAAK2qC,YAAYT,KAG5BA,GAAQU,YAAchtE,EAEfssE,GAAQne,WACjB,C,4BCdA,MAAM8e,GAAyB,IACzBC,GAAe,GAEN,SAASC,GACtBrgB,EACAnwD,EACAywE,EACAC,EACAC,EACApnE,EACA5C,IAEAsqD,EAAAA,EAAAA,KAAgB,KACd,GAAIwf,GAAatgB,EAAWhiC,QAAS,CACnC,MAAMyiD,EAAoBzgB,EAAWhiC,QAAQ0iD,QAAwB,iBAErEC,EAAAA,GAAAA,GACEF,EACAzgB,EAAWhiC,QAEXwiD,EAAmB,MAAQ,cAC3BJ,QACmBnwE,IAAnBswE,EAA+BJ,QAAyBlwE,EACxDswE,OACAtwE,EACAmJ,EAEJ,IACC,CACD4mD,EAAYnwD,EAAQywE,EAAWC,EAAgBC,EAAkBpnE,EAAqB5C,GAE1F,C,eCxBA,MAAMoqE,GAAiC,IACjCC,GAA2B,IAC3BC,GAAkC,IAClCC,GAA4B,EAAInpC,GAAAA,GAChCopC,GAA6B1pE,OAAOsgC,GAAAA,IACpCqpC,GAAgC,+BAEvB,SAASC,GACtBC,EACAjf,EACA5rD,EACAkgE,EACA4K,EACAC,EACAC,EACAvU,EACAlB,EACAh8D,EACA0xE,EACAC,EACAxI,EACAyI,GAEA,MAAM,gBAAE9pE,EAAe,oBAAE+pE,IAAwBv5D,EAAAA,EAAAA,OAE1Cw5D,EAAwBC,EAA0BC,IAA8Bl0B,EAAAA,GAAAA,MAChFm0B,EAAUC,EAAYC,IAAgBr0B,EAAAA,GAAAA,KACvCs0B,GAAsB10B,EAAAA,EAAAA,MA8I5B,OA1CAvE,EAAAA,EAAAA,KAAU,KACR,IAAKttC,EAAAA,IAAgB0lE,IAAmBC,GAAYE,EAClD,OAGF,IAAIW,EACJ,OAAOnqB,EAAAA,GAAAA,IAAcmK,EAAalkC,QAAU,CAC1Cg6B,wBAAyB,eACzBmqB,wBAAyB,gBACzBlqB,QAAUA,CAACl3C,EAAGhH,IACRA,IAAcm+C,GAAAA,GAAAA,OACXgqB,IACHA,EAAYpmE,KAAKC,OAGnBgmE,KAEO,GAKXK,UAAWA,KACJF,GAAcb,IAInB1pE,EAAgB,CAAErB,cAElBoC,WAAWspE,EAAcllE,KAAKC,IAAI,EAAG8jE,IAA4B/kE,KAAKC,MAAQmmE,KAC9EA,OAAYjyE,EAAS,GAEvB,GACD,CACDiyD,EAAckf,EAAgB9qE,EAAWqB,EAAiBoqE,EAAYC,EAAcX,EAAUE,IAQzF,CACLc,gBAAkBjB,OAAmCnxE,EA7IvD,SAAyB8Q,IACvBuhE,EAAAA,GAAAA,GAAwBvhE,GACxB8qD,EAAwB9qD,EAC1B,EA2IEmrD,YAxFF,SAAqBnrD,GACnB,GAAIqgE,EACFD,EAAcpgE,QAIhB,GAAKrF,EAAAA,GAEL,OAAIumE,EAAoBjkD,SACtB9W,cAAc+6D,EAAoBjkD,SAClCikD,EAAoBjkD,aAAU/tB,OAhBhCyxE,EAAoB,CAClB7xE,SACAyG,oBAmBF2rE,EAAoBjkD,QAAUtlB,YAAW,KACvCupE,EAAoBjkD,aAAU/tB,EAxClC,SAAmB8Q,GACjB,GAAIwqB,EAAAA,GAAY,CACd,MAAMg3C,EAASxhE,EAAEwhE,OACjB,IAAKA,EAAOzvB,UAAU0vB,SAAS,kBAAoBD,EAAOzvB,UAAU0vB,SAAS,WAC3E,OAGEpqC,GAAAA,EAAAA,uBACF1/B,YAAW,KACTq0D,EAAchsD,EAAE,GACf6/D,IAEH7T,EAAchsD,EAElB,CACF,CA0BI0hE,CAAU1hE,EAAE,GACX+/D,IACL,EAsEEhV,kBAAoBsV,EAAsCE,EAAcoB,GAAAA,OAAYzyE,EApEtF,SAA2B8Q,GACzB,GAAIwqB,EAAAA,GAAY,CACd,GAAKxqB,EAAEwhE,OAAuBI,QAAQ,YAAcpB,EAClD,OAGFxgE,EAAEuoC,iBACF63B,GACF,MACEpU,EAAchsD,EAElB,EA0DE6hE,kBAAoBxB,OAA8CnxE,EAxDpE,YACMyL,EAAAA,IAAiB2lE,GAErB1pE,EAAgB,CAAErB,aACpB,EAqDEusE,yBAA2BnnE,EAAAA,QAAiCzL,EAnD9D,SAAyB8Q,GACvBA,EAAE2wC,iBACJ,EAkDEqP,gBA7IF,SAAyBhgD,GACvB,MAAM+hE,EAAYtB,EAAWxjD,QAC7B,IAAK8kD,EAAW,OAEhB,MAAM,QAAE5hB,EAAO,QAAE6hB,GAAYhiE,GACvB,EACJm3B,EAAC,MAAEzzB,EAAK,EAAEu0B,EAAC,OAAEt0B,GACXo+D,EAAUE,wBAERC,EAAanmE,KAAKqgE,IAAKnE,EAAS9X,EAAUhpB,EAAMA,EAAIzzB,EAAQy8C,GAAa6f,GACzEmC,EAAapmE,KAAKqgE,IAAInkC,EAAIt0B,EAASq+D,GAAW/B,GAChDiC,GAAcC,EAChBtB,IAEAC,GAEJ,EA8HEsB,wBA5HF,WACEzB,EAAoB,CAClB7xE,SACAyG,aAEJ,EAwHEulD,iBAbF,SAA0B96C,GACxB8gE,IACIJ,GAyBR,SAAuC1gE,GACrC,MAAMqiE,EAAmBC,GAA8BtiE,EAAEuiE,eACrDF,GACFA,EAAiBG,gBAAgBtC,GAErC,CA9BgCuC,CAA8BziE,EAC5D,EAWE+gE,WACAH,yBACA8B,iCAEJ,CAEA,SAASA,GAA8B1iE,GACrC,MAAMqiE,EAAmBC,GAA8BtiE,EAAEuiE,eACrDF,GACFA,EAAiBM,aAAazC,GAA+B,GAEjE,CASA,SAASoC,GAA8B7D,GACrC,IAAIxhD,EAA0BwhD,EAE9B,GACExhD,EAAUA,EAAQ2lD,yBACX3lD,IAAYA,EAAQ80B,UAAU0vB,SAAS,2BAEhD,OAAOxkD,CACT,C,kcCrNA,MAEM4lD,GAAoB,GAG1B,IAAIC,GACJ,MAAMC,GAAyB,ICZhB,MAObr4C,cAAcs4C,GAAA,uBAAAA,GAAA,sBAAAA,GAAA,uBACZl4C,KAAKm4C,QAAU,IAAIxoD,SAAQ,CAACqrC,EAASod,KACnCp4C,KAAKo4C,OAASA,EACdp4C,KAAKg7B,QAAUA,CAAO,GAE1B,GDEFnuD,YAEA,WACOmrE,KACHA,IAASK,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAI9rD,IAAI,qBAErByrD,GAAuBjd,UAE3B,GAjB0B,K,4BEC1B,MAQA,IAAetd,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE93C,GAAW83C,EACb46B,GAAuB16B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBj4C,GAGrF,OAAO0yE,EAAuBx6B,EAAAA,GAAAA,cAACw6B,EAAyB56B,QAAYv5C,CAAS,I,4BCY/E,MAoGA,IAAes5C,EAAAA,EAAAA,KApGoC/5C,IAG7C,IAH8C,QAClDqF,EAAO,QACP2H,GACDhN,EACC,MAAM,gBACJ60E,EAAe,mBAAEC,EAAkB,iBAAE7oE,IACnC0M,EAAAA,EAAAA,OAEE,WAAEzL,GAAe7H,EAEjBR,GAAOk3C,EAAAA,GAAAA,MACNg5B,EAAeC,IAAoBh6B,EAAAA,EAAAA,OACnCi6B,EAAkBC,EAAgBC,IAAmBh3B,EAAAA,GAAAA,IAAQ,GAC9Di3B,GAAoBx4B,EAAAA,GAAAA,IAASgY,EAAAA,EAAAA,IAAoBvvD,EAAS,SAC1D6zC,EAAU7zC,EAAQ2H,QAAQ6H,OAAQgjB,OAAOqhB,QAEzCm8B,GAAyBl2B,EAAAA,EAAAA,KAAY,KACzClzC,EAAiB,CACfoE,MAAOxL,EAAK,wBACZQ,QAASR,EAAK,mBACdgQ,OAAQ,CACNA,OAAQ,4BACRhU,QAAS,CACPiQ,OAAQqxC,EAAAA,GAAAA,OAGZmzB,WAAYzwE,EAAK,SACjB,GACD,CAACA,EAAMoH,IAEJspE,GAA2Bp2B,EAAAA,EAAAA,KAAaxqB,IAC5CqgD,OAAiBv0E,GACjBq0E,EAAmB,CAAEngD,SACrB0gD,GAAwB,GACvB,CAACA,EAAwBP,IAEtBU,GAAuBr2B,EAAAA,EAAAA,KAAY,KACvC61B,OAAiBv0E,EAAU,GAC1B,IAEGg1E,GAAiBt2B,EAAAA,EAAAA,KAAYzlC,UACjCy7D,IACAE,IAGA,MAAMx9C,EAAQxyB,EAAQ2H,QAAQ6H,OAAQgjB,MAChCwZ,QAAgBjI,GAAAA,GAAmB,cAAavR,EAAMr2B,YAAa6nC,EAAAA,GAAAA,SACnEmuB,QAAa/gD,MAAM46B,GAAS36B,MAAM80B,GAAMA,EAAEgsB,SAChDsd,EAAmB,CACjBngD,KAAM,IAAI+gD,KAAK,CAACle,GAAO,cACvBte,SAAS,EACTy8B,QAAS99C,EAAM+9C,YAAYrqE,MAAMiI,QAAyB/S,IAAnB+S,EAAEqiE,gBAA6BA,cACtE,GACD,CAACV,EAAiB9vE,EAAQ2H,QAAQ6H,OAAQwgE,EAAwBP,IAmBrE,OACE16B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,kCAAkC08B,SAAU,EAAG8qB,KAAK,SAASh6B,QAlB7CpiC,WAC3BxM,GAAckoE,EACbl8B,EACFg8B,IAEAF,QAAuBv+D,MAAM2+D,GAAmB1+D,MAAM80B,GAAMA,EAAEgsB,UAGhEqd,EAAgB,CACdx0E,OAAQgF,EAAQhF,OAChB4Y,QAAS5T,EAAQ7D,GACjBlB,SAAUmB,EAAAA,GACV4G,OAAQ0tE,EAAAA,GAAAA,iBAEZ,GAKE37B,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CACLn+C,MAAOxyB,EAAQ2H,QAAQ6H,OAAQgjB,MAC/Bo+C,oBAAkB,EAClBC,kBAAgB,EAChBC,UAAWj9B,EACXqD,KAAK,UAEPnC,EAAAA,GAAAA,cAAA,YAAOptC,GAEPotC,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,yBAAyBzpB,EAAKq0C,EAAU,kBAAoB,oBAC5EkB,EAAAA,GAAAA,cAACg8B,GAAAA,EAAS,CACRzhD,KAAMogD,EACNl1B,QAAS21B,EACTtvB,SAAUqvB,IAEZn7B,EAAAA,GAAAA,cAACub,GAAAA,EAAa,CACZzzD,OAAQ+yE,EACR5kE,MAAOxL,EAAK,kBACZgxD,eAAgB4f,EAChB51B,QAASs1B,EACTkB,UAAWrpE,IAER,ICgIX,IAAe+sC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAwC,IAAtC,QAAEnI,EAAO,SAAE/E,GAAUkN,EAC5B,MAAQyP,KAAMq5D,GAAc12E,EAAO6c,MAC7BjN,EAASnK,EAAQoP,UACjB,cAAE8hE,EAAa,aAAEC,GAAiBnxE,EAAQ2H,QAAQ6H,QAAU,CAAC,EAC7D4hE,EAAkBpxE,EAAQ6b,iBAC1Bw1D,EAAgBD,GAClBniE,EAAAA,EAAAA,IAAkB1U,EAAQyF,EAAQhF,OAAQo2E,QAC1Ch2E,EAEEqwE,IAAYxwE,IAAWq2E,EAAAA,EAAAA,IAAuB/2E,EAAQyF,EAAS/E,IAEnEiK,UAAWwmE,EACX3nE,YAAa4nE,GACVF,IAAa5vE,EAAAA,EAAAA,IAAetB,GAAQg3E,gBAAmB,CAAC,EAEvDj0E,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQyF,EAAQhF,QAClCw2E,EAASl0E,KAASm+D,EAAAA,EAAAA,IAAcn+D,IAAS6M,IAAWnK,EAAQhF,QAC5Dy2E,GAAcD,GAAUrnE,GAASiU,EAAAA,EAAAA,IAAW7jB,EAAQ4P,QAAU/O,EAC9Ds2E,EAAaF,EAASl0E,OAAOlC,EAC7Bu2E,EAAqBp3E,EAAOutB,cAAczb,WAAW,GAG3D,MAAO,CACL4kE,YACAQ,aACAC,aACAP,eACAD,gBACAG,gBACA5F,YACAkG,qBACA1xD,OAXY+sB,EAAAA,EAAAA,IAAuBzyC,EAAQyF,MAYvCyrE,GAAa,CAAEC,iBAAgBC,oBACpC,GAlCetzB,EArL6B19C,IAsB3C,IAtB4C,QAChDqF,EAAO,WACP4xE,EAAU,gBACVC,EAAkB,EAAC,aACnBC,EAAY,UACZb,EAAS,WACTQ,EAAU,WACVC,EAAU,cACVR,EAAa,cACbG,EAAa,aACbF,EAAY,UACZ1F,EAAS,eACTC,EAAc,iBACdC,EAAgB,mBAChBgG,EAAkB,cAClBI,EAAa,MACb9xD,EAAK,qBACL+xD,EAAoB,8BACpBC,EAA6B,8BAC7BC,EAA6B,8BAC7BC,EAA6B,2BAC7BC,GACDz3E,EACC,MAAM,iBAAEg2C,EAAgB,gBAAE0hC,IAAoB/+D,EAAAA,EAAAA,MAExC9T,GAAOk3C,EAAAA,GAAAA,KAGPuD,GAAMvB,EAAAA,EAAAA,IAAuB,OAEnC45B,EAAAA,GAAAA,IAAer4B,EAAKg4B,IACpBnU,EAAAA,GAAAA,GAAiB99D,EAAQhF,OAAQgF,EAAQ6b,iBAAkBw1D,GAC3D7F,GAAgBvxB,EAAKj6C,EAAQhF,OAAQywE,EAAWC,EAAgBC,IAEhEx3B,EAAAA,EAAAA,KAAU,KACR,GAAKn0C,EAAQupC,SAEb,MAAO,KACL6oC,IAA6B,CAAEG,0BAA2B,CAACvyE,EAAQ7D,IAAKq2E,WAAW,GAAO,CAC3F,GACA,CAACJ,EAA4BpyE,EAAQupC,SAAUvpC,EAAQ7D,KAE1D,MAAMs2E,EAAwBZ,GAAmB,GAC1C3sB,EAASwtB,IAAa55B,EAAAA,GAAAA,GAAQ25B,GAC/BxwC,EAASlgC,QAAQ/B,EAAQ2H,QAAQ6H,QAAQnR,KAAKulD,WAAW,eACzD+uB,EAAqD,wBAAjC3yE,EAAQ2H,QAAQ6H,QAAQnT,MAAkC2D,EAAQ2H,QAAQ6H,OAAQgjB,OAE5G2hB,EAAAA,EAAAA,KAAU,KACJs+B,GAIJ5uE,WAAW6uE,EAtDU,GAsDCb,EAAmC,GACxD,CAACA,EAAiBa,EAAWD,IAEhC,MAAM1hB,GAAY6hB,EAAAA,GAAAA,IAAkB34B,EAAKk4B,GAEnCU,GAAwBn6B,EAAAA,EAAAA,IAAO,MACnC,MAAMlwC,EAAWwpE,GAAsB7oD,SAAWnpB,EAAQ7D,IAAM61E,EAAqB7oD,QACrF,OAAO8Y,IAAWjiC,EAAQ6H,YAAcW,CACzC,EAHoC,KAKrC2rC,EAAAA,EAAAA,KAAU,KACJ4c,GAAa8hB,EAAsB1pD,UACrC0pD,EAAsB1pD,SAAU,EAChCkpD,IACF,GACC,CAACthB,EAAWshB,IAEf,MAAM,qBAAEruB,IAAyBC,EAAAA,GAAAA,GAAkBiB,OAAS9pD,EAAWq3E,GAAuB,GAExFK,GAAcr7B,EAAAA,EAAAA,KAAQ,IACnBy5B,EACHA,EAAcpxE,KAAKqK,GAAW8mE,IAAY9mE,KAASpK,OAAOgC,cAC1D3G,GACH,CAAC81E,EAAeD,IAEbtpE,GAAUorE,EAAAA,GAAAA,GACdvzE,EACAQ,EACAyxE,EACAC,EACAoB,EACAzB,EACAF,EACAlxD,EACA,CAAE2xD,cACFM,EACAC,IAEI,kBACJpb,EAAiB,oBAAEic,EAAmB,wBACtChc,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBnd,GACrByyB,OAA6CtxE,IAAxB43E,EAkB3B,GADyBjB,GAAkD,0BAAjC/xE,EAAQ2H,QAAQ6H,QAAQnR,KAEhE,OAAO02C,EAAAA,GAAAA,cAAA,QAAMkF,IAAKA,IAGpB,GAAI23B,EACF,OAAO78B,EAAAA,GAAAA,cAAA,QAAMkF,IAAKA,EAAKhxB,UAAU,2BAA2BthB,GAqB9D,MAAMshB,GAAY2uB,EAAAA,GAAAA,GAChB,kCACA6zB,IAAcE,GAAoB,WACjC1pC,GAAU0wC,IAAsB,kBACjCjG,GAAsB,gBACtBoF,GAAgB,gBACf7vC,IAAW0wC,GAAqB,aACjC3uB,GAGF,OACEjP,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACL99C,IAAI82E,EAAAA,EAAAA,IAAiBjzE,EAAQ7D,IAC7B8sB,UAAWA,EACX,kBAAiBjpB,EAAQ7D,GACzB,iBAAgB6D,EAAQupC,eAAYnuC,EACpC4xD,YA3DqB9gD,KACvBuhE,EAAAA,GAAAA,GAAwBvhE,GACxB8qD,EAAwB9qD,EAAE,EA0DxBgsD,cAAejB,IAEb0b,GAAqB59B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,0BAA0BthB,GAChEs6B,GArCD8S,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,sBAAsB08B,SAAU,EAAG8qB,KAAK,SAASh6B,QArBtCy8B,KAC7BviC,EAAiB,CACf1O,QAAQ,EACRD,WAAYyvC,GAAYt1E,GACxBgmC,SAAU+uC,IAAgB,GAC1BhvC,aAAcliC,EAAQ2H,QAAQ6H,QAAQ+yB,QAAU,GAChD,GAgBEwS,EAAAA,GAAAA,cAACo+B,GAAAA,EAAuB,CACtBzhC,IAAK1xC,EAAQ7D,GACbgQ,QAASwlE,EACTyB,MAAI,EACJC,QAAM,EACNC,gBAAc,IAEhBv+B,EAAAA,GAAAA,cAAA,cAASv1C,EAAK,2BACdu1C,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,4BAA6BA,EAAK,SAAUQ,EAAQ2H,QAAQ6H,QAAQ+yB,OAAQ,OAExFwS,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,yBAAyBzpB,EAAK,2BA2B/CmzE,GACC59B,EAAAA,GAAAA,cAACw+B,GAA4B,CAC3BvzE,QAASA,EACT2H,QAASA,IAGZqrE,GACCj+B,EAAAA,GAAAA,cAACw6B,GAAoB,CACnB1yE,OAAQk6D,EACRyc,OAAQR,EACRhzE,QAASA,EACTT,gBAAgB,SAChBi7C,QAAS0c,EACT/O,oBAAqBgP,IAGrB,KCvGV,GA9FsCx8D,IAYhC,IAZiC,UACrCsuB,EAAS,QACTjpB,EAAO,OACPS,EAAM,MACNuK,EAAK,WACLyoE,EAAU,YACVhH,EAAW,aACXiH,EAAY,eACZC,EAAc,8BACdzB,EAA6B,8BAC7BC,EAA6B,QAC7B17B,GACD97C,EAEC,MAAMs/C,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bk7B,GAAiBhB,EAAAA,GAAAA,IAAkB34B,EAAKi4B,GAExC5iB,GAAe/X,EAAAA,GAAAA,GAASv3C,IAAWuvD,EAAAA,EAAAA,IAAoBvvD,EAAS,cAAe4zE,GAC/ExkB,GAAiBC,EAAAA,GAAAA,GAAarvD,GAC9B6zE,EAAe9xE,QAAQ/B,IAAW8zE,EAAAA,EAAAA,IAAqB9zE,IACvDwvD,EAAYztD,QAAQ/B,IAAWyvD,EAAAA,EAAAA,IAAoBzvD,IAEnDR,GAAOk3C,EAAAA,GAAAA,KAEPq9B,EAActzE,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAUT,GAAS2iE,aAAaE,eAElF,OACE9tB,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLhxB,WAAW2uB,EAAAA,GAAAA,GACT,kBACA3uB,EACAxoB,IAAWizE,GAAiB,UAAQM,EAAAA,EAAAA,IAAgBvzE,MAEtDg2C,QAASz2C,EAAUy2C,OAAUr7C,GAE5Bg0D,GA6BP,SACEsB,EACA1kB,EACA6nC,EACApH,EACAjd,GAEA,MAAM,MAAE5/C,EAAK,OAAEC,IAAW+gD,EAAAA,GAAAA,MAEpBC,EAAS7kB,GAAW0kB,EAE1B,OACE3b,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,iBAAkBi8B,GAAgB,WAC7DrkB,GACAza,EAAAA,GAAAA,cAAA,OACEmD,IAAK2Y,EACLjhD,MAAOA,EACPC,OAAQA,EACRsoC,IAAI,GACJlvB,UAAU,YACVgrD,WAAW,IAGfl/B,EAAAA,GAAAA,cAAC+b,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWhvD,QAAQytD,GAAY5/C,MAAOA,EAAOC,OAAQA,IACxF48D,GAAe13B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAGtC,CAxDyB+nC,CAAgB5B,EAAgBE,EAAcukB,EAAcpH,EAAajd,GAC5Fza,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACb8rB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,QACH32C,GAEE0iE,EAAAA,EAAAA,IAAgB1iE,GAClB+0C,EAAAA,GAAAA,cAACm/B,GAAa,CACZl0E,QAASA,EACT4xE,YAAU,EACVM,8BAA+BA,EAC/BC,8BAA+BA,IAGjCp9B,EAAAA,GAAAA,cAACoc,GAAAA,EAAc,CACb3xD,KAAMA,EACNQ,QAASA,EACToxD,QAASrvD,QAAQqtD,GACjB8iB,8BAA+BA,EAC/BC,8BAA+BA,IAdjCsB,GA1CC,KA4DL1+B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgB0tB,IAAI,SAAQua,EAAAA,GAAAA,GAAW6iB,GAAe/oE,GA5DhE,OA8DN2oE,GAAkB5+B,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,4BAC5B,E,uCCxEV,MA0GA,IAAeyrB,EAAAA,EAAAA,KA1GmB/5C,IAY5B,IAZ6B,QACjCqF,EAAO,eACPm0E,EAAc,UACdC,EAAS,mBACTC,EAAkB,kBAClBlvD,EAAiB,UACjBmvD,EAAS,aACTC,EAAY,SACZhrC,EAAQ,QACRkN,EAAO,mBACP+9B,EAAkB,aAClBC,GACD95E,EACC,MAAM,iBAAEiM,IAAqB0M,EAAAA,EAAAA,MACvB9T,GAAOk3C,EAAAA,GAAAA,MACNg+B,EAAaC,IAAiB77B,EAAAA,GAAAA,KAE/Bue,EAAenrD,IACnBA,EAAE2wC,kBAEFj2C,EAAiB,CACf5G,QAASR,EAAK,iBACd,EAQEwL,GAAQysC,EAAAA,EAAAA,KAAQ,KACpB,IAAKi9B,EAAa,OAClB,MAAME,GAAiBC,EAAAA,GAAAA,IAAsC,IAAf70E,EAAQyH,KAAajI,EAAK6+B,MAClEy2C,EAAe90E,EAAQ+0E,WAAYF,EAAAA,GAAAA,IAA2C,IAApB70E,EAAQg1E,SAAkBx1E,EAAK6+B,MACzF42C,EAAoBj1E,EAAQ2iE,cAAekS,EAAAA,GAAAA,IAAkD,IAA3B70E,EAAQ2iE,YAAYl7D,KAAajI,EAAK6+B,MAE9G,IAAIhgC,EAAOu2E,EAUX,OATIE,IACFz2E,GAAQ,KACRA,GAAQmB,EAAK,mBAAmBqL,QAAQ,SAAUiqE,IAEhDG,IACF52E,GAAQ,KACRA,GAAQmB,EAAK,sBAAsBqL,QAAQ,SAAUoqE,IAGhD52E,CAAI,GACV,CAACq2E,EAAal1E,EAAMQ,IAEjBk1E,GAAgBt9B,EAAAA,GAAAA,GACpB,cACAy8B,GAAsB,mBACtBr0E,EAAQ2iE,aAAawS,YAAc,eAGrC,OACEpgC,EAAAA,GAAAA,cAAA,QACE9rB,UAAWisD,EACXv+B,IAAKn3C,EAAKo3C,MAAQ,MAAQ,MAC1BH,QAASA,EACT,2BAEC89B,GACCx/B,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,mCAAmCwtB,QAAS+9B,IAE1DzyE,QAAQ/B,EAAQglB,QACf+vB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,kBACbmsB,EAAAA,GAAAA,IAAqBp1C,EAAQglB,QAEhC+vB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,wBAGfqrD,GAAavyE,QAAQojB,GAAmBC,gBACxC2vB,EAAAA,GAAAA,cAAA,QAAM0B,QAjDZ,SAA0BvqC,GACxBA,EAAE2wC,kBACF43B,GACF,GA+CQ1/B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,mBACd8rB,EAAAA,GAAAA,cAACkc,GAAAA,EAAe,CAAC5yD,MAAM+2C,EAAAA,GAAAA,IAAqBjwB,EAAmBC,kBAEjE2vB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,uBAGhBsgB,GACCwL,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,uCAEdmrD,GACCr/B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,sBAAqBioC,EAAAA,GAAAA,GAAWkjB,IAElDr/B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,eAAeje,MAAOA,EAAOy8C,aAAcktB,GACxD30E,EAAQ2iE,aAAawS,YACpBpgC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,mBAAmBwtB,QAAS4gB,IACzCwd,EAAAA,GAAAA,IAAkD,IAA3B70E,EAAQ2iE,YAAYl7D,KAAajI,EAAK6+B,MAAM,IAEtE0W,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,mBAAmBwtB,QAAS4gB,GAAc73D,EAAK,qBAGlEQ,EAAQ+0E,UAAa,GAAEv1E,EAAK,qBAC5B41E,EAAAA,GAAAA,IAAW51E,EAAqB,IAAfQ,EAAQyH,OAE3B0sE,GACCp/B,EAAAA,GAAAA,cAACsgC,GAAAA,EAAqB,CAAC7hE,OAAQ2gE,IAE5B,I,4BChHX,MAoIA,GAvH8Bx5E,IAGxB,IAHyB,QAC7BqF,EAAO,oBAAEs1E,EAAmB,8BAAEnD,EAA6B,WAAEoD,EAAU,aAAEpjD,EAAY,iBACrFqjD,EAAgB,aAAEC,EAAY,aAAEC,GACjC/6E,EACC,MAAM,iBAAEiM,EAAgB,eAAE+uE,IAAmBriE,EAAAA,EAAAA,MAEvC9T,GAAOk3C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,MAGfW,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BvsC,EAAUnM,EAAQ2H,QAAQwE,SAC1B,eAAEyZ,EAAc,QAAEiuB,EAAO,UAAE+hC,GAAczpE,EAEzC0pE,EAAY1pE,EAAQ+/B,yBAAsB9wC,GAC9Cm0D,EAAAA,EAAAA,IAAoBvvD,EAAS6zC,IAAYiiC,EAAAA,GAAoB,YAAc,UAGvEC,GAAUnD,EAAAA,GAAAA,IAAkB34B,EAAKq7B,GACjCU,GAAUpD,EAAAA,GAAAA,IAAkB34B,EAAKk4B,GACjC8D,EAAmB,UAAS9pE,EAAQhQ,YACpC+5E,GAAgB3+B,EAAAA,GAAAA,GACpB0+B,GACCF,IAAYH,EACb5xC,EAAAA,GAAAA,QACA7R,IAEKgkD,EAAiBC,EAAoBC,IAAqBv9B,EAAAA,GAAAA,KAE3Dw9B,GAAoBx8B,EAAAA,EAAAA,KAAY,KACpCu8B,IACAX,KAAgB,GACf,CAACA,EAAcW,IAEZE,GAA2BxW,EAAAA,GAAAA,GAAYyV,IAE7CrhC,EAAAA,EAAAA,KAAU,KACJyhC,GAAaI,IAAYR,GAAoBe,KAC/CH,IACAX,MACF,GACC,CAACG,EAAWI,EAASP,EAAcD,EAAkBe,EAA0BH,IAElF,MAAMI,GAAY18B,EAAAA,EAAAA,KAAY,KAC5B67B,EAAe,CACb/vD,eAAgBzZ,EAAQyZ,gBACxB,GACD,CAAC+vD,EAAgBxpE,IAEdkrD,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B,GAAI87B,EACF,OAAIO,OACFvvE,EAAiB,CACf5G,QAASR,EAAK,yBACdgQ,OAAQ,CACNA,OAAQ,iBACRhU,QAAS,CACPoqB,eAAgBzZ,EAAQyZ,iBAG5BqqD,WAAYzwE,EAAK,iBAInB42E,SACAX,OAIJe,GAAW,GACV,CACDZ,EAAWO,EAAiB32E,EAAMi2E,EAAce,EAAW5vE,EAAkBwvE,EAC7EjqE,EAAQyZ,iBAGJ6wD,EAAkB,cAAe7wD,GACjC,MAAEhW,EAAK,OAAEC,IAAW6mE,EAAAA,GAAAA,IAAqBvqE,EAASktC,GAClDpwB,GAAY2uB,EAAAA,GAAAA,GAChB,sBACA6+B,GAAmB,WACnBb,IAAc51E,EAAQ6H,YAAc,YAGtC,OACEktC,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLhxB,UAAWA,EACX6uB,MAAQ,UAASloC,gBAAoBC,OACrC4mC,QAAUggC,OAAgCr7E,EAAdi8D,GAE5BtiB,EAAAA,GAAAA,cAAC4hC,GAAAA,EAAW,CACVtpB,aAAcpT,EACd9tC,QAASA,EACTyqE,cAAef,EACfgB,mBAAmB,aACnB3/B,KAAMtnC,EACN2lE,WAAYA,EACZuB,QAASf,EACTgB,QAASf,EACT/9B,qBAAmB,EACnB++B,YAAa7kD,IAEdyjD,GAAaG,GAAWI,GACvBphC,EAAAA,GAAAA,cAACkiC,GAAAA,EAAe,CACdvlC,IAAKukC,EACLhtD,UAAU,iBACViuD,OAAQhB,EACRh/B,KAzHqB,KAyHftnC,EACNwjE,MAAI,EACJ+D,eAAa,EACb9D,QAAM,EACN+D,QAASd,IAGT,E,4BC7IV,MAAMe,GAAO,EAAIt0C,GAAAA,GACXu0C,GAAyB,IACzBC,GAAa,IACbC,GAAe,EAEN,SAASC,GACtBz8E,EACAyG,EACAi2E,EACAjzC,EACA0/B,EACAtjE,EACA82E,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/CxkE,EAAAA,EAAAA,MAGE2mC,GAAMvB,EAAAA,EAAAA,IAAuB,MAG7Bq/B,GAAWr/B,EAAAA,EAAAA,IAAqC,MAEhDs/B,GAAiBzgC,EAAAA,GAAAA,GAASmgC,EAAW,WAAUA,SAAYt8E,GAAYs8E,GAEvExgC,EAAOygC,GAAiBN,GACxBv/B,GAAQmgC,EAAAA,GAAAA,GAAY,UAAS/gC,MAAW,WAAUA,MAAUr2C,GAAS,mBAErE6jC,GAAegU,EAAAA,EAAAA,SAA6Bt9C,GAC5C88E,GAAsBx/B,EAAAA,EAAAA,SAA2Bt9C,GACjD+8E,GAAuBr+B,EAAAA,EAAAA,KAAY,KACrBG,EAAI9wB,UAItB0uD,EAAqB,CACnB78E,OAAQA,EACRyG,UAAWA,EACXZ,MAAOA,EACP6jC,aAAcA,EAAavb,UAE7B+uD,EAAoB/uD,aAAU/tB,EAC9BspC,EAAavb,aAAU/tB,EAAS,GAC/B,CAACy8E,EAAsB78E,EAAQyG,EAAWZ,IAEvCuyE,GAAOt5B,EAAAA,EAAAA,KAAY,KACvB,MAAM2a,EAAQsjB,EAAS5uD,QACnB6uD,IACEvjB,IACFA,EAAMntC,QACNmtC,EAAMzI,UAER+rB,EAAS5uD,QAAU,IAAIivD,MACvBL,EAAS5uD,QAAQ+uB,IAAM8/B,GACvBK,EAAAA,GAAAA,GAASN,EAAS5uD,SAClB4uD,EAAS5uD,QAAQ4sB,iBAAiB,SAAS,KACzCgiC,EAAS5uD,aAAU/tB,CAAS,GAC3B,CAAEk9E,MAAM,IACb,GACC,CAACN,IAEE3gB,GAAcvd,EAAAA,EAAAA,KAAY,KAC9Bs5B,IAEA,MAAMnF,EAAYh0B,EAAI9wB,QAEtB,KAAKtoB,GAAUotE,GAAcxsE,GAAczG,GACzC,OAGF,MAAM,EAAEqoC,EAAC,EAAEc,GAAM8pC,EAAUE,wBAE3ByJ,EAA0B,CACxB/2E,MAAOA,EACPwiC,IACAc,IACAC,UAAW8S,EACX7S,YAAa8/B,IAGVz/B,EAAavb,UAChBub,EAAavb,QAAU,GACvB+uD,EAAoB/uD,QAAUovD,YAAYrxE,MAC1CrD,WAAWs0E,EAAsBb,KAGnC5yC,EAAavb,QAAQxoB,KAAKu3E,EAAoB/uD,SACzCovD,YAAYrxE,MAAQgxE,EAAoB/uD,SAAWouD,GACpDC,GAAa,GAChB,CAACx8E,EAAQ6F,EAAO+2E,EAA2BzT,EAAO1iE,EAAW2xE,EAAM+E,EAAsBjhC,IAgC5F,OA7BA/C,EAAAA,EAAAA,KAAU,KACR,MAAM85B,EAAYh0B,EAAI9wB,QAEjB8kD,GAAcxpC,GAEnBA,EAAwBx+B,SAAQtL,IAI1B,IAJ2B,GAC/BwB,EAAE,UACFioC,EACA3iC,UAAW+2E,GACZ79E,EACC,GAAIypC,GAAa3iC,IAAc+2E,EAC7B,OAGF,MAAM,EAAEn1C,EAAC,EAAEc,GAAM8pC,EAAUE,wBAE3B2J,EAA6B,CAC3B37E,KACAnB,OAAQA,EACR2pC,SAAU9jC,EACVujC,UAAW8S,EACX7T,IACAc,IACAE,YAAa8/B,IAEfiP,GAAM,GACN,GACD,CAAC3uC,EAAyBzpC,EAAQ6F,EAAOsjE,EAAO1iE,EAAW2xE,EAAM0E,EAA8B5gC,IAE3F,CACL+C,MACA/C,OACAY,QACAuf,cAEJ,CCrGA,MAwCA,IAAe3iB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAAC99C,EAAM4N,KAA6B,IAA3B,MAAEtH,EAAK,YAAE43E,GAAatwE,EACtE,MAAO,CACLgE,SAASusE,EAAAA,EAAAA,IAAoBn+E,EAAQsG,GACrC83E,OAAQF,GAAcG,EAAAA,EAAAA,IAA0Br+E,EAAQsG,QAASzF,EACjEs8E,SAASmB,EAAAA,EAAAA,IAAyBt+E,EAAQsG,GAC3C,GALiBw3C,EAtC6B19C,IAW3C,IAX4C,MAChDwpE,EAAK,oBACLmR,EAAmB,aACnBnjD,EAAY,iBACZ2mD,EAAgB,UAChBr3E,EAAS,OACTzG,EAAM,wBACNypC,EAAuB,QACvBt4B,EAAO,OACPwsE,EAAM,QACNjB,GACD/8E,EACC,MAAM,IACJs/C,EAAG,KACH/C,EAAI,MACJY,EAAK,YACLuf,GACEogB,GAAiBz8E,EAAQyG,EAAWi2E,EAASjzC,EAAyB0/B,EAAOwU,GAAQ93E,OACnF+yE,GAAiBhB,EAAAA,GAAAA,IAAkB34B,EAAKq7B,GAE9C,OACEvgC,EAAAA,GAAAA,cAACo+B,GAAAA,EAAuB,CACtBhnE,QAASA,EACT+qC,KAAMA,EACN6hC,QA1BU,EA2BVjC,QAASlD,EACToF,aAAcF,EACd3mD,aAAcA,EACdihD,KAAMQ,EACN3uE,uBAAqB,EACrBg1C,IAAKA,EACLhxB,WAAW2uB,EAAAA,GAAAA,GAAe,4BAA6BzrC,GAAShQ,KAAO88E,GAAAA,IAAmB,sBAC1FnhC,MAAOA,EACPrB,QAAS4gB,GACT,KCDN,IAAe3iB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAAC99C,EAAM4N,KAAqC,IAAnC,cAAE+wE,EAAa,YAAET,GAAatwE,EAC9E,MAAMgE,EAAU5R,EAAOwS,aAAa6K,KAAKshE,GACzC,MAAO,CACL/sE,UACAwsE,OAAQxsE,GAAStL,OAAS43E,GAAcG,EAAAA,EAAAA,IAA0Br+E,EAAQ4R,EAAQtL,YAASzF,EAC3Fs8E,QAASvrE,GAAStL,QAASg4E,EAAAA,EAAAA,IAAyBt+E,EAAQ4R,EAAQtL,OACrE,GANiBw3C,EApCmC19C,IAUjD,IAVkD,MACtDwpE,EAAK,cACL+U,EAAa,UACbz3E,EAAS,OACTzG,EAAM,wBACNypC,EAAuB,QACvBt4B,EAAO,OACPwsE,EAAM,QACNjB,EAAO,oBACPpC,GACD36E,EACC,MAAM,IACJs/C,EAAG,KACH/C,EAAI,MACJY,EAAK,YACLuf,GACEogB,GACFz8E,EAAQyG,EAAWi2E,EAASjzC,EAAyB0/B,EAAOwU,GAAQ93E,OAAOs4E,EAAAA,GAAAA,IAAmB,IAGhG,OACEpkC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVkC,IAAKA,EACLxtC,WAAYysE,EACZjwD,WAAW2uB,EAAAA,GAAAA,GAAe,4BAA6BzrC,GAAShQ,KAAO88E,GAAAA,IAAmB,sBAC1FnhC,MAAOA,EACPZ,KAAMA,EACNkiC,OAAK,EACLnhC,qBAAmB,EACnBhzC,uBAAqB,EACrBitE,8BAA+BoD,EAC/B7+B,QAAS4gB,GACT,KCrEAgiB,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBxhC,EAAaisB,EAAgBwV,EAAwB7gB,EAAsBt+B,GAE3E,OAAIs+B,EACKnyC,QAAQqrC,QAAQqnB,GAAyB7+C,GAAS,SAAS2pC,EAAQ,WAAa,aAK3F9vD,eAAyC6jC,EAAaisB,GACpD,MAAMrS,EAAM,IAAIC,MAChBD,EAAI5Z,IAAMA,EACV4Z,EAAI8nB,YAAc,YAEb9nB,EAAIliD,aACD,IAAI+W,SAASqrC,IACjBF,EAAIG,OAASD,CAAO,IAIxB,MAAMkB,EAASzoD,SAAS0oD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MAE9BH,EAAOtjD,MAAQkiD,EAAIliD,MACnBsjD,EAAOrjD,OAASiiD,EAAIjiD,OAEpB2jD,EAAIE,UAAU5B,EAAK,EAAG,EAAGA,EAAIliD,MAAOkiD,EAAIjiD,QAExC,MAAMwzB,EAAI8gC,EAAQrS,EAAIliD,MAAQ,EAAI,EAC5Bu0B,EAAI2tB,EAAIjiD,OAAS,EAGvB,MAAQ,QADMjV,MAAMwe,KAAKo6C,EAAIqmB,aAAax2C,EAAGc,EAAG,EAAG,GAAG71B,MACjCrN,KAAK,OAC5B,CA3BS64E,CAA0B5hC,EAAKisB,EACxC,C,4BCbe,SAAS4V,GACtB/5E,EACAw1C,EACAwkC,GAEA,MAAM,SAAE3gC,IAAaC,EAAAA,EAAAA,MAEf2gC,EAAUD,IAAaE,EAAAA,EAAAA,IAA4Bl6E,GAEzD,OAAOm6E,EAAAA,GAAAA,GACLF,EACAl4E,QAAQyzC,GACR6D,IAAa+gC,EAAAA,GAEjB,C,4BCsCA,MAoKA,GApK4Bz/E,IAoBtB,IApBuB,GAC3BwB,EAAE,QACF6D,EAAO,oBACPs1E,EAAmB,UACnBpR,EAAS,YACTmW,EAAW,eACX9N,EAAc,WACdzT,EAAU,eACVwhB,EAAc,YACdC,EAAW,KACXrjC,EAAO,SAAQ,WACf6uB,EAAU,YACV9B,EAAW,eACXqP,EAAc,qBACdkH,EAAoB,cACpBC,EAAa,YACbhO,EAAW,MACXjyC,EAAK,QACLic,EAAO,eACPikC,GACD//E,EAEC,MAAMs/C,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BlmB,GAAS6xC,EAAAA,EAAAA,IAAgBrkE,KAAYskE,EAAAA,EAAAA,IAAuBtkE,GAC5D26E,EAAenoD,EAAMwZ,QAErB4nC,GAAiBhB,EAAAA,GAAAA,IAAkB34B,EAAKq7B,IAExC,SAAEj8B,IAAaC,EAAAA,EAAAA,OACdshC,EAAeC,IAAoBllC,EAAAA,EAAAA,IAAS0kC,GAC7CS,EAAaF,GAAiBhH,GAC9B,UACJ7e,EAAS,aAAEgmB,IACTC,EAAAA,GAAAA,IAAyBzrB,EAAAA,EAAAA,IAAoBvvD,EAASk3C,IAAQ4jC,GAC5DG,EAAgBN,GAAgB5lB,EAEhCmmB,EAAwBn5E,QAAQw4E,IAC/BY,IAAaxlC,EAAAA,EAAAA,KAAUslC,GACxBG,EAAUr5E,QAAQk5E,GAClBI,EAAWtB,GAAwB/5E,EAASo7E,GAC5CE,EAAuBvB,GAAwB/5E,GAAUk7E,GACzDK,GAAkBC,EAAAA,GAAAA,IAAoBJ,GACtC1qB,GAAewpB,EAAAA,EAAAA,IAA4Bl6E,IAE1Cy7E,EAAe,CAAGC,IAAe5iC,EAAAA,GAAAA,GAAQtmB,EAAMg9B,YAGpDurB,aAAcY,IACZX,EAAAA,GAAAA,IACFzrB,EAAAA,EAAAA,IAAoBvvD,EAAS,aAAcy6E,GAAemB,EAAAA,EAAAA,IAAsB57E,EAAS,cAGrF,YACJ67E,EAAW,eAAEC,EAAc,iBAAEC,IAC3BC,EAAAA,EAAAA,IACFh8E,EACAs6E,IAAmBG,EAAgBkB,EAAmBZ,GACtDD,IAAeG,GAEXgB,GAAiD,KAA/Blc,EAAAA,GAAAA,GAAY6a,IAGlC92B,aAAco4B,EACdl4B,qBAAsBm4B,IACpBl4B,EAAAA,GAAAA,GAAkB63B,OAAgB1gF,EAAW6gF,EAAiB,SAEhEn4B,aAAcs4B,EACdp4B,qBAAsBq4B,IACpBp4B,EAAAA,GAAAA,IAAmBg3B,IAAkBL,GAEnCvjB,GAAcvd,EAAAA,EAAAA,KAAY,KAC1B+hC,EACFnB,IAAiB16E,GAIdi7E,EAKDQ,EACFC,IAIFjlC,IAAUz2C,EAAQ7D,IAThB0+E,GAAkByB,IAAeA,GASd,GACpB,CAACrB,EAAeS,EAAaD,EAAgBI,EAAa77E,EAAS06E,EAAgBjkC,IAEhF0tB,IAAQC,EAAAA,EAAAA,IAAapkE,GAC3BkjE,IAA4B/6D,IAAgC,IAA9Bo0E,GAAyBp0E,EACrD,IAAKqyE,EAIH,YAHI+B,GACFtiC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KAA2B9N,gBAAgB+N,EAAAA,MAKpF,MAAMC,EAAYziC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KACnDvB,EACFvB,GAAoBuB,EAAe9W,GAAOoI,EAAgBzT,EAAYt+B,GAAOnpB,MAAMsrE,IACjFD,EAAU5kC,MAAMiU,YAAY,gBAAiB4wB,GAC7CD,EAAU7N,aAAa4N,EAAAA,IAA2B,GAAG,IAGvDC,EAAUz+B,UAAU/gB,IAAI,qBAC1B,GACC,CAACs9C,EAAsBS,EAAe9W,GAAOoI,EAAgBzT,EAAYt+B,IAE5E,MAAM,MAAE5qB,GAAK,OAAEC,GAAM,QAAEo1D,IAAYc,GAAc/B,GAAyBhkE,EAASikE,EAAaC,EAAW7qB,GAErGpwB,IAAY2uB,EAAAA,GAAAA,GAChB,eACCikC,IAAgBvI,GAAkB,cACnCrO,IAAW,cACXr1D,KAAUC,IAAU,eACpBA,GAAS8zD,IAAoB,kBAGzBiZ,GAAkB7W,EAAc,WAAUn2D,eAAkBm2D,EAAW1iC,aAAa0iC,EAAW5hC,OAAS,GACxG2T,GAAiB,WAATZ,EAAqB,WAAUrnC,QAAY+sE,UAAoBxhF,EAE7E,OACE25C,EAAAA,GAAAA,cAAA,OACE54C,GAAIA,EACJ89C,IAAKA,EACLhxB,UAAWA,GACX6uB,MAAOA,GACPrB,QAASolC,OAAczgF,EAAYi8D,GAElC6jB,GAAyBnmC,EAAAA,GAAAA,cAAA,UAAQkF,IAAKqhC,EAAsBryD,UAAU,yBACvE8rB,EAAAA,GAAAA,cAAA,OACEmD,IAAK+iC,EACLhyD,WAAW2uB,EAAAA,GAAAA,GAAe,aAAcsjC,GAAyB,mBACjE/iC,IAAI,GACJL,MAAOyiC,EAAe,UAASA,WAAkBn/E,EACjD64E,WAAYxH,IAEb0O,GACCpmC,EAAAA,GAAAA,cAAA,UAAQkF,IAAKohC,EAAUpyD,WAAW2uB,EAAAA,GAAAA,GAAe,YAAa2jC,KAE/D9O,GAAe13B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAC/BizD,IAAwBE,GACvBrnC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAY,iBAAgBkzD,KAC/BpnC,EAAAA,GAAAA,cAAC8nC,GAAAA,EAAe,CAAC9iE,SAAUgiE,EAAkBtlC,QAASolC,EAAcxkB,OAAcj8D,KAGrFghF,GAA8BrnC,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GAAe,gBAAiBykC,KAC7EtnC,EAAAA,GAAAA,cAAC+b,GAAAA,EAAY,CACXC,UAAW0qB,EACXqB,eAAa,EACbpsB,aAAcA,EACd9gD,MAAOA,GACPC,OAAQA,GACRoZ,UAAU,kBAEX6yD,GACC/mC,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,6BAA6BhhB,KAAK4K,MAAyB,IAAnBkpE,GAAwB,KAE9E,E,gBCpKV,MAmNA,GAnN4BphF,IAiBtB,IAjBuB,GAC3BwB,EAAE,QACF6D,EAAO,8BACPkyE,EAA6B,8BAC7BC,EAA6B,UAC7BjO,EAAS,YACTmW,EAAW,YACX0C,EAAW,eACXzC,EAAc,YACdC,EAAW,aACXpoD,EAAY,WACZ4zC,EAAU,YACV9B,EAAW,cACXwW,EAAa,YACbhO,EAAW,QACXh2B,EAAO,eACPikC,GACD//E,EAEC,MAAMs/C,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BskC,GAAWtkC,EAAAA,EAAAA,IAAyB,MAEpC5M,GAASy4B,EAAAA,EAAAA,IAAgBvkE,KAAY0kE,EAAAA,EAAAA,IAAuB1kE,GAC5D26E,EAAe7uC,EAAME,SAEpByvC,EAAe,CAAGC,IAAe5iC,EAAAA,GAAAA,GAAQhN,EAAM0jB,WAEhDytB,GAA2BrK,EAAAA,GAAAA,IAAkB34B,EAAKi4B,GAClDgL,GACJtK,EAAAA,GAAAA,IAAkB34B,EAAKk4B,IACpB8K,EAECE,GAAoBzkC,EAAAA,EAAAA,IAAOukC,GAC7BC,IAA6BC,EAAkBh0D,UACjDg0D,EAAkBh0D,SAAU,GAG9B,MAAM,SAAEkwB,IAAaC,EAAAA,EAAAA,OACdshC,EAAeC,IAAoBllC,EAAAA,EAAAA,IAAS0kC,GAC7CS,EAAa/4E,QAAQ64E,GAAiBqC,GAA4B9qD,IACjEirD,EAAeC,IAAoB1nC,EAAAA,EAAAA,IAAS5zC,QAAQg7E,IAAgBtB,IAErE7E,GAAgBrnB,EAAAA,EAAAA,IAAoBvvD,EAAS,WAC5Cs9E,IAAwB3nC,EAAAA,EAAAA,IAAS5zC,QAAQ60E,GAAiB7yC,GAAAA,GAA0B6yC,MACrF,UAAE7hB,EAAS,aAAEgmB,IAAiBC,EAAAA,GAAAA,GAClCpE,GAAgBkE,GAAYc,EAAAA,EAAAA,IAAsB57E,EAAS,UAAWmyB,GAElE8oD,EAAgBN,GAAgB5lB,GAC/BwoB,EAAeC,IAAmB1kC,EAAAA,GAAAA,KAEnC4X,GAAewpB,EAAAA,EAAAA,IAA4Bl6E,GAC3Cy9E,EAAW17E,QAAQ2uD,GACnBwqB,EAAwBn5E,QAAQw4E,GAEhCmD,GAAmBnuB,EAAAA,EAAAA,IAAoBvvD,EAAS,YAC/C29E,IAAsBhoC,EAAAA,EAAAA,IAAS5zC,QAAQ27E,GAAoB35C,GAAAA,GAA0B25C,KACtFE,EAAiBX,GAA4B9qD,EAC7Cga,GAAiBoL,EAAAA,GAAAA,GAASmmC,GAAmBE,OAAgBxiF,EAAW+2B,GACxE0rD,GAAoBrC,EAAAA,GAAAA,IAAoBiC,GAAYtxC,KAAoBoxC,GAExEnC,GAAWqC,GAAYtxC,GAAkBoxC,EACzClC,EAAWtB,GAAwB/5E,EAASo7E,GAC5CE,EAAuBvB,GAAwB/5E,GAAUk7E,GACzDK,IAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtC0C,GAAW7C,GAAiBkC,EAAkBh0D,SAE5C4xD,aAAcY,KAAqBX,EAAAA,GAAAA,IACzCzrB,EAAAA,EAAAA,IAAoBvvD,EAAS,aAC5By6E,GACDmB,EAAAA,EAAAA,IAAsB57E,EAAS,YAC/BmyB,IAGI,YAAE0pD,GAAW,eAAEC,GAAc,iBAAEC,KAAqBC,EAAAA,EAAAA,IACxDh8E,EACAs6E,IAAmBG,EAAgBkB,GAAmBZ,GACrDD,IAAeyC,IAAkBD,GAAyB7C,GAGvDwB,IAAiD,KAA/Blc,EAAAA,GAAAA,GAAY6a,IAElC92B,aAAco4B,GACdl4B,qBAAsBm4B,KACpBl4B,EAAAA,GAAAA,GAAkB63B,QAAgB1gF,EAAW6gF,KAE/Cj4B,qBAAsB+5B,KACpB95B,EAAAA,GAAAA,GAAkBliD,SAAS64E,GAAiBK,KAAmBmC,IAAkBlB,MAE9E8B,GAAcC,KAAmBtoC,EAAAA,EAAAA,IAAiB,GACnDuoC,IAAmBpkC,EAAAA,EAAAA,KAAa5tC,IACpC+xE,GAAgBh2E,KAAKC,IAAI,EAAGgE,EAAEuiE,cAAc0P,YAAc,GAAG,GAC5D,IAEGvpB,GAAWooB,EAAS7zD,SAASyrC,UAAY9oB,EAAM8oB,UAAY,EAE3DuP,IAAQC,EAAAA,EAAAA,IAAapkE,GACrBykE,GAAiB1iE,SAAQ2iE,EAAAA,EAAAA,IAAuB1kE,KAChD,MACJ4P,GAAK,OAAEC,IACLk2D,IAAcnB,EAAAA,GAAAA,IAAyB94B,EAAOq4B,GAAOF,EAAaQ,GAAgBP,EAAW7qB,GAE3Fge,IAAcvd,EAAAA,EAAAA,KAAY,KAC1B+hC,GACFnB,IAAiB16E,GAIfy6E,GACFnnE,EAAAA,EAAAA,MAAa8qE,2BAA2B,CAAEp+E,YAIvCi7E,GAKDA,IAAkBmC,GACpBC,GAAiB,GAGf5B,EACFC,IAIFjlC,IAAUz2C,EAAQ7D,KAbhB0+E,GAAkByB,IAAeA,GAad,GACpB,CACDT,GAAapB,EAAeQ,EAAemC,EAAe3B,EAAgBhlC,EAASz2C,EAAS06E,EAC5FgB,IAGIzyD,IAAY2uB,EAAAA,GAAAA,GAChB,oBACCikC,IAAe,cAChBhsE,GAAS8zD,IAAoB,kBAIzB7rB,GAAS,WAAUjoC,QADDk2D,EAAc,WAAUn2D,eAAkBm2D,EAAW1iC,aAAa0iC,EAAW5hC,OAAS,KAG9G,OACE4Q,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACL99C,GAAIA,EACJ8sB,UAAWA,GACX6uB,MAAOA,GACPrB,QAASolC,QAAczgF,EAAYi8D,IAElC6jB,GAAyBnmC,EAAAA,GAAAA,cAAA,UAAQkF,IAAKqhC,EAAsBryD,UAAU,yBACtE60D,IACC/oC,EAAAA,GAAAA,cAACspC,GAAAA,EAAc,CACbpkC,IAAK+iC,EACL9kC,IAAK+iC,EACLhyD,WAAW2uB,EAAAA,GAAAA,GAAe,aAAcsjC,GAAyB,mBACjElF,QAASoH,GAAiBF,EAC1BoB,OAAK,EACLC,MAAI,EACJC,aAAW,EACXvK,WAAYxH,EACZgS,aAAcP,GACdQ,QAASlB,EACT1lC,MAAOyiC,EAAe,UAASA,WAAkBn/E,IAGrD25C,EAAAA,GAAAA,cAAA,OACEmD,IAAK/L,EACLljB,WAAW2uB,EAAAA,GAAAA,GAAe,YAAaimC,EAAmB3C,GAAyB,mBACnF/iC,IAAI,GACJL,MAAOyiC,EAAe,UAASA,YAAmBn/E,EAClD64E,WAAYxH,IAEbgR,IAAaE,GACZ5oC,EAAAA,GAAAA,cAAA,UACEkF,IAAKohC,EACLpyD,WAAW2uB,EAAAA,GAAAA,GAAe,YAAa2jC,MAG1C9O,GAAe13B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAChC8rB,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GAAe,kBAAmBmmC,MAChDhpC,EAAAA,GAAAA,cAAC+b,GAAAA,EAAY,CACXC,UAAW0qB,EACXqB,eAAa,EACbpsB,aAAcA,EACd9gD,MAAOA,GACPC,OAAQA,GACRoZ,UAAU,kBAEXizD,IACCnnC,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,gBAAiBukC,KAC9CpnC,EAAAA,GAAAA,cAAC8nC,GAAAA,EAAe,CAAC9iE,SAAUgiE,GAAkBtlC,QAAS4gB,OAGxDujB,IAAkBK,GAClBlmC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBAEd6yD,GACC/mC,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,6BACZ4yD,IAAepB,EAAkB,GAAExyE,KAAK4K,MAAyB,IAAnBkpE,OAA6B,OAG/EhnC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,0BACZ6iB,EAAM6yC,MAAQ,OAAQC,EAAAA,GAAAA,IAAoB32E,KAAKC,IAAI0sD,GAAWopB,GAAc,KAG7E,E,eC7OV,MAiCA,IAAe3lC,EAAAA,EAAAA,KACb,CAAC99C,EAAM4N,KAA8B,IAA5B,QAAE02E,GAAS12E,EAClB,MAAQ22E,aAAeC,WAAYC,IAAoBzkF,EACvD,MAAO,CACL4jB,MAAMC,EAAAA,EAAAA,IAAW7jB,EAAQskF,EAAQ10E,QACjC60E,gBACAlvE,eAAgBvV,EAAOwV,SAASC,MAAMF,eACvC,GAPL,EA/B2CnV,IAErC,IAFsC,QAC1CkkF,EAAO,KAAE1gE,EAAI,cAAE6gE,EAAa,eAAElvE,GAC/BnV,EACC,MAAM,SAAEyD,IAAakV,EAAAA,EAAAA,OAEf,UACJ4hB,EAAS,SACTD,EAAQ,YACRc,EAAW,OACX5rB,GACE00E,EACEI,EAbwB,MAaT90E,EAEfktD,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B17C,EAAS,CAAEjC,GAAIgO,GAAS,GACvB,CAAC/L,EAAU+L,IAEd,OACE4qC,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,UAAWqnC,GAAgB,eACrDxoC,QAASwoC,EAAe5nB,OAAcj8D,GAEtC25C,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CAACz5B,KAAK,QAAQ/4B,KAAMA,EAAM9f,KAAM62B,GAAaD,EAAUnlB,eAAgBA,EAAgBghE,WAAS,IACvG/7B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgBiM,EAAU,IAAED,GAC3C8f,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBAAiBi2D,EAAAA,GAAAA,IAA0BF,EAAejpD,KAEvE,I,oDC4CV,SAASopD,GAAcv9C,EAAe8a,GACpC,OAAOA,EAAQ,GAAM9a,EAAQ8a,EAAS,KAAK0iC,UAAY,CACzD,CAEA,SAnFiCzkF,IAO3B,IAP4B,OAChC0kF,EAAM,YACNC,EAAW,YACX7vC,EAAW,eACX8vC,EAAc,eACdC,EAAc,cACdC,GACD9kF,EACC,MAAM2F,EAASg/E,GAAeA,EAAYp5E,MAAMigC,GAAMA,EAAE1lB,SAAW4+D,EAAO5+D,SACpEi/D,EAA0C,IAA1BF,EAAe9kF,SAA2D,IAA3C8kF,EAAe3gF,QAAQwgF,EAAO5+D,QAC7Ek/D,EAAYH,EAAe9kF,OAAS,GAAKglF,GAAmBp/E,GAAQgvC,SACpEswC,EAAgBt/E,EAAS6+E,GAAc7+E,EAAOyvC,YAAaN,GAAe,GAAK,GAC9EowC,EAAcC,IAAmBnqC,EAAAA,EAAAA,IAAS8pC,EAAgB,EAAIG,GAE/DG,GAAUrnC,EAAAA,EAAAA,IAAuB,MACjCsnC,EAAY1/E,EAAS6+E,GAAc7+E,EAAOyvC,YAAawvC,GAAkB,GAAK,EAC9EU,EAA0BJ,IAAiBD,EA0BjD,IAxBAzrC,EAAAA,EAAAA,KAAU,KACJsrC,GACFK,EAAgBF,EAClB,GACC,CAACH,EAAeG,KAEnBzrC,EAAAA,EAAAA,KAAU,KACR,MAAM+rC,EAASH,EAAQ52D,QAEvB,GAAI+2D,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAO1xB,kBAEf1W,EAAQmoC,EAA0B,GAAK,sDACxCE,EAMHA,EAAMtR,aAAa,QAAS/2B,GAL5BooC,EAAOpxB,UAAa,gFACiDhX,+EAMzE,IACC,CAACmoC,EAAyBR,KAExBH,IAAgBh/E,EACnB,OAGF,MAAM8/E,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACElrC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,aAAa0tB,IAAI,OAC9B5B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAY,sBAAsC,QAAlB22D,EAA0B,cAAgB,KAC5EA,EAAc,IACdD,GACC5qC,EAAAA,GAAAA,cAAA,QAAM9rB,WAAW2uB,EAAAA,GAAAA,GACf,sBACC8nC,GAAiB,QAClBD,GAAiB,YAGjB1qC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAWy2D,EAAgB,aAAe,iBAInD3qC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,qBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,mBAAmB0tB,IAAI,SACnCua,EAAAA,GAAAA,GAAWmuB,EAAOhhF,OAErB02C,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,qBAAsB+nC,IAAaD,GAAiB,UACjF3qC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,qBAAqBgxB,IAAK8lC,IACzChrC,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,mBACV6uB,MAAOsoC,MAIT,ECsQV,SAASvjC,GAAgB3wC,GACvBA,EAAE2wC,iBACJ,CAEA,UAAenI,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAe,IAAb,KAAEqY,GAAMrY,EACf,MAAM,eAAEqnC,GAAmBhvB,EAAKzW,SACxBqN,OAASQ,KAAMq5D,IAAgB12E,EACvC,OAAKi1C,GAA4C,IAA1BA,EAAe90C,OAI/B,CACL80C,iBACAyhC,aALO,CAAC,CAMT,GAXe54B,EA1ToB19C,IAMlC,IANmC,QACvCqF,EAAO,KACPwgB,EAAI,eACJgvB,EAAc,UACdyhC,EAAS,WACToP,GACD1lF,EACC,MAAM,YAAEmhB,EAAW,gBAAEwkE,EAAe,gBAAEjO,IAAoB/+D,EAAAA,EAAAA,OAElDnX,GAAIsF,EAAS,OAAEzG,GAAWgF,GAC5B,QAAEugF,EAAO,QAAEx2E,GAAYyW,GACtBggE,EAAcC,IAAmB9qC,EAAAA,EAAAA,KAAkB,IACnD+qC,EAAeC,IAAoBhrC,EAAAA,EAAAA,IAAmB,KACtDirC,EAAiBC,IAAsBlrC,EAAAA,EAAAA,KAAkB,IACzDmrC,EAAcC,IAAmBprC,EAAAA,EAAAA,KAAkB,IACnDqrC,EAAaC,IAAkBtrC,EAAAA,EAAAA,KACnC4qC,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxDl5E,KAAKw7B,IAAI88C,EAAQY,UAAYl5E,KAAKI,MAAMpB,KAAKC,MAAQ,MAAQuyC,EAAAA,EAAAA,MAAuB8mC,EAAQS,aAC5F,GAGAI,GAAe1oC,EAAAA,EAAAA,IAAuB,OACpC3uC,QAASu1E,EAAW,YAAE7vC,GAAgB1lC,EACxCs3E,EAAW/B,GAAeA,EAAY/5C,MAAMY,GAAMA,EAAEmJ,WACpDgyC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAY/+E,OAAOsH,EAAQ0lC,aAAe,EAC9EgyC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAcr3E,KAAKC,OAAOo3E,EAAYx/E,KAAKqmC,GAAMA,EAAE4J,eAAgBN,EACpF+vC,EAAiBF,EAAcA,EAAY/+E,QAAO,CAACohF,EAAmBx7C,KACtEA,EAAEy7C,WACJD,EAAQhhF,KAAKwlC,EAAE1lB,QAGVkhE,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQ7hF,KAAKohB,IAAC,CACpCw+B,MAAOx+B,EAAE7iB,KACTujC,MAAO1gB,EAAET,OACTohE,OAAQ9/E,QAAQw+E,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxE7sC,EAAAA,EAAAA,KAAU,KACR,MAAM4tC,EAASvhE,EAAKzW,QAAQA,SAAS7D,MAAM5F,GAAWA,EAAOgvC,WACzDkxC,GAAgBuB,IACdA,EAAOH,WACTvP,IAEFoO,GAAgB,GAClB,GACC,CAACD,EAAchgE,EAAKzW,QAAQA,QAASsoE,KAExCl+B,EAAAA,EAAAA,KAAU,KACJ6sC,EAAc,GAChBn9E,YAAW,IAAMo9E,EAAeD,EAAc,IAAI,KAGpD,MAAMgB,EAAcZ,EAAaj4D,QAEjC,GAAI64D,EAAa,CACf,MAAMC,EAAgB,GAAQh6E,KAAKi6E,GAC7B/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYxzB,kBAK5B,GAJIwyB,GAAe,GACjBgB,EAAY/jC,UAAU/gB,IAAI,YAGvBijD,GAAUiC,EASR,CACL,MAAMC,GAAqB9B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBiB,EACzFG,EAAQ/W,aAAcuT,EAAAA,GAAAA,IAAoBoC,GACzCb,EAAM3xB,kBAAiCqgB,aAAa,oBAAsB,IAAGwT,IAChF,MAZEL,EAAYlzB,UAAa,oBACjB8vB,EAAAA,GAAAA,IAAoBoC,2LAGJiB,KAAiBA,qEAS7C,IACC,CAACjB,EAAaT,EAAQS,eAEzB7sC,EAAAA,EAAAA,KAAU,KACJosC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DplE,EAAY,CAAE9gB,SAAQyG,aACxB,GACC,CAACzG,EAAQgmF,EAAaK,EAAUvlE,EAAara,EAAW8+E,EAAQW,OAAQX,EAAQuB,QAGnF3tC,EAAAA,EAAAA,KAAU,KACR,IAAImuC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQxkF,OAAO+F,YAAW,KACxBiY,EAAY,CAAE9gB,SAAQyG,aAAY,GACX,IAAtB8+E,EAAQS,cAGN,KACDsB,GACFxkF,OAAO8G,aAAa09E,EACtB,CACD,GACA,CAAChB,EAAStmF,EAAQ8gB,EAAara,EAAW8+E,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAe9qC,EAAAA,EAAAA,KAAQ,IACpBjI,EAAiBA,EAAejvC,QAAO,CAACD,EAAmBnE,KAChE,MAAMgiB,EAAO8yD,EAAU90E,GAKvB,OAJIgiB,GACF7d,EAAOK,KAAKwd,GAGP7d,CAAM,GACZ,IAAM,IACR,CAAC2wE,EAAWzhC,IAETgzC,GAAoB1oC,EAAAA,EAAAA,KACvBr5B,IACCkgE,EAAiB,CAAClgE,IAClBggE,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAAC5/D,GAAQ,GACnB,CAAC4/D,IAGAoC,GAAuB3oC,EAAAA,EAAAA,KAC1Bv5B,IACCogE,EAAiBpgE,EAAQ,GACxB,IAGCmiE,GAAkB5oC,EAAAA,EAAAA,KACtB,KACE2mC,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,EAAc,GACxB,CAACL,EAAYK,IAGZiC,GAAyB7oC,EAAAA,EAAAA,KAC7B,KACEwmC,EAAgB,CAAEtlF,SAAQyG,aAAY,GACrC,CAACzG,EAAQyG,EAAW6+E,IAGnBsC,GAAqB9oC,EAAAA,EAAAA,KAAY,KACrC+mC,GAAmB,EAAK,GACvB,IAEGgC,GAAqB/oC,EAAAA,EAAAA,KAAY,KACrC+mC,GAAmB,GACnBE,GAAgB,EAAM,GACrB,KAGH5sC,EAAAA,EAAAA,KAAU,KACJ2sC,GAAgBO,GAAYd,EAAQuB,MAAQ/3E,EAAQA,SAAWyW,EAAKzW,QAAQ+4E,WACxD/4E,EAAQA,QAAQ7D,MAAMigC,GAAMA,EAAEmJ,UAAYnJ,EAAEy7C,aAEhEf,GAAmB,GAEvB,GACC,CAACQ,EAAUP,EAAc/2E,EAAQA,QAASw2E,EAAQuB,KAAMthE,EAAKzW,QAAQ+4E,WAExE,MAAMtjF,GAAOk3C,EAAAA,GAAAA,KA4Cb,OACE3B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,OAAO0tB,IAAKn3C,EAAKo3C,MAAQ,OAAS,OAZ/CgqC,GAAmBpgE,EAAKzW,QAAQ+4E,UAC9B/tC,EAAAA,GAAAA,cAACguC,GAAAA,EAAY,CACX/iF,SAASgjF,EAAAA,GAAAA,GAAuBxiE,EAAKzW,QAAQ+4E,SAAUtiE,EAAKzW,QAAQk5E,kBACpEruB,SA5MgB,IA6MhBsuB,UAAWL,EACXM,YA/MoB,2BAwNxBpuC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBAAiBioC,EAAAA,GAAAA,GAAWqvB,EAAQ6C,SAAU,CAAC,QAAS,QACvEruC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,aACZzpB,EAuET,SAA2B+gF,GAEzB,YAAgC,IAArBA,EAAQiB,SAjSR,IAqSPjB,EAAQW,OACH,eAGLX,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGlCjB,EAAQiB,SAAW,aAAe,eAC3C,CAtFc6B,CAAkB9C,IA/B1BgC,EAAa7nF,OAAS,GACpBq6C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,sBACZs5D,EAAaziF,KAAKqe,GACjB42B,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CACLz5B,KAAK,QACL/4B,KAAMA,OA4BX6iE,EAAc,GAAKM,GAAWvsC,EAAAA,GAAAA,cAAA,OAAKkF,IAAKmnC,EAAcn4D,UAAU,mBAChEs3D,EAAQuB,MAAQthE,EAAKzW,QAAQ+4E,WAAaxB,GACzCvsC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,OACLJ,MAAM,cACN7tB,UAAU,iBACVsvC,SAAUqoB,EACVnqC,QAASmsC,EACTtlC,UAAU,iBAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAIlBq4D,GACCvsC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAewtB,QAASoG,IACpC4kC,EAEG1sC,EAAAA,GAAAA,cAACuuC,GAAAA,EAAa,CACZ/iE,QAASohE,EACT9gC,SAAU4hC,EACVlqB,SAAUv4D,EAAQ4rC,aAAe40C,EACjC+C,eAAgB/C,EAAeE,OAAgBtlF,EAC/CyX,OAAK,IAIPkiC,EAAAA,GAAAA,cAACyuC,GAAAA,EAAU,CACT77C,KAAO,QAAOlmC,IACd8e,QAASohE,EACT9gC,SAAU2hC,EACVjqB,SAAUv4D,EAAQ4rC,aAAe40C,EACjCiD,cAAejD,EAAeE,EAAc,QAAKtlF,MAKzDkmF,GACAvsC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACZs3D,EAAQoB,QAAQ7hF,KAzFzB,SAA4Bu/E,GAC1B,OACEtqC,EAAAA,GAAAA,cAAC2uC,GAAU,CACThyC,IAAK2tC,EAAO5+D,OACZg/D,cAAeqB,IAAiBQ,EAChCjC,OAAQA,EACRC,YAAaA,EACb7vC,YAAaA,EACb8vC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAgFM+B,IAAkBE,GAClB1sC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,qBA0CvB,SAAgCzpB,EAAcsH,EAA0BiZ,GACtE,OAAKA,EAIEvgB,EAAKsH,EAAS,SAAW,OAAQiZ,EAAO,KAHtCvgB,EAAKsH,EAAS,4BAA8B,kCAIvD,CAhD4C68E,CAAuBnkF,EAAM+gF,EAAQuB,KAAM/3E,EAAQ0lC,cAExFgyC,GACC1sC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL2jB,QAAM,EACNrC,SAAmC,IAAzBmoB,EAAchmF,OACxBw8C,KAAK,OACLT,QAASisC,GAERljF,EAAK,oBAGT+hF,GACCxsC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL2jB,QAAM,EACN1jB,KAAK,OACLT,QAASksC,GAERnjF,EAAK,oBAGN,K,4BCnTV,MA2HA,IAAek1C,EAAAA,EAAAA,KAzGe/5C,IAcxB,IAdyB,QAC7BqF,EAAO,oBACPs1E,EAAmB,UACnBpR,EAAS,YACTmW,EAAW,YACX0C,EAAW,UACX6G,EAAS,YACT3f,EAAW,aACX9xC,EAAY,cACZsoD,GAAgB,EAAK,YACrBhO,EAAW,MACXjyC,EAAK,aACLqpD,EAAY,sBACZC,GACDnpF,EACC,MAAMopF,GAAUC,EAAAA,EAAAA,IAAkBhkF,IAC5B,SAAEq5C,IAAaC,EAAAA,EAAAA,MAEf2qC,GAAmBnqC,EAAAA,EAAAA,KAAY,KACnC+pC,GAAe,GACd,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJG,EAAQ,IACRr1E,EAAG,WACHs1E,EAAU,MACVn5E,EAAK,YACLuU,EAAW,MACXiT,EAAK,MACLsZ,GACEi4C,EACEK,GAAuBC,EAAAA,GAAAA,GAAS9kE,EArDhB,KAsDhB+kE,EAAYviF,QAAQqiF,GAAwBp5E,GAASk5E,GAC3D,IAAIK,GAAgB,EACpB,GAAID,GAAaP,GAASvxD,QAAUuxD,EAAQj4C,MAAO,CACjD,MAAM,MAAEl8B,EAAK,OAAEC,GAAWm0D,GAAyBhkE,OAAS5E,OAAWA,EAAWi+C,GAClFkrC,EAAgB30E,IAAUC,CAC5B,CACA,MAAM20E,GAAsBhyD,GAASsZ,IAAU+3C,IAAiBU,EAE1Dt7D,GAAY2uB,EAAAA,GAAAA,GAChB,UACAgsC,GAAa,aACbW,GAAiB,qBAChB/xD,IAAUsZ,IAAU83C,GAAa,gBAClC93C,GAAS,cACRw4C,GAAa,cAGhB,OACEvvC,EAAAA,GAAAA,cAAA,OACE9rB,UAAWA,EACX,gBAAei7D,GAAYC,GAAY,GACvCxtC,IAAI,QAEHnkB,IAAUsZ,GACTiJ,EAAAA,GAAAA,cAAC0vC,GAAK,CACJzkF,QAASA,EACTs1E,oBAAqBA,EACrBpR,UAAWA,EACXmW,YAAaA,EACbnjC,KAAMqtC,EAAgB,YAAc,SACpCtgB,YAAaA,EACbqP,gBAAiBkR,EACjB/J,cAAeA,EACfhO,YAAaA,EACbjyC,MAAOA,EACPic,QAAS+tC,EAAqBP,OAAmB7oF,EACjDs/E,eAAgBoJ,IAGnBQ,GACCvvC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACb8rB,EAAAA,GAAAA,cAAC2vC,GAAAA,EAAQ,CAACz7D,UAAU,YAAYpa,IAAKA,EAAKxQ,KAAM6lF,GAAYC,KAC1DP,GAAa54E,GACb+pC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAAcioC,EAAAA,GAAAA,GAAWlmD,IAEvCo5E,GACCrvC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBAAoBioC,EAAAA,GAAAA,GAAWkzB,EAAsB,CAAC,QAAS,UAIhFR,GAAa93C,GACbiJ,EAAAA,GAAAA,cAAC4vC,GAAK,CACJ3kF,QAASA,EACTkyE,8BAA+BoD,EAC/BpR,UAAWA,EACXmW,YAAaA,EACb0C,YAAaA,EACb5qD,aAAcA,EACd8xC,YAAaA,EACbwW,cAAeA,EACfhO,YAAaA,EACbh2B,QAAS+tC,EAAqBP,OAAmB7oF,EACjDs/E,eAAgBoJ,IAGhB,I,gBC7GV,MAsFA,IAAepvC,EAAAA,EAAAA,KAtFe/5C,IAOxB,IAPyB,QAC7BqF,EAAO,qBACPw6E,EAAoB,eACpBjO,EAAc,WACdzT,EAAU,MACVt+B,EAAK,YACL+/C,GACD5/E,EAEC,MAAMs/C,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7Bl5C,GAAOk3C,EAAAA,GAAAA,KACPtd,GAAUwrD,EAAAA,EAAAA,IAAkB5kF,IAE5B,MACJgL,EAAK,KACL3M,EAAI,OACJukC,EAAM,SACNF,EAAQ,OACRmiD,EAAM,MACNryD,GACE4G,EAEE0rD,GAAWvtC,EAAAA,GAAAA,IAASwtC,EAAAA,EAAAA,IAAmBvyD,IACvC0oD,EAAwBn5E,QAAQw4E,GAChCe,EAAuBvB,GAAwB/5E,GAAUk7E,EAAuB4J,GAmBtF,OAjBA5hB,IAA4B/6D,IAAgC,IAA9Bo0E,GAAyBp0E,EACrD,GAAKqyE,GAOL,GAAIsK,EAAU,CACZ,MAAMpI,EAAYziC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KACvD9C,GAAoBoL,GAAU,EAAOvY,EAAgBzT,EAAYt+B,GAAOnpB,MAAMsrE,IAC5ED,EAAU5kC,MAAMiU,YAAY,gBAAiB4wB,GAC7CD,EAAU7N,aAAa4N,EAAAA,IAA2B,GAAG,GAEzD,OAZMF,GACFtiC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KAA2B9N,gBAAgB+N,EAAAA,IAWpF,GACC,CAACjC,EAAsBsK,EAAUvY,EAAgBzT,EAAYt+B,IAG9Dua,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLhxB,UAAU,WAETje,GACC+pC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,UAASioC,EAAAA,GAAAA,GAAWlmD,IAElC3M,GACC02C,EAAAA,GAAAA,cAAA,YAAMmc,EAAAA,GAAAA,GAAW7yD,EAAM,CAAC,QAAS,QAEnC02C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAY,gBAAcuJ,EAAQ,YAAc,KAClDzwB,QAAQywB,IACPuiB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,2BACZiyD,GAAyBnmC,EAAAA,GAAAA,cAAA,UAAQkF,IAAKqhC,EAAsBryD,UAAU,yBACtE67D,GACC/vC,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,gBACVivB,IAAK4sC,EACL3sC,IAAI,GACJL,MAAOyiC,EAAe,UAASA,WAAkBn/E,EACjDw+E,YAAY,eAGdkL,GAAYtyD,GACZuiB,EAAAA,GAAAA,cAACiwC,GAAAA,EAAQ,CACPp1E,MAAO2qE,GAAe/nD,EAAMuzC,YAAYn2D,MACxCC,OAAQ2iB,EAAMuzC,YAAYl2D,OAC1Bo1E,kBAAgB,KAKxBlwC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBACV8qB,EAAAA,GAAAA,GAAenR,EAAQF,EAAUljC,EAAK6+B,MACtCwmD,GAAU9vC,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,yBAGvB,IC/GV,IAAgB,KAAO,uBAAuB,SAAW,uBAAuB,IAAM,uBAAuB,QAAU,wBC+EvH,IAAek1C,EAAAA,EAAAA,KAvD2B/5C,IAGpC,IAHqC,QACzCqF,EAAO,aACPmyB,GACDx3B,EACC,MAAM,YAAEy/B,EAAW,kBAAE8qD,IAAsB5xE,EAAAA,EAAAA,MACrC9T,GAAOk3C,EAAAA,GAAAA,KACPtd,GAAUwrD,EAAAA,EAAAA,IAAkB5kF,IAE5B,OAAEhF,EAAM,GAAEmB,GAAO6D,EAEjBmlF,GAAuBrrC,EAAAA,EAAAA,KAAY,KACvCorC,EAAkB,CAAElqF,SAAQwJ,IAAK,CAACrI,IAAM,GACvC,CAACnB,EAAQmB,EAAI+oF,KAEhBE,EAAAA,GAAAA,GAAYD,EAAsBhzD,EAhBX,SAgB6C/2B,GAEpE,MAAM,OACJwnC,EAAM,SACNF,EAAQ,cACRyN,GACE/W,GAEE,MACJxpB,EAAK,OAAEC,EAAM,UAAEo8B,EAAS,SAAE2oB,GACxBzkB,EAEEknB,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B1f,EAAY,CACVp/B,SACAyG,UAAWtF,EACXuiC,iBAAiB,GACjB,GACD,CAAC1jC,EAAQmB,EAAIi+B,IAEhB,OACE2a,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,eACvCvB,QAAS4gB,GAETtiB,EAAAA,GAAAA,cAAC+b,GAAAA,EAAY,CACXJ,aAAczkB,GAAWguC,QACzBrqE,MAAOA,EACPC,OAAQA,EACRkhD,WAAS,EACT9nC,UAAW+uB,GAAAA,UAEZj2C,QAAQ6yD,IAAa7f,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW+uB,GAAAA,WAAkB4mC,EAAAA,GAAAA,IAAoBhqB,IAC5E7f,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW+uB,GAAAA,KACdjD,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GAAe,YAAaI,GAAAA,QACzCx4C,EAAK,qBAAqBu0C,EAAAA,GAAAA,GAAenR,EAAQF,KAEhD,ICzEJ2iD,GAAe,IAAI9uE,IAAIlU,OAAOsf,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpB2jE,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,W,0CCapFC,GAAiB,KACjBC,GAAqB,CACzBv2E,MAAO,IACPC,OAAQ,IACRu2E,KAAM,GACNl0B,MAAO,GAIHm0B,GAAU,CAAEC,OAAQ,oyBAsP1B,IAAe5xC,EAAAA,EAAAA,KA3OgB/5C,IAOzB,IAP0B,QAC9BqF,EAAO,KACPwf,EAAI,aACJ2S,EAAY,eACZo6C,EAAc,WACdzT,EAAU,MACVt+B,GACD7/B,EACC,MAAM,QAAEk+B,IAAYvlB,EAAAA,EAAAA,MAEd2mC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B0oC,GAAe1oC,EAAAA,EAAAA,IAAuB,MACtCl5C,GAAOk3C,EAAAA,GAAAA,KACP6vC,GAAcC,EAAAA,GAAAA,KAEdrvD,GAAWsvD,EAAAA,EAAAA,IAAmBzmF,IAC9B,KAAE3D,EAAI,IAAEqqF,GAAQvvD,EAEhBwvD,GAAaj/E,EAAAA,EAAAA,MACbk/E,GAAYC,EAAAA,EAAAA,IAAiB7mF,EAAS2mF,GACtCG,EAA6B,YAATzqF,GAAuBuqF,OAC7CxrF,EAD0D4E,EAAQyH,KAAO0vB,EAAS4vD,OAASJ,GAGxFK,EAAOC,IAAYtxC,EAAAA,EAAAA,IAAS+wC,GAE7BQ,EAA4B,UAAT7qF,GAA8B,YAATA,IAAuBuqF,GAC/D,MACJh3E,EAAK,OAAEC,EAAM,KAAEu2E,EAAI,MAAEl0B,GACnBi0B,GAEEtQ,EAAY9zE,QAAQowB,KAAiBg1D,EAAAA,EAAAA,IAAmBH,EAAOp3E,EAAOC,EAAQu2E,EAAMl0B,GACpF5C,GAAe/X,EAAAA,GAAAA,GAASs+B,GACxBuR,GAAmBrnB,EAAAA,GAAAA,GAAYzQ,GAC/B+3B,EAAa/3B,GAAgB83B,EAE7BE,EAAa9nE,IAAQ2W,EAAAA,EAAAA,IAAS3W,EAAKrjB,IACnCorF,EAAc/nE,GAAQ8nE,EAAc9nE,OAAkBpkB,EACtDosF,EAAchoE,IAAS8nE,EAAc9nE,OAAkBpkB,EAEvD+oE,GAAQC,EAAAA,EAAAA,IAAapkE,GAErBynF,GAAmBhwC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAATp7C,IAAuB2qF,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBV,EAChC,OAAOU,ED1EJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAen+E,KAAK2/E,IAAID,GAAO1/E,KAAKi6E,GAAK,MAAS,GAAKkE,CACjE,CCuE4ByB,CAAkBF,EAAKvB,EAAK,GACnD,CAAC/pF,EAAM2qF,EAAOZ,IAOX0B,GAAkBhuC,EAAAA,EAAAA,KAAakoC,IACnC,GAAa,YAAT3lF,EAAoB,OACxB,MACM4lF,EAAgB70B,GAAanlD,KAAKi6E,GAClC/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYxzB,kBAEtBu5B,EAAW/nF,EAAQyH,KAAO0vB,EAAS4vD,QAASr/E,EAAAA,EAAAA,MAC5C26E,GAAoB,EAAI0F,EAAW5wD,EAAS4vD,QAAU9E,EACtD5jF,GAAO2pF,EAAAA,GAAAA,IAAqBxoF,EAAiB,IAAXuoF,GAEnC5H,GAAUiC,GAUbA,EAAQ/W,YAAchtE,EACtB8hF,EAAM3xB,kBAAmBqgB,aAAa,oBAAsB,IAAGwT,MAV/DL,EAAYlzB,UAAa,8CACYzwD,8LAGX4jF,KAAiBA,uCACfI,kCAM9B,GACC,CAAChmF,EAAM2D,EAAQyH,KAAM0vB,EAAU33B,IA4IlC,OA1IAysD,EAAAA,EAAAA,KAAgB,KACVm1B,EAAaj4D,SACf2+D,EAAgB1G,EAAaj4D,QAC/B,GACC,CAAC2+D,IAEJ5kB,IAA4B/6D,IAA4B,IAA1B8/E,GAAqB9/E,EACjD,GAAI++E,EACGe,GACHhuC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KAA2B9N,gBAAgB+N,EAAAA,UAKpF,GAAI4K,EAAY,CACd,MAAM3K,EAAYziC,EAAI9wB,QAAS0iD,QAAwB2Q,EAAAA,KACvD9C,GAAoB2N,EAAYljB,EAAOoI,EAAgBzT,EAAYt+B,GAAOnpB,MAAMsrE,IAC9ED,EAAU5kC,MAAMiU,YAAY,gBAAiB4wB,GAC7CD,EAAUz+B,UAAU/gB,IAAI,sBACxBw/C,EAAU7N,aAAa4N,EAAAA,IAA2B,GAAG,GAEzD,IACC,CAACyK,EAAkB/iB,EAAOoI,EAAgBzT,EAAYt+B,EAAO6sD,KAEhElzC,EAAAA,EAAAA,KAAU,KAEJlsC,KAAKqgE,IAAIoe,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkBj+E,KAAKqgE,IAAIoe,EAAIwB,KAAOlB,EAAMkB,MAAQhC,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,EAAI,GACZ,CAACA,EAAKM,KAETttC,EAAAA,GAAAA,IAAW,KACT6sC,GAAa,GACXK,OAA6CxrF,EAAP,KAAzB0rF,GAAoB,KAErC1B,EAAAA,GAAAA,IAAY,KACV,MAAMpD,EAAcZ,EAAaj4D,QAE7B64D,GACF8F,EAAgB9F,EAClB,GACC8E,EAAmB,SAAO1rF,GA2F3B25C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLhxB,UAAU,mCACVwtB,QA7KgB4gB,KAClB,MAAMxoD,EDlFH,SAAuB84E,EAAaO,EAAc9B,GACvD,MAAQ,sCAAoBuB,KAAOO,MAASP,KAAOO,KAAQ9B,IAC7D,CCgFgB+B,CAAcnB,EAAMW,IAAKX,EAAMkB,KAAM9B,GACjDvtD,EAAQ,CAAEhqB,OAAM,GA6KdkmC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAjEZo+D,EAEHtyC,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,iBACVivB,IAAKmvC,EACLlvC,IAAI,oBACJL,MAAQ,UAASquC,GAAmBv2E,oBAAoBu2E,GAAmBt2E,cANvDklC,EAAAA,GAAAA,cAACiwC,GAAAA,EAAQ,CAACp1E,MAAOA,EAAOC,OAAQA,IA2C1D,WACE,GAAKw3E,EAEL,OACEtyC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGhzC,QAAQ0lF,KAAsBb,GAC7B7xC,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,oBACV6uB,MAAQ,UAA4B,EAAnB2vC,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMW,GAAexwC,EAAAA,GAAAA,GACnB,MACAv7C,EACAuqF,GAAa,WAEf,GAAa,YAATvqF,EACF,OACE04C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWm/D,EAAcC,wBAAyBhC,IACrDtxC,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CAACrzE,KAAMkqF,EAAYrpE,KAAMopE,EAAYt+D,UAAU,yBAChC7tB,IAArB+7B,EAASmxD,SACRvzC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,YAAY6uB,MAAQ,gBAAe3gB,EAASmxD,gBAMnE,GAAa,UAATjsF,EAAkB,CACpB,MAAMy6C,ED7ML,SAAuBz6C,GAC5B,OAAKA,EACEgpF,GAAavnE,IAAIzhB,IACnBgpF,GAAavnE,IAAIzhB,EAAKkhB,MAAM,KAAK,KACjC0oE,IAGiBsC,EAHYlsF,EAI3BksF,EAAIhrE,MAAM,IAAIhd,QAAO,CAACioF,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrBzC,GAAcvrF,SAHtC,UAMpB,IAAwB6tF,CAFxB,CCwMoBI,CAAcxxD,EAASyxD,WAC/BC,EDpNL,SAAyBxsF,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,EAEpB,CCiNsBysF,CAAgB3xD,EAASyxD,WACzC,OACE7zC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWm/D,EAAcC,wBAAyBhC,GAASvuC,MAAQ,gBAAehB,KACrF/B,EAAAA,GAAAA,cAAA,OAAKmD,IAAK2wC,EAAS5/D,UAAU,aAAakvB,IAAI,KAGpD,CAEA,OACEpD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWm/D,EAAclwC,IAAK6wC,GAAQ5wC,IAAI,IAEnD,CAaO6wC,GAGP,CAUOC,IAhGP,WACE,GAAK/B,EACL,MAAa,UAAT7qF,EAEA04C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,uBACZkO,EAASnsB,OAEZ+pC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,0BACZkO,EAAS+xD,UAKL,YAAT7sF,EAEA04C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,uBAAuBzpB,EAAK,uBAC3Cu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,2BACZkgE,EAAAA,GAAAA,IAAkB3pF,EAAMmnF,EAAY3mF,EAAQg1E,YAE7C4R,GAAa7xC,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgBgxB,IAAKmnC,UAPzD,CAYF,CAwEKgI,GACG,IC/MV,IAAe10C,EAAAA,EAAAA,KA1DY/5C,IAIrB,IAJsB,QAC1BqF,EAAO,iBACPqpF,EAAgB,aAChBl3D,GACDx3B,EACC,MAAM,qBAAEw0D,IAAyB77C,EAAAA,EAAAA,MAC3Bg2E,EAAOtpF,EAAQ2H,QAAQ2hF,MACvB,MACJt+E,EAAK,YAAEuU,GACL+pE,EAEEC,EAAYxnF,QAAQowB,KAAiBq3D,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAY1nF,QAAQowB,KAAiBu3D,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAepyC,EAAAA,GAAAA,GAASgyC,GAAYF,GACpCO,GAAeryC,EAAAA,GAAAA,GAASkyC,GAAYJ,GAS1C,OACEt0C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,QACb8rB,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,UACV6uB,MAAQ,8BACRrB,QAZkBozC,KACtB16B,EAAqB,CACnB1tD,UAAWzB,EAAQ7D,GACnB69B,OAAQh6B,EAAQ8iE,cAAe,GAAG,IAClC,IAUI6mB,IAAiBC,GACjB70C,EAAAA,GAAAA,cAACiwC,GAAAA,EAAQ,CAAC/7D,UAAU,6BAErB0gE,GACC50C,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,kBACVivB,IAAKyxC,EACLxxC,IAAKntC,IAGR4+E,GACC70C,EAAAA,GAAAA,cAAA,SACE9rB,UAAU,kBACVu1D,aAAW,EACXF,OAAK,EACLwL,yBAAuB,EACvBC,UAAQ,EACRxL,MAAI,EACJrmC,IAAK0xC,KAIX70C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,SAASje,KACtB8iC,EAAAA,EAAAA,IAAe9tC,IAAY+0C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAe1J,GACvD,ICpDK,SAASyqE,GAAkBC,GAiDxC,OAAOv1C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACV,CAAC99C,EAAQ2vF,KACP,MAAM,QAAElqF,GAAYkqF,EACpB,MAAO,CACL3d,gBAAgBxQ,EAAAA,EAAAA,IAAqBxhE,GACrCu+D,YAAYqxB,EAAAA,EAAAA,IAAwB5vF,EAAQyF,EAAQ7D,IACrD,GANOk8C,EAhDmD1D,IAC7D,MAAM,eACJ43B,EAAc,WACdzT,EAAU,QACV94D,EAAO,WACP+lE,GACEpxB,GACE,uBAAEluC,IAA2B6M,EAAAA,EAAAA,MAE7B82E,GAAsBtwC,EAAAA,EAAAA,KAAa5tC,IACvCA,EAAE2wC,kBACFp2C,EAAuB,CAAEhF,UAAWzB,EAAQ7D,GAAIqK,UAAW0F,GAAGy3C,UAAW,GACxE,CAACl9C,EAAwBzG,IAEtBqqF,GAAW5yC,EAAAA,EAAAA,KAAQ,KACvB,MAAQsuB,WAAYukB,EAAI,QAAE7zC,GAAY9B,EACtC,MAAO,IACFA,EACH43B,iBACAzT,aACAiN,WAAY,IACPukB,EACHjnD,EAAG,EACHc,EAAG,GAELsS,QAAS81B,OAAiBnxE,EAAYq7C,EACvC,GACA,CAAC9B,EAAO43B,EAAgBzT,IAE3B,OACE/jB,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,4BAA6BkhB,GAAc,eACrEhhB,MAAOiuB,EAAc,SAAQA,EAAW1iC,aAAa0iC,EAAW5hC,OAAS,GACzEsS,QAAS81B,EAAiB6d,OAAsBhvF,GAE/CmxE,GACCx3B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,0BACZ6vC,GACC/jB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAKnB8rB,EAAAA,GAAAA,cAACk1C,EAAqBI,GAClB,IAaZ,CC5DA,MAAME,GAAkBP,GAAkBvF,IACpC+F,GAAkBR,GAAkBrF,IA2G1C,IAAetsC,EAAAA,EAAAA,KACb,CAAC99C,EAAM4N,KAA4B,IAA1B,MAAEktD,GAAOltD,EAChB,MAAM,OAAEnN,GAAWq6D,EAAMiN,YACnB9nC,GAAQugB,EAAAA,EAAAA,IAAYxgD,GACpBkwF,GAAoBC,EAAAA,EAAAA,IAAwBnwF,EAAQS,GAC1D,MAAO,CACLw/B,QACAmwD,YAAapwF,EAAO4f,YAAYC,iBAChCqwE,oBACD,GATL,EAxFyC9vF,IAYnC,IAZoC,MACxC06D,EAAK,oBACLigB,EAAmB,kBACnBsV,EAAiB,aACjBz4D,EAAY,MACZgyC,EAAK,YACLsI,EAAW,YACXoe,EAAW,aACXhH,EAAY,YACZ8G,EAAW,kBACXF,EAAiB,MACjBjwD,GACD7/B,EACC,MAAM,qBAAEmwF,IAAyBx3E,EAAAA,EAAAA,MAE3By3E,EAAa11B,EAAMx1D,SAASnF,OAE5BswF,GAAqBlxC,EAAAA,EAAAA,KAAa95C,IACtC8qF,EAAqB,CAAE9vF,OAAQgF,EAAQhF,OAAQyG,UAAWzB,EAAQ7D,IAAK,GACtE,CAAC2uF,KAyDIl7E,MAAOq7E,EAAgBp7E,OAAQq7E,GAAoBL,EAAYngB,eAEvE,OACE31B,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,QACV6uB,MAAQ,UAASmzC,gBAA6BC,QAE7C71B,EAAMx1D,SAASC,KA9DpB,SAA4BE,EAAqB+Y,GAC/C,MAAM,MAAEyZ,EAAK,MAAEsZ,IAAUC,EAAAA,EAAAA,IAAkB/rC,GACrCmrF,EAAaR,GAAY5sE,EAAAA,EAAAA,IAAqB/d,IAC9Cs6E,EAAiB6Q,GAAYpxE,UAC7B,WAAEgsD,EAAU,MAAEC,GAAU6kB,EAAY/kB,OAAO/sD,GAG3CshE,GAAc+Q,EAAAA,EAAAA,KAAuBtnF,EAAAA,EAAAA,MAAa9D,GAClD+8E,GAAcsO,EAAAA,EAAAA,KAAuBvnF,EAAAA,EAAAA,MAAa9D,GAExD,GAAIwyB,EAAO,CACT,MAAMgoD,EAAuBoQ,IAE1BzmB,EAAQprD,IAAUgyE,EAAa,EAAIhpF,QAAQikE,EAAQd,GAAcK,MAAQS,EAAQd,GAAcI,SAGlG,OACEvwB,EAAAA,GAAAA,cAACw1C,GAAe,CACdpuF,GAAK,gBAAc82E,EAAAA,EAAAA,IAAiBjzE,EAAQ7D,MAC5C6D,QAASA,EACTkyE,8BAA+BoD,EAC/B+E,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChBvU,WAAYA,EACZ0G,YAAaA,EACbh2B,QAASotC,EACTnJ,eAAgBsQ,EAChBvQ,cAAegQ,EAAkBzlF,SAAShF,EAAQ7D,IAClDq+B,MAAOA,GAGb,CAAO,GAAIsR,EACT,OACEiJ,EAAAA,GAAAA,cAACy1C,GAAe,CACdruF,GAAK,gBAAc82E,EAAAA,EAAAA,IAAiBjzE,EAAQ7D,MAC5C6D,QAASA,EACTkyE,8BAA+BoD,EAC/B+E,YAAaA,EACb0C,YAAaA,EACbzC,eAAgBA,EAChBnoD,aAAcA,EACd4zC,WAAYA,EACZ0G,YAAaA,EACbh2B,QAASotC,EACTnJ,eAAgBsQ,EAChBvQ,cAAegQ,EAAkBzlF,SAAShF,EAAQ7D,IAClDq+B,MAAOA,GAMf,IAUQ,ICxFV,IAAI8wD,GAEJ,MA4LA,GA5LiC3wF,IAM3B,IAN4B,QAChCqF,EAAO,oBACPs1E,EAAmB,YACnB+E,EAAW,aACXloD,EAAY,cACZsoD,GACD9/E,EAEC,MAAMs/C,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B6yC,GAAqB7yC,EAAAA,EAAAA,IAAuB,MAE5C8yC,GAAY9yC,EAAAA,EAAAA,IAAyB,MAErC5M,EAAQ9rC,EAAQ2H,QAAQmkC,MAExB8nC,GAAiBhB,EAAAA,GAAAA,IAAkB34B,EAAKq7B,IAEvCsF,EAAeC,IAAoBllC,EAAAA,EAAAA,IAAS0kC,GAC7CS,EAAa/4E,QAAQ64E,GAAiBhH,GAAkBzhD,IACxD,UAAE4iC,EAAS,aAAEgmB,IAAiBC,EAAAA,GAAAA,IAClCzrB,EAAAA,EAAAA,IAAoBvvD,EAAS,WAC5B86E,GACDc,EAAAA,EAAAA,IAAsB57E,EAAS,UAC/BmyB,IAGM4oD,aAAcY,IAAqBX,EAAAA,GAAAA,IACzCzrB,EAAAA,EAAAA,IAAoBvvD,EAAS,aAC5By6E,EACDz2C,EAAAA,GAAAA,QACA7R,IAGKorD,EAAeC,IAAmB1kC,EAAAA,GAAAA,KAEnCsiC,GADWr5E,SAAQm4E,EAAAA,EAAAA,IAA4Bl6E,KACxBu9E,EACvBlC,EAAWtB,GAAwB/5E,EAASo7E,GAC5CG,GAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtCU,EAAkBlB,IAAkB2C,GAAkB9C,EACtDwB,GAAiD,KAA/Blc,EAAAA,GAAAA,GAAY6a,IAGlC92B,aAAc2nC,EACdznC,qBAAsBm4B,IACpBl4B,EAAAA,GAAAA,GAAkB63B,OAAgB1gF,EAAW6gF,IAE1CvH,EAAagX,IAAkB/1C,EAAAA,EAAAA,KAAkB,IACjD57B,EAAU4xE,IAAeh2C,EAAAA,EAAAA,IAAiB,IAEjDxB,EAAAA,EAAAA,KAAU,KACR,IAAKugC,EACH,OAGF,MAAMkX,EAAYC,GAAAA,GAA4B,EAExC5J,EAA0C,GAAzB2J,EADL,GACkC3jF,KAAKi6E,GACnDG,EAAmBJ,EAAgBloE,EAAWkoE,EAE9C6J,EAAWN,EAAUriE,QACrB4iE,EAAoBR,EAAmBpiE,QACvCg3D,EAAQ4L,EAAkBv9B,kBAE3B2xB,EAUFA,EAAM3xB,kBAAiCqgB,aAAa,oBAAqBwT,EAAiB7/E,YAT3FupF,EAAkBj9B,UAAa,yBACf+8B,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnB3J,KAAiBA,sCAChBA,mCAO7B0J,EAAYG,EAAS3N,YAAc2N,EAASl3B,SAAS,GACpD,CAAC8f,EAAa36D,IAEjB,MAAMiyE,EAAajqF,QAAQgzD,GAAa6e,GAElCqY,GAAcnyC,EAAAA,EAAAA,KAAY,KACzB0xC,EAAUriE,UAIfuiE,GAAe,GACfC,EAAY,IACZtT,EAAAA,GAAAA,GAASmT,EAAUriE,UAEnB+iE,EAAAA,EAAAA,KAAQ,KACNX,EAAmBpiE,QAAS2lC,UAAY,EAAE,IAC1C,GACD,IAEGq9B,GAAiBryC,EAAAA,EAAAA,KAAY,KACjCwxC,OACAA,GAAeW,CAAW,GACzB,CAACA,IAEE50B,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B,IAAKib,EAGH,YAFA8lB,GAAkByB,IAAeA,IAKnC,GAAI7B,EAEF,YADAnnE,EAAAA,EAAAA,MAAa8qE,2BAA2B,CAAEp+E,YAI5C,MAAM8rF,EAAWN,EAAUriE,QACvBurD,EACEoX,EAASM,SACX/T,EAAAA,GAAAA,GAASyT,IACTO,EAAAA,GAAAA,OAEAP,EAASxkE,SAGX6kE,IAEAL,EAASxkE,QACTwkE,EAAS3N,YAAc,GACvB9F,EAAAA,GAAAA,GAASyT,IACTO,EAAAA,GAAAA,MAEAX,GAAe,GACjB,GACC,CAACS,EAAgBzX,EAAa+F,EAAe1lB,EAAW/0D,IAErDk+E,GAAmBpkC,EAAAA,EAAAA,KAAa5tC,IACpC,MAAM4/E,EAAW5/E,EAAEuiE,cAEnBkd,EAAYG,EAAS3N,YAAc2N,EAASl3B,SAAS,GACpD,IAEH,OACE7f,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLhxB,UAAU,yBACVwtB,QAAS4gB,GAERtC,GACChgB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACb8rB,EAAAA,GAAAA,cAACspC,GAAAA,EAAc,CACbrI,QAASgW,EACT/xC,IAAKuxC,EACLtzC,IAAK6c,EACL9rC,UAAU,aACVrZ,MAAOi8E,GAAAA,GACPh8E,OAAQg8E,GAAAA,GACR9B,UAAQ,EACRD,yBAAuB,EACvBxL,OAAQ5J,EACR6J,MAAO7J,EACP8J,aAAW,EACXpH,QAAS1C,EAAcuX,OAAc7wF,EACrCqjF,aAAc/J,EAAcwJ,OAAmB9iF,EAC/CsjF,QAASlB,KAIfzoC,EAAAA,GAAAA,cAAA,UACEkF,IAAKohC,EACLpyD,WAAW2uB,EAAAA,GAAAA,GAAe,YAAa2jC,GACvCzjC,MAAQ,UAAS+zC,GAAAA,iBAAwCA,GAAAA,SAE3D92C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WAAWgxB,IAAKsxC,IAC9BE,GACC12C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAY,iBAAgBkzD,KAC/BpnC,EAAAA,GAAAA,cAAC8nC,GAAAA,EAAe,CAAC9iE,SAAU0gE,EAAgBkB,EAAmBZ,MAGhEhmB,IAAc6lB,GACd7lC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBAEf8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,0BACZyrD,GAAckK,EAAAA,GAAAA,IAAoB4M,EAAUriE,QAASg1D,cAAeS,EAAAA,GAAAA,IAAoB9yC,EAAM8oB,YAC5F8f,GAAe8W,EAAUriE,QAASijE,SAAWr3C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAE3D,ECjKV,GAhDoCtuB,IAA0B,IAAzB,QAAEqF,EAAO,QAAEy2C,GAAS97C,EACvD,MAAM6E,GAAOk3C,EAAAA,GAAAA,KAyBb,OACE3B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACZjpB,EAAQ8iE,cAAehjE,KAAK4oE,GAC3B3zB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,OACZy/C,EAAI5oE,KAAKk6B,GACR+a,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLgD,QAAM,EACNqe,SAA0B,gBAAhBv+B,EAAO39B,KAEjBo6C,QAASA,IAAMA,EAAQ,CAAEh1C,UAAWzB,EAAQ7D,GAAI69B,YAEhD+a,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,uBAAsBioC,EAAAA,GAAAA,GAAW1xD,EAAKw6B,EAAO37B,QAnCrD27B,KAClB,MAAM,KAAE39B,GAAS29B,EACjB,OAAQ39B,GACN,IAAK,MACH,IAAK8mB,EAAAA,IAAAA,KAAiB6W,EAAOnrB,KAC3B,OAAOkmC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBAEtB,MAEF,IAAK,UACH,OAAO8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBACtB,IAAK,MACL,IAAK,UACH,OAAO8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACtB,IAAK,kBACH,OAAO8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,sBACtB,IAAK,UACL,IAAK,gBACH,OAAO8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAER,EAgBLqjE,CAAWtyD,SAKhB,ECqCV,IAAe0a,EAAAA,EAAAA,KA5EqB/5C,IAG9B,IAH+B,WACnCgI,EAAU,SACV41D,GACD59D,EACC,MAAM,aAAE4xF,IAAiBj5E,EAAAA,EAAAA,MAEnB9T,GAAOk3C,EAAAA,GAAAA,MACP,SACJz7C,EAAQ,OAAED,EAAM,cAAEoqB,EAAa,cAAEviB,EAAa,uBAAEsd,EAAsB,iBAAEkF,EAAgB,gBAAE8L,GACxFxuB,EAEE00D,GAAcvd,EAAAA,EAAAA,KAAY,KAC9ByyC,EAAa,CAAEpwF,GAAInB,EAAQC,WAAUk2B,mBAAkB,GACtD,CAACo7D,EAAcvxF,EAAQC,EAAUk2B,IAE9Bq7D,GAAiB/0C,EAAAA,EAAAA,KAAQ,KAC7B,IAAKpyB,GAAkB3qB,OACrB,OAIF,MAAQ0c,OAASQ,KAAMq5D,GAAa5nE,OAASuO,KAAM+iC,KAAgB72C,EAAAA,EAAAA,MAEnE,OAAOuhB,EAAiBvlB,KAAK+6B,IACpB1E,EAAAA,EAAAA,IAAS0E,GAAUo2C,EAAUp2C,GAAU8f,EAAU9f,KACvD96B,OAAOgC,QAAQ,GACjB,CAACsjB,IAEJ,QAAsBjqB,IAAlBgqB,EACF,OAoBF,MAAMqnE,EAAY1qF,QAAQoe,GAA0Btd,GAAiBsd,EAAyBtd,GAExF6pF,EAAetnE,EAAiB5lB,EAAK,WAAY,wBAAoBpE,EAAWgqB,GACnF7H,MAAM,KACNzd,KAAK0M,GACU,mBAANA,EAAyBuoC,EAAAA,GAAAA,cAACkc,GAAAA,EAAe,CAAC5yD,MAAM+2C,EAAAA,GAAAA,IAAqBhwB,KAAqB5Y,SAElGpR,EAEJ,OACE25C,EAAAA,GAAAA,cAAA,OACE,YAAUK,EAAAA,GAAAA,IAAqBhwB,GAC/B6D,WAAW2uB,EAAAA,GAAAA,GAAe,gBAAiB60C,GAAa,aAAcl0B,GAAY,YAClF5hB,IAAKn3C,EAAKo3C,MAAQ,MAAQ,MAC1BH,QAAS4gB,GAETtiB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,4BACVujE,GAA4C,IAA1BA,EAAe9xF,SAAiBq6C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBAhClEujE,GAAkBA,EAAe9xF,OAAS,GACxCq6C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBAAkB0tB,IAAKn3C,EAAKo3C,MAAQ,MAAQ,OACxD41C,EAAe1sF,KAAKqe,GACnB42B,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CACLj/B,IAAKvzB,EAAKhiB,GACV+6C,KAAK,QACL/4B,MAAMgY,EAAAA,EAAAA,IAAShY,EAAKhiB,IAAMgiB,OAAkB/iB,EAC5CkC,MAAO64B,EAAAA,EAAAA,IAAShY,EAAKhiB,SAAwBf,EAAlB+iB,OA2BnC42B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,QAAQ0tB,IAAI,QACxBvxB,EAAgBsnE,EAAeltF,EAAK,kBAEvCu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACT,I,4BC9FV,UAAgB,KAAO,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,OAAS,uBAAuB,UAAY,wBCkCjP0jE,GAAmB,IAAM5pD,GAAAA,GACzB6pD,GAAc,IAAM7pD,GAAAA,GA0H1B,IAAe2R,EAAAA,EAAAA,KAxH6B/5C,IAMtC,IANuC,SAC3CkqC,EAAQ,eACRgoD,EAAc,gBACd7vF,EAAe,mBACfknC,EAAkB,oBAClBoxC,GACD36E,EACC,MAAM,mBAAEmyF,IAAuBx5E,EAAAA,EAAAA,MAGzB2mC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B2I,EAAW,eAAgBxc,EAE3BhB,GAAoB4T,EAAAA,EAAAA,KAAQ,IAChCvT,GAAoBh+B,MAAMigC,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,MAC1D,CAACX,EAAoBW,IAClBkoD,EAAelpD,GAAmBI,YAAY9nC,GAE9C+lB,GAAc8qE,EAAAA,GAAAA,GAAe3rC,EAAWxc,EAASp4B,gBAAarR,GAE9D6xF,GAAmBx1C,EAAAA,EAAAA,KAAQ,KAC/B,IAAK4J,EAAU,OAAOxd,GAAmBC,iBAAiB3nC,GAE1D,IAAK+lB,EAAa,OAClB,MAAMgrE,EAAahpD,GAAoBh+B,MAAMinF,GAAcA,EAAUtoD,SAASF,WAAaziB,EAAYrhB,SACnGijC,iBAAiB3nC,GACrB,OAAO+wF,CAAU,GAChB,CAACrpD,EAAmBK,EAAoBhiB,EAAam/B,IAElD+rC,GAAW31C,EAAAA,EAAAA,KAAQ,KACvB,GAAIw1C,EACF,OAAOA,EAGT,IAAKJ,GAAgBxgF,SACnB,OAGF,MAAM,SAAEA,GAAawgF,EAGrB,OAAOxgF,EAFapE,KAAKI,MAAMJ,KAAKya,SAAWrW,EAAS3R,SAE3ByB,EAAE,GAC9B,CAAC8wF,EAAkBJ,IAEhBjZ,GAAiBhB,EAAAA,GAAAA,IAAkB34B,EAAKq7B,GAExC+X,EAAsBN,GAAiB,UAASA,IAChD9W,EAAkBmX,GAAa,UAASA,IAExCE,GAAsB/1C,EAAAA,GAAAA,GAAS81C,GAAsBN,GACrDQ,GAAkBh2C,EAAAA,GAAAA,GAAS0+B,GAAkBmX,GAE7CI,GAAiB/1C,EAAAA,EAAAA,KAAQ,IAC7Bz6C,GAAiBkJ,MAAMogC,IAAWb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,MACjE,CAAC7nC,EAAiB6nC,IAEfmnD,EAAajqF,QAAQyrF,IAAmBnsC,GAAYisC,IAAwBC,IAEhFzpC,aAAc2pC,EACdzpC,qBAAsB0pC,IACpBzpC,EAAAA,GAAAA,GAAkB+nC,OAAY5wF,GAAW,EAAM,QAE7CuyF,GAAc7zC,EAAAA,EAAAA,KAAY,KACzB0zC,GAAgB/rF,WACrBqrF,EAAmB,CAAErrF,UAAW+rF,EAAe/rF,UAAWojC,YAAW,GACpE,CAAC2oD,GAAgB/rF,UAAWojC,EAAUioD,KAElCc,EAAmBC,EAAqBC,IAAyBh1C,EAAAA,GAAAA,KAClEi1C,IAAsB1sC,GAAc2qC,GAAe4B,GAEnD3kE,GAAY2uB,EAAAA,GAAAA,GAChBI,GAAAA,KACAy1C,GAAyBz1C,GAAAA,UACzBqJ,GAAYrJ,GAAAA,eAGd,OACEjD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWA,EAAWgxB,IAAKA,GAC7B8zC,GAAsBh5C,EAAAA,GAAAA,cAACi5C,GAAAA,EAAmB,CAACnpD,SAAUA,EAAUX,mBAAoBA,IACnFmd,GACCtM,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVtrC,WAAYo4B,EAASp4B,WACrBwc,UAAW+uB,GAAAA,YACXm6B,8BAA+BmD,IAGlCmY,GACC14C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkiC,GAAAA,EAAe,CACdvlC,IAAK07C,EACLnkE,WAAW2uB,EAAAA,GAAAA,GAAeI,GAAAA,OAAe01C,GACzCx2C,KAAM01C,GACN1V,OAAQqW,EACRna,KAAMQ,EACNP,QAAM,EACNpuE,uBAAqB,EACrBmyE,QAASuW,IAEVtsC,GACE4rC,GAAoBrZ,GAAkB7+B,EAAAA,GAAAA,cAACiF,GAAiB,CAACnV,SAAUA,IAEpEkQ,EAAAA,GAAAA,cAACkiC,GAAAA,EAAe,CACdvlC,IAAKq7C,EACL9jE,WAAW2uB,EAAAA,GAAAA,GAAeI,GAAAA,aAAqB01C,GAC/Cx2C,KAAMy1C,GACNzV,OAAQoW,EACRla,KAAMQ,EACNP,QAAM,EACNpuE,uBAAqB,EACrBgpF,OAAQJ,EACRzW,QAAS0W,KAKb,ICrEV,IAAep5C,EAAAA,EAAAA,KAxDV/5C,IAQC,IARA,SACJkqC,EAAQ,QACR7kC,EAAO,gBACPhD,EAAe,mBACfknC,EAAkB,mBAClBgqD,EAAkB,eAClBrB,EAAc,oBACdvX,GACD36E,EACC,MAAM,eAAEqqC,IAAmB1xB,EAAAA,EAAAA,OACrB,gBAAE8yB,GAAoBpmC,EAAQ4lC,UAE9BuoD,GAAiB12C,EAAAA,EAAAA,KAAQ,KAC7B,IAAKy2C,IAAuB9nD,EAC1B,OAIF,MAAM6qC,GAAYntE,EAAAA,EAAAA,MAAYsT,MAAMQ,KAEpC,OAAOwuB,EACJrmC,QAAQquF,IAAmB3oD,EAAAA,EAAAA,IAAe2oD,EAAevpD,SAAUA,EAASA,YAC5E/kC,KAAKsuF,GAAmBnd,EAAUmd,EAAejkF,UACjDpK,OAAOgC,QAAQ,GACjB,CAAC8iC,EAASA,SAAUuB,EAAiB8nD,IAElC72B,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B9U,EAAe,CACbH,SAAUA,EAASA,SACnB7pC,OAAQgF,EAAQhF,OAChByG,UAAWzB,EAAQ7D,IACnB,GACD,CAAC6D,EAAS6kC,EAAUG,IAEvB,OACE+P,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,WAAW2uB,EAAAA,GAAAA,IAAe5R,EAAAA,EAAAA,IAAiBnB,IAAa,UACxDqS,KAAK,OACLT,QAAS4gB,GAETtiB,EAAAA,GAAAA,cAACs5C,GAAqB,CACpBrxF,gBAAiBA,EACjB6nC,SAAUA,EAASA,SACnBX,mBAAoBA,EACpB2oD,eAAgBA,EAChBvX,oBAAqBA,IAEtB6Y,GAAgBzzF,OACfq6C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACZklE,EAAeruF,KAAKqe,GAAS42B,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CAACxyD,KAAMA,EAAM+4B,KAAK,aAEvDnC,EAAAA,GAAAA,cAACkc,GAAAA,EAAe,CAAC5yD,MAAM+2C,EAAAA,GAAAA,IAAqBvQ,EAAS9kB,SAClD,IChBb,IAAe20B,EAAAA,EAAAA,KArCiB/5C,IAU1B,IAV2B,QAC/BqF,EAAO,UACPsuF,EAAS,SACT5nB,EAAQ,gBACR1pE,EAAe,mBACfknC,EAAkB,aAClBqqD,EAAY,eACZ1B,EAAc,oBACdvX,EAAmB,iBACnBkZ,GACD7zF,EACC,MAAMswB,GAAawsB,EAAAA,EAAAA,KAAQ,IACzBz3C,EAAQ4lC,UAAW77B,QAAQxJ,QAAO,CAACC,EAAKqkC,IAAarkC,EAAMqkC,EAAS9kB,OAAO,IAC1E,CAAC/f,IAEJ,OACE+0C,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,YAAa02C,GAAa,cACpDx2C,MAAO4uB,EAAY,cAAaA,WAAetrE,GAE9C4E,EAAQ4lC,UAAW77B,QAAQjK,KAAK+kC,GAC/BkQ,EAAAA,GAAAA,cAAC05C,GAAc,CACb/8C,KAAKg9C,EAAAA,EAAAA,IAAqB7pD,EAASA,UACnCA,SAAUA,EACV7kC,QAASA,EACThD,gBAAiBA,EACjBknC,mBAAoBA,EACpBgqD,mBAAoBjjE,GA7BH,IA6BwCujE,EACzD3B,eAAgBA,EAChBvX,oBAAqBA,MAGxBiZ,EACG,IC0BV,IAAe75C,EAAAA,EAAAA,KAlEwB/5C,IAIjC,IAJkC,UACtCu4C,EAAS,QACTlzC,EAAO,OACPhF,GACDL,EACC,MAAM,4BAAEg0F,IAAgCr7E,EAAAA,EAAAA,MAElC9T,GAAOk3C,EAAAA,GAAAA,MACP,WAAE7uC,EAAU,QAAEgsC,EAAO,OAAEv0B,GAAW4zB,EAClC07C,EAAsB,WAAXtvE,EACXuvE,EAAyB,SAAXvvE,IAAsBzX,EAEpCinF,GAAah1C,EAAAA,EAAAA,KAAY,KAC7B60C,EAA4B,CAAE96C,UAAS1pC,OAAQnP,GAAS,GACvD,CAACA,EAAQ64C,EAAS86C,IAEfI,GAAat3C,EAAAA,EAAAA,KAAQ,IACrB5D,EACEg7C,EAAoB,mCACpBD,EAAiB/mF,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7CgnF,EAAoB,8BACpBD,EAAiB/mF,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAACgnF,EAAaD,EAAU/mF,EAAYgsC,IAEjC+gB,GAAWnd,EAAAA,EAAAA,KAAQ,IAChBvE,EAAU0hB,UAAWo6B,EAAAA,GAAAA,IAAmBxvF,EAAM0zC,EAAU0hB,eAAYx5D,GAC1E,CAACoE,EAAM0zC,EAAU0hB,WAEdq6B,GAAgB7Z,EAAAA,GAAAA,IAAW51E,EAAqB,IAAfQ,EAAQyH,MAC/C,OACEstC,EAAAA,GAAAA,cAAA,OAAK9rB,UCxDc,wBDyDjB8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,UACLJ,MAAM,cACNjkC,OAAK,EACLqnC,QAAM,EACNzD,QAASq4C,EACT7lE,UC/D+C,uBDgE/CsvC,UAAWtlB,EAAAA,GACXqK,UAAW99C,EAAKqI,EAAa,YAAc,aAE3CktC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAW4qB,EAAU,sBAAwB,gBAElDkB,EAAAA,GAAAA,cAAA,OAAK9rB,UCrE0E,wBDsE7E8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UCtEwG,wBDsE7EzpB,EAAKuvF,IACrCh6C,EAAAA,GAAAA,cAAA,OAAK9rB,UCvEuO,wBDwE1O8rB,EAAAA,GAAAA,cAAA,KACE9rB,WAAW2uB,EAAAA,GAAAA,GACT,mBC1EsI,uBD0EpGg3C,GC1EsK,wBD0E1I/mF,GC1E0G,0BD6E5KktC,EAAAA,GAAAA,cAAA,QAAM9rB,UC7EsQ,wBD8EzQ2rC,EAAWp1D,EAAK,0BAA2B,CAACyvF,EAAer6B,IAAaq6B,KAI3E,I,+EE5DV,MAAMC,GAAkB,MAAQnsD,GAAAA,GAwBhC,IAAe2R,EAAAA,EAAAA,KAtBiB/5C,IAI1B,IAJ2B,MAC/BslB,EAAK,UACLgJ,EAAS,QACTwtB,GACD97C,EACC,MAAM6E,GAAOk3C,EAAAA,GAAAA,KACb,OACE3B,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GChCM,uBDgCsB3uB,GACvC6uB,MAAQ,qCAAmCq3C,EAAAA,GAAAA,IAAyBlvE,GAAOmvE,cAC3E34C,QAASA,GAERx2B,EACG80B,EAAAA,GAAAA,cAACs6C,GAAAA,EAAS,CAACpvE,MAAOA,EAAOi3B,KAAMg4C,KAC/Bn6C,EAAAA,GAAAA,cAAA,OAAKmD,IAAKo3C,GAAUn3C,IAAI,KAC3Bl4B,GAAOjV,OAAQkmD,EAAAA,GAAAA,GAAWjxC,EAAMjV,OAASxL,EAAK,WAC9CygB,GAAO6hB,UAAYiT,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACjC8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACT,IEiOJsmE,GAAe,CAAEjJ,OAAQ,kvBAEzBkJ,GAAmB,CAAElJ,OAAQ,qvBAG7BmJ,GAAsB,KAAO1sD,GAAAA,GAC7B2sD,GAA4B,KAAO3sD,GAAAA,GAqgCzC,IAAe2R,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAQ2vF,KACP,MAAM,eACJ3Y,EAAc,gBAAEn0E,EAAe,gBAAEJ,EAAe,wBAAEynC,IAChD5oC,EAAAA,EAAAA,IAAetB,IACb,aAAE43B,GAAiB53B,GACnB,QACJyF,EAAO,MAAEq1D,EAAK,eAAEs6B,EAAc,WAAEC,EAAU,SAAE30F,EAAQ,gBAAEsE,EAAe,sBAAEswF,EAAqB,eAAEC,GAC5F5F,GACE,GACJ/tF,EAAE,OAAEnB,EAAM,SAAEmU,EAAQ,cAAE4gF,EAAa,iBAAEl0E,EAAgB,WAAEhU,EAAU,kBAAEsd,EAAiB,YAAEw9C,EAAW,gBACjG7gD,EAAe,SAAEynB,GACfvpC,EAEE1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BghE,GAAiBC,EAAAA,EAAAA,IAAqB1hE,EAAQS,GAC9Cg1F,GAAgBC,EAAAA,EAAAA,IAAqBj1F,GACrC8xD,EAAYxvD,IAAQm+D,EAAAA,EAAAA,IAAcn+D,GAClC2pC,EAAU3pC,IAAQ4yF,EAAAA,EAAAA,IAAY5yF,GAC9B6yF,EAAgB7yF,GAAM4+B,UAEtBk0D,EAAehzF,EAAgBkC,YAAclC,EAAgBkC,WAAW0F,SAAS7I,GACjFk0F,GAAmBr0B,IAAkBs0B,EAAAA,EAAAA,IAAsBtwF,GAC3DuwF,EAAgBZ,GAAkBC,GAAcS,EAChD5vF,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAC9BwwF,GAAej0B,EAAAA,EAAAA,IAAsBhiE,EAAQyF,GAC7Cg8B,EAAY7sB,GAAWiP,EAAAA,EAAAA,IAAW7jB,EAAQ4U,QAAY/T,EACtDq1F,EAAoBhwF,GAAQtE,IAAM8qC,EACpC3pC,EAAKglB,UAAU0oB,mBAAmBvqC,GAAQtE,SAC1Cf,EAEEs1F,EAAqBz1F,GAAWuf,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,QAAYG,EACrFu1F,EAAc3wF,EAAQ7D,KAAOu0F,EAE7BE,EAAkB/0E,IAAqB60E,EACvC90E,EAAeC,IAAqB+0E,GACtC3hF,EAAAA,EAAAA,IAAkB1U,EAAQy1F,GAAiBD,EAAgBA,EAAgB/0F,EAAQ6gB,QACnFzgB,EACEy1F,EAAqBj1E,IAAgBk1E,EAAAA,EAAAA,IAAkBv2F,EAAQqhB,EAAc7Z,QAAQ4gE,IACrFouB,EAA6D,gBAAvCn1E,GAAcjU,QAAQ6H,QAAQnT,KAEpDi+E,GAAiB0W,EAAAA,EAAAA,IAAqBz2F,EAAQyF,GAC9CyrE,EAAgC,WAApBlsE,IAChB81D,EACIA,EAAMx1D,SAAS0lC,MAAMlkB,IAAMiwD,EAAAA,EAAAA,IAAuB/2E,EAAQ8mB,EAAGpmB,MAC7Dq2E,EAAAA,EAAAA,IAAuB/2E,EAAQyF,EAAS/E,KAI5CiK,UAAWwmE,EAAgB3nE,YAAa4nE,EAAgB,oBAAEpnE,GACvDknE,GAAa8F,GAAmB,CAAC,GAE9B91E,MAAOw1F,IAAcnkE,EAAAA,EAAAA,IAAwBvyB,IAAW,CAAC,EAE3D22F,IAAcC,EAAAA,EAAAA,IAA6BnxF,GAC3CoxF,GAAgBF,KAAexY,EAAAA,EAAAA,IAAoBn+E,EAAQ22F,IAAeA,QAAc91F,EACxFi2F,IAAsBC,EAAAA,EAAAA,IAA4BtxF,GAExD,IAAI84D,GAEFA,GADEzD,GAAOx1D,SACIw1D,EAAMx1D,SAAS0xF,OAAMz6E,IAAA,IAAG3a,GAAIsF,GAAWqV,EAAA,OAAKqzE,EAAAA,EAAAA,IAAwB5vF,EAAQkH,EAAU,KAEtF0oF,EAAAA,EAAAA,IAAwB5vF,EAAQ4B,GAG/C,MAAM,SAAEqwE,IAAkC,WAApBjtE,IAAgCU,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,IAAc,CAAC,EAC5Gw/E,IAAgB+W,EAAAA,EAAAA,IAAoBj3F,EAAQyF,GAC5CyxF,GAA0BtsE,GAC5BviB,EAAAA,EAAAA,IAAiBrI,EAAQ4qB,EAAkBnqB,OAAQmqB,EAAkBlqB,WAAakqB,OAClF/pB,EAEE6pC,GAAoBljC,QAAQ/B,EAAQoE,aAAepE,EAAQklC,UAC3DC,GAA8BF,IAChCz/B,EAAAA,EAAAA,IAA0BjL,EAAQS,EAAQgF,EAAQoE,WAAa,QAC/DhJ,EACEs2F,GAAkBzsD,GACtB4qD,GAAwB5gF,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmqC,SAAgC/pC,EACxF4E,EAEE2xF,GAAoBr0F,GAAMupC,iBAAiB7hC,SAAShF,EAAQ7D,IAE5Dy1F,GAAe32F,IAAamB,EAAAA,IAAkBkB,GAAME,SAAWsyF,EAC/D+B,GAAeD,IAAgB5kD,EAAAA,EAAAA,IAAuBzyC,EAAQyF,IAAY1C,GAAM8V,SAAS0+E,EAAAA,UAC3F12F,EAEE22F,GAAahwF,SAAQ0kF,EAAAA,EAAAA,IAAmBzmF,IACxCgyF,IAAmBC,EAAAA,EAAAA,IAAuB13F,EAAQS,GAClDk3F,IAA+BrpF,EAAAA,EAAAA,IAAmCtO,EAAQS,EAAQgF,EAAQ7D,IAEhG,MAAO,CACLq+B,OAAOugB,EAAAA,EAAAA,IAAYxgD,GACnB41F,gBACAE,kBACAE,gBACAC,eACAx0D,YACA40D,gBAAiBA,GAAmBG,EACpCJ,cACA/0E,eACAi1E,qBACA5rD,qBACAwnC,aAAa0lB,EAAAA,EAAAA,IAAyB53F,EAAQyF,GAC9CoyF,iBAAiBC,EAAAA,EAAAA,IAAsB93F,EAAQS,GAC/CywE,YACA2kB,eACAsB,mBACA11B,iBACAg0B,gBACAljC,YACA7lB,UACAulC,YACAr6C,eACA8+D,YACAG,iBACAC,uBACA9kB,gBAAgBxQ,EAAAA,EAAAA,IAAqBxhE,GACrCu+D,cACAw5B,gBACEvwF,QAAQ/B,EAAQoE,aACZpE,EAAQklC,YACTqtD,EAAAA,EAAAA,IAA8Bh4F,EAAQS,EAAQgF,EAAQoE,WAE3DnJ,WACAw/E,iBACA+X,aAAkC,WAApBjzF,EACdgqC,WACA8/C,kBAAkB+B,EAAAA,EAAAA,IAAuB7wF,EAAQyF,GACjDyyF,kBAAkBpH,EAAAA,EAAAA,IAAuB9wF,EAAQyF,GACjD0yF,sBAAuBn4F,EAAOwV,SAASC,MAAM0iF,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyBr4F,GAC7C4qB,kBAAmBssE,GACnBvtD,mBAAoB3pC,EAAO2pC,mBAC3BsC,iBAAiBzB,EAAAA,EAAAA,IAAe/kC,QAAW5E,GAAY0pC,EAAAA,EAAAA,IAAsBvqC,EAAQS,GACrFgC,gBAAiB00F,IAAmB10F,EAAgB00F,GAAgBv1F,IACpEsoC,0BACAktD,qBACAkB,oBAAoCz3F,IAApB0mB,GAAiCvnB,EAAO61C,eAAetuB,IAAkBgD,UACzFguE,qBAAqC13F,IAApB0mB,EAAgCvnB,EAAO61C,eAAetuB,IAAkBzjB,UAAOjD,EAChG4tB,WAAWjI,EAAAA,EAAAA,IAA2BxmB,GACtCuV,eAAgBvV,EAAOwV,SAASC,MAAMF,eACtC2gF,oBACAoB,gBACAhF,eAAgBtyF,EAAOiuB,oBACvBopE,gBACAI,oBACAe,uBAAwBx4F,EAAOwV,SAASC,MAAMgjF,aAC9Cd,gCACAe,cAAelxF,QAAQzE,GAAMglB,UAAU4wE,kBAClC3C,GAAiBwB,KAAe,CAAEtxF,aACnCoH,GAAc,CAAEssE,gBAAgBgf,EAAAA,EAAAA,IAAqB54F,EAAQyF,EAA6B,cAApBT,OAC5C,iBAAnB+6E,GAA+B,CAAEA,qBACxC7O,GAAa,CACfC,iBACAC,mBACApnE,sBACA5C,aAAayxF,EAAAA,EAAAA,IAAwB74F,EAAQS,EAAQC,EAAUsE,IAElE,GA7Je84C,EAjgCuB19C,IAiFrC,IAjFsC,QAC1CqF,EAAO,cACPmwF,EAAa,6BACbkD,EAA4B,8BAC5BnhB,EAA6B,8BAC7BC,EAA6B,MAC7B9c,EAAK,UACL6O,EAAS,WACT0rB,EAAU,eACVD,EAAc,WACd2D,EAAU,UACVhf,EAAS,gBACTzC,EAAe,eACfie,EAAc,UACd9mE,EAAS,cACTuqE,EAAa,uBACbC,EAAsB,sBACtB3D,EAAqB,eACrBgD,EAAc,gBACdC,EAAe,aACfhhB,EAAY,MACZt3C,EAAK,gBACL61D,EAAe,OACf5vF,EAAM,cACN8vF,EAAa,aACbC,EAAY,UACZx0D,EAAS,YACT20D,EAAW,gBACXC,EAAe,aACfh1E,EAAY,mBACZi1E,EAAkB,eAClB1c,EAAc,eACdmG,EAAc,kBACdr1C,EAAiB,YACjBwnC,EAAW,gBACX2lB,EAAe,UACf3mB,EAAS,eACTC,EAAc,iBACdC,EAAgB,oBAChBpnE,EAAmB,YACnB5C,EAAW,aACXyuF,EAAY,eACZp0B,EAAc,cACdg0B,EAAa,UACbljC,EAAS,QACT7lB,GAAO,SACPulC,GAAQ,aACRr6C,GAAY,UACZ8+D,GAAS,cACTG,GAAa,oBACbC,GAAmB,eACnBxE,GAAc,cACdoG,GAAa,eACb1mB,GAAc,WACdzT,GAAU,gBACVw5B,GAAe,SACfr3F,GAAQ,gBACRy2F,GAAe,mBACfxtD,GAAkB,gBAClBsC,GAAe,gBACfxpC,GAAe,wBACfynC,GAAuB,gBACvBllC,GAAe,aACfizF,GAAY,SACZjpD,GAAQ,cACRkxC,GAAa,iBACb4O,GAAgB,iBAChBoJ,GAAgB,mBAChBE,GAAkB,sBAClBD,GAAqB,kBACrBvtE,GAAiB,kBACjBwsE,GAAiB,qBACjB3f,GAAoB,eACpBliE,GAAc,kBACd2gF,GAAiB,aACjBoB,GAAY,aACZD,GAAY,iBACZI,GAAgB,uBAChBe,GAAsB,6BACtBb,GAA4B,2BAC5B9f,IACDz3E,EACC,MAAM,uBACJ8L,GAAsB,qBACtB0oD,GAAoB,uBACpBxoD,GAAsB,sBACtB8sF,GAAqB,iBACrBtvF,KACEmP,EAAAA,EAAAA,MAGE2mC,IAAMvB,EAAAA,EAAAA,IAAuB,MAE7Bg7C,IAAkBh7C,EAAAA,EAAAA,IAAuB,MAEzCi0B,IAAaj0B,EAAAA,EAAAA,IAAuB,MAEpCi7C,IAAmBj7C,EAAAA,EAAAA,IAAO,GAE1Bl5C,IAAOk3C,EAAAA,GAAAA,MAENk9C,GAAuBC,KAA0Bl+C,EAAAA,EAAAA,KAAS,IAC1Dm+C,GAAwBC,GAAoBC,KAAqBl7C,EAAAA,GAAAA,MAClE,SAAEO,KAAaC,EAAAA,EAAAA,OAErBg5B,EAAAA,GAAAA,IAAeohB,GAAiBL,GAEhC,MAAM,kBACJt8B,GAAiB,oBAAEic,GAAmB,wBACtChc,GAAyBC,kBAAmBiB,GAAa,uBACzDhB,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuBnd,GAAKpzC,EAAAA,IAAgB0lE,IAAgB,EAAM71C,EAAAA,KAEtEyd,EAAAA,EAAAA,KAAU,KACJ4iB,IACFpwD,IACF,GACC,CAACowD,GAAmBpwD,KAEvB,MAAM8rE,GAAwBZ,GAAmB,GAC1C3sB,GAASwtB,KAAa55B,EAAAA,GAAAA,GAAQ25B,KACrCt+B,EAAAA,EAAAA,KAAU,KACJs+B,IAIJ5uE,WAAW6uE,GArIU,GAqICb,EAAmC,GACxD,CAACA,EAAiBa,GAAWD,KAEhC,MAAM,qBAAEzuB,KAAyBC,EAAAA,GAAAA,GAAkBiB,QAAS9pD,EAAWq3E,IAAuB,IAG5Ft2E,GAAIsF,GAAS,OAAEzG,GAAM,YAAE2nE,GAAW,SAAExzD,GAAQ,qBAAE4S,IAC5C/hB,GAEJm0C,EAAAA,EAAAA,KAAU,KACR,IAAK5K,GAAU,OACf,MAAMptC,EAAKk5D,EAAQA,EAAMx1D,SAASw1D,EAAMx1D,SAASnF,OAAS,GAAGyB,GAAKsF,GAElE,MAAO,KACL2wE,GAA2B,CAAEG,0BAA2B,CAACp2E,GAAKq2E,WAAW,GAAO,CACjF,GACA,CAACnd,EAAO9rB,GAAU9nC,GAAW2wE,KAEhC,MAAM9zD,IAAUymB,EAAAA,EAAAA,IAAe/kC,GACzBmkE,IAAQC,EAAAA,EAAAA,IAAapkE,GACrB4rC,GAAkC,cAApBrsC,IAAmCS,EAAQ4rC,YACzDqoD,IAAWC,EAAAA,EAAAA,IAAel0F,KAAa4wF,EACvCuD,GAAYpyF,QAAQojB,KAA0C,WAApB5lB,GAC1C60F,IAAgBC,EAAAA,EAAAA,IAAsBr0F,GACtCs0F,GAAmBF,KAAkBhD,IAAiBC,IACtDkD,GAAe7C,IAAiB9rD,aAAc4uD,EAAAA,EAAAA,IAAkB9C,GAAgB9rD,WAChFq+B,GACJtB,MACK3G,GAAkBpwB,MACnBokD,IACArtB,GAAY8xB,sBACZL,GAEAzyB,GAAU5/D,QAAQszD,IAAUA,EAAOx1D,SAASnF,OAAS,IACrD26D,GAAOx1D,SAAS0lC,MAAMmvD,GAA4C,IAApCryF,OAAOC,KAAKoyF,EAAI/sF,SAASjN,SACvDi6F,GAA4B1vD,IAAsBuuD,EAClDoB,GAA2B3vD,IAAsB4qD,EACjDnjB,QAA6CtxE,IAAxB43E,GACrB6hB,KACFnoB,IAAsBH,IAAkB6jB,GACtCwE,IAEAE,GAAahoC,IAAclhB,IAAe5rC,EAAQ+0F,sBAAwB3C,EAC1E4C,GAAWjzF,QAAQywF,IACnB7vB,KACEA,GAAYsyB,eAAkBj5B,IAAmBmI,IAAU6rB,IAC5DrtB,GAAYuyB,eAGbC,GAAevD,IAAgBqC,GAE/B3nB,IAAgBxyB,EAAAA,EAAAA,KAAY,CAAC5tC,EAAkD9H,KACnFqC,GAAuB,CACrBhF,aACA2C,eACI8H,GAAGy3C,UAAY,CAAEn9C,WAAW,MAC5Bm7D,IAAW,CAAEp7D,gBAAiB8uD,EAAOx1D,SAASC,KAAIqI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,MACpE,GACD,CAACsK,GAAwBhF,GAAWkgE,GAAStM,IAE1C+/B,GAAgB7E,EAAgB9vF,OAASrF,EACzCi6F,GAAyBtzF,SAAS6xF,KAA0B7xE,IAAwB+wE,IAEpFwC,GAAa3yB,KAAgB3G,GAAkBg0B,IAAkBoF,IAAiB5E,EAAe4E,GACjGG,GAAa5yB,GAAc6tB,EAAe4E,IAE1C,gBACJ5nB,GAAe,YACfnW,GAAW,kBACXJ,GAAiB,kBACjB8W,GAAiB,yBACjBC,GAAwB,gBACxB9hB,GAAe,wBACfoiB,GAAuB,iBACvBtnB,GAAgB,SAChBimB,GAAQ,uBACRH,GAAsB,8BACtB8B,IACEvC,GACFC,GACAryB,GACAx4C,GACAkgE,EACA5/D,QAAQwqE,IACRxqE,QAAQyqE,IACRzqE,QAAQ0qE,GACRvU,GACAlB,GACAh8D,GACA0xE,GACAC,GACAxI,GACAywB,KAGI,kBACJY,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChB1R,GAAgB,gBAChB2R,GAAe,sBACfC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACfjL,GAAkB,eAClBkL,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,IC1fW,SACbh3F,EACA8sE,EACAtsE,EACAhF,EACAC,EACAgqC,EACAg/B,EACAr4B,EACAqkD,EACA56B,EACAigC,EACAC,EACAv5D,EACA61D,GAEA,MAAM,SACJzzF,EAAQ,iBAAEwI,EAAgB,aAAE7D,EAAY,gBAAEysE,EAAe,gBAAEinB,EAAe,iBAC1E5zE,EAAgB,qBAAEioE,EAAoB,aAAE4L,EAAY,gBAAE7wF,EAAe,uBAAE8wF,EAAsB,yBAC7FC,IACEtjF,EAAAA,EAAAA,OAGFnX,GAAIsF,EAAS,YAAEkhE,EAAW,iBAAE9mD,EAAgB,cAAEk0E,EAAa,oBAAE3zE,EAAmB,UAAEhY,GAChFpE,EAEEw1F,GAAoB17C,EAAAA,EAAAA,KAAY,KAC/Bw7C,GAILl3F,EAAS,CAAEjC,GAAIm5F,EAAWn5F,IAAK,GAC9B,CAACm5F,EAAYl3F,IAEVq3F,GAAoB37C,EAAAA,EAAAA,KAAY,KAC/By7C,EAMDtxB,GAAetB,GAAak0B,cAC9B9zF,EAAa,CAAE/H,OAAQu6F,EAAWp5F,GAAIsF,UAAWkhE,EAAYk0B,gBAE7Dz4F,EAAS,CAAEjC,GAAIo5F,EAAWp5F,KAR1ByK,EAAiB,CAAE5G,QAASR,EAAK,eASnC,GACC,CACDykE,EAAalhE,EAAc4/D,EAAanjE,EAAMpB,EAAUm3F,EAAY3uF,IAGhE8uF,GAAoB57C,EAAAA,EAAAA,KAAY,KAC/B9d,GAIL59B,EAAS,CAAEjC,GAAI6/B,EAAU7/B,IAAK,GAC7B,CAAC6/B,EAAW59B,IAETu3F,GAAmB77C,EAAAA,EAAAA,KAAY,KACnC/2C,EAAa,CACX/H,OAAQi1F,GAAwBF,EAAgBA,EAAgB/0F,EAChEC,WACAwG,UAAWoa,EACXvX,eAAgB2rF,GAAwBF,OAAgB30F,EAAYqG,EACpEjF,mBAAmB,GACnB,GACD,CAACuG,EAAcktF,EAAsBF,EAAe/0F,EAAQC,EAAU4gB,EAAkBpa,IAErFwiF,GAAmBnqC,EAAAA,EAAAA,KAAY,KACnC01B,EAAgB,CACdx0E,SACAC,WACA2Y,QAASnS,EACTuB,OAAQ4oC,EAAc8kC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,QAC1D,GACD,CAAC11E,EAAQC,EAAUwG,EAAW+tE,EAAiB5jC,IAE5CgqD,GAAkB97C,EAAAA,EAAAA,KAAY,KAClC28C,EAAgB,CAAEz7F,SAAQyG,aAAY,GACrC,CAACzG,EAAQyG,EAAWg1F,IAEjBZ,GAAwB/7C,EAAAA,EAAAA,KAAag9C,IACzCtnB,EAAgB,CACdx0E,SACAC,WACA2Y,QAASkjF,EACT9zF,OAAQ4oC,EAAc8kC,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,OACzD,GACD,CAAC11E,EAAQC,EAAUu0E,EAAiB5jC,IAEjCqqD,GAAkBn8C,EAAAA,EAAAA,KAAY,KAClCj3B,EAAiB,CAAEvjB,WAAY,CAACmC,IAAa,GAC5C,CAACA,EAAWohB,IAETmoE,GAAqBlxC,EAAAA,EAAAA,KAAY,KACrCgxC,EAAqB,CAAE9vF,SAAQyG,aAAY,GAC1C,CAACqpF,EAAsB9vF,EAAQyG,IAE5By0F,GAAiBp8C,EAAAA,EAAAA,KAAav5B,IAClCm2E,EAAa,CAAE17F,SAAQyG,YAAW8e,WAAU,GAC3C,CAACvlB,EAAQyG,EAAWi1F,IAEjBP,GAAqBr8C,EAAAA,EAAAA,KAAY,KACrCj0C,EAAgB,CAAER,WAAYrK,EAAQoJ,aAAY,GACjD,CAACyB,EAAiB7K,EAAQoJ,IAEvBgyF,GAAgBt8C,EAAAA,EAAAA,KAAY,KAChC,GAAIub,GAASA,EAAMx1D,SAAU,CAC3B,MAAMP,EAAa+1D,EAAMx1D,SAASC,KAAInF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACpD0J,EAAgB,CAAER,WAAYrK,EAAQsE,cACxC,MACEuG,EAAgB,CAAER,WAAYrK,EAAQsE,WAAY,CAACmC,IACrD,GACC,CAAC4zD,EAAOxvD,EAAiB7K,EAAQyG,IAE9B40F,GAAcv8C,EAAAA,EAAAA,KAAY,KAC9B/2C,EAAa,CACX/H,SAAQC,SAAUmB,EAAAA,GAAgBqF,aAClC,GACD,CAACsB,EAAc/H,EAAQyG,IAEpB60F,GAAuBx8C,EAAAA,EAAAA,KAAY,KACnC7U,EACFliC,EAAa,CACX/H,OAAQ2nE,EAAat9D,WAAajB,YAAWC,cAAerJ,EAAQyG,UAAWkhE,EAAauyB,gBAK5FjF,GAAwBF,EAC1B4G,EAAuB,CACrB37F,OAAQ+0F,EACR90F,SAAUmhB,EACV3a,UAAWkhE,EAAauyB,gBAG1BnyF,EAAa,CACX/H,OAAQ2nE,EAAat9D,WAAa5D,UAAWkhE,EAAauyB,eAE9D,GACC,CACDjwD,EAAmBgrD,EAAsBF,EAAehtF,EAAc4/D,EAAav+D,EAAWpJ,EAC9F27F,EAAwBv6E,IAGpB26E,GAAsBj9C,EAAAA,EAAAA,KAAa5tC,IACvCA,EAAE2wC,kBAEFyvB,EAAcpgE,EAAG9H,EAAU,GAC1B,CAACkoE,EAAeloE,IAwBnB,MAAO,CACLoxF,oBACAC,oBACAC,oBACAC,mBACA1R,mBACA2R,kBACAC,wBACAC,gBAAiBiB,EACjBhB,wBA/B6Bj8C,EAAAA,EAAAA,KAAa5tC,IAC1CA,EAAE2wC,kBAEF+5C,EAAyB,CAAE57F,SAAQmB,GAAIsF,GAAY,GAClD,CAACzG,EAAQyG,EAAWm1F,IA4BrBZ,kBA1BuBl8C,EAAAA,EAAAA,KAAY,KACnC17C,EAAS,CACPjC,GAAI6D,EAAQhF,OACZC,SAAU+E,EAAQ7D,IAClB,GACD,CAAC6D,EAAQhF,OAAQgF,EAAQ7D,GAAIiC,IAsB9B63F,kBACAjL,qBACAkL,iBACAC,qBACAC,gBACAC,cACAC,uBACAC,6BAA8BQ,EAC9BP,sBA5B2B18C,EAAAA,EAAAA,KAAY,KAClC+3C,GACL9uF,EAAa,CACX/H,OAAQi1F,GAAwBF,EAAgBA,EAAgB/0F,EAChEC,SAAU42F,EAAa11F,GACvBsF,aACA,GACD,CAACzG,EAAQ+H,EAAcktF,EAAsB4B,EAAcpwF,EAAWsuF,IAuB3E,CDyTMiH,CACFx3F,GACA8sE,GACAtsE,EACAhF,GACAC,GACAgqC,EACAg/B,GACAr4B,GACAokD,EACA36B,EACAigC,GACAC,GACAv5D,EACA61D,KAGF19C,EAAAA,EAAAA,KAAU,KACH29B,GAIDujB,IAA0BvC,GAC5B3uF,IACF,GACC,CAACA,GAAkB2tE,EAAcghB,EAAiBuC,KAErD,MAAM4B,IAAqBr/C,EAAAA,GAAAA,GACzB,4BACAk4C,GAAkB,iBAClBrjB,GAAe,eACf8mB,GAAiB,gBACjBC,GAA0B,0BAC1B3D,GAAyB,yBACzB/d,GAAgB,eAChB3N,IAAS,MACTpiE,QAAQ/B,EAAQglB,QAAU,YAC1BhlB,EAAQ+0E,UAAY,aACpBkf,IAAY,YACZvnB,IAAsB,gBACtBjB,IAAcE,GAAoB,UAClCykB,GAAgB,gBAChBpwF,EAAQ+b,YAAc,cACtBkpB,GAAqB,uBACrB08B,IAAW,WACX3hE,EAAQgpC,kBAAoB,qBAC5B8vB,IAAc,cACdyT,IAAkB,uBAClBokB,IAAgBf,GAAc,gBAC9B7tF,QAAQ/B,EAAQ8iE,gBAAkB,qBAClCmK,IAAY,YACZjpB,IACCjiD,QAAQ/E,KAAoB82F,KAA2B,wBAGpD,KACJz1F,GAAI,MAAEm0B,GAAK,MAAEsZ,GAAK,MAAE2oB,GAAK,MAAEv5C,GAAK,SAAEzQ,GAAQ,QAAE0B,GAAO,QAAE0yE,GAAO,KAAEr+D,GAAI,QAAEujE,GAAO,QAAE3qD,GAAO,SAAEjC,GAAQ,OAAE3nB,GAAM,KAAE85E,KACtGv9C,EAAAA,EAAAA,IAAkB/rC,IAEdM,OAAQ42F,IE/jBH,SAAyB74F,GACtC,MAAMorB,GAAWosC,EAAAA,GAAAA,IAAS,IAAOx3D,ExCqB5BgW,eAA8BhW,GAA6C,IAA/B84F,EAAS18F,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGs0E,GAG7D,OAFKC,UAAcC,GAAuBE,cACrBH,GAAQ32C,QAAQ,CAAEsP,KAAM,iBAAkByvD,KAAM,CAAC/4F,EAAM84F,IAE9E,CwCzB0CE,CAAeh5F,GAAQsoB,QAAQqrC,aAAQ52D,IAAa,CAACiD,QAAOjD,GACpG,OAAOquB,CACT,CF4jBuC6tE,CAAgBvE,GAAyB10F,IAAMA,UAAOjD,IAEnF0pB,UAAWyyE,GAAoB,eAAEC,IGhkB5B,SACbxF,EACAh3F,EACAyG,EACAg2F,GAEA,MAAM,kBAAEC,IAAsBpkF,EAAAA,EAAAA,MACxBqkF,EAAqBF,EACvBzF,GAAkB4F,WAAWH,KAAyBh2F,QAAarG,GAEjE,UAAE0pB,EAAS,KAAEzmB,GAASs5F,GAAsB,CAAC,EAQnD,OANAxjD,EAAAA,EAAAA,KAAU,KACH91C,GAASymB,IAAa2yE,GACzBC,EAAkB,CAAE18F,SAAQsE,WAAY,CAACmC,GAAYgjB,eAAgBgzE,GACvE,GACC,CAACz8F,EAAQqD,EAAMymB,EAAWrjB,EAAWg2F,EAAuBC,IAExD,CACL5yE,YACA0yE,eAAgBn5F,EAEpB,CH0iB8Dw5F,CAC1D7F,GAAkBh3F,GAAQyG,GAAWywF,IAGjC4F,IAAyB/3B,EAAAA,GAAAA,GAAYy3B,IAAgB,GAErDO,GAAcR,GAAwBO,IAA0Bz5F,GAAQm5F,GACxEQ,GAAwBR,IAAkBM,IAE1C,UAAE5kD,IAAc1jC,IAAU,CAAC,EAE3ByoF,IAAiC9yE,IAAsB8tE,IAAiBnmC,GAAaxuC,MACrFs2E,IACmB,WAApBr1F,KACC+zF,EACA4E,GAAoB/yE,KAAsByvE,IAAgD,WAApBr1F,KACtE+zF,EACA6E,IAA2BtxF,EAAAA,KAAiBqsC,KAAcq5B,IAAkB/lC,KAC5EouD,GAEAwD,GInlBD,SACLp4F,GA0BA,IAzBA,aACEm1F,EAAY,cACZf,EAAa,cACbb,EAAa,YACbtvB,EAAW,UACXkwB,EAAS,gBACT9D,EAAe,YACfgI,EAAW,gBACXC,EAAe,aACf/D,EAAY,gBACZgE,EAAe,uBACflD,GAaD56F,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM,KACJ4D,EAAI,MAAEm0B,EAAK,MAAEsZ,EAAK,MAAE2oB,EAAK,MAAEv5C,EAAK,SAAEzQ,EAAQ,KAAE+V,EAAI,QAAEujE,EAAO,QAAElF,EAAO,SAAE1nD,EAAQ,QAAEiC,IAC5E2S,EAAAA,EAAAA,IAAkB/rC,GAEhBw4F,EAAa,CAACC,EAAAA,KACdC,EAAUlmE,GAASsZ,GAAS3U,GAAYiC,GAAS+W,cACjD2zB,EAAUzlE,GAA2B,UAAnB84B,GAAU96B,MAAoBk8F,EAChDI,EAAoBD,IAAY50B,EAChC80B,EAAW72F,QAAQ/B,EAAQmP,UA4FjC,OA1FKupF,GAAW14F,EAAQ64F,gBACtBL,EAAW73F,KAAK,cACZX,EAAQ64F,gBAAkBC,EAAAA,KAC5BN,EAAW73F,KAAM,cAAaX,EAAQ64F,mBAE/B/0B,GACT00B,EAAW73F,KAAK,QAGd23F,GACFE,EAAW73F,KAAK,qBAGdyzF,IACFoE,EAAW73F,KAAK,gBACZmrC,GAAOitD,SACTP,EAAW73F,KAAK,SAGd03F,GACFG,EAAW73F,KAAK,iBAGhB+3F,EACFF,EAAW73F,KAAK,SACP8zD,EACT+jC,EAAW73F,KAAK,SACPua,GACTs9E,EAAW73F,KAAK,SACZ00F,GACFmD,EAAW73F,KAAK,6BAET8J,EACT+tF,EAAW73F,KAAK,YACPk+E,EACT2Z,EAAW73F,KAAK,WACP6f,EACTg4E,EAAW73F,KAAK,QACPojF,IACTyU,EAAW73F,KAAK,aAEZojF,EAAQvxD,OAASuxD,EAAQj4C,QAC3B0sD,EAAW73F,KAAK,UAIhBy4B,IAAYA,EAAQ+W,eACtBqoD,EAAW73F,KAAK,WAGdsjE,GACFu0B,EAAW73F,KAAK,gBAGdw0F,GACFqD,EAAW73F,KAAK,iBAGdwzF,GACFqE,EAAW73F,KAAK,eAGd4zF,GACFiE,EAAW73F,KAAK,iBAGdi4F,GACFJ,EAAW73F,KAAK,cAGd0vF,GACFmI,EAAW73F,KAAK,qBAGbyzF,IACHoE,EAAW73F,KAAK,cAEZ+3F,GAAWL,GACbG,EAAW73F,KAAK,mBAGdw0F,GAAgBlxB,GAAe20B,IAAaD,GAAqBtI,IACnEmI,EAAW73F,KAAK,wBAGd4yF,IAAkB/gE,GAAU2E,IAAa2sC,IAAa60B,IACxDH,EAAW73F,KAAK,iBAIb63F,EAAWv3F,KAAK,IACzB,CJkd2B+3F,CAAsBh5F,EAAS,CACtDm1F,gBACAf,iBACAb,gBACAtvB,eACAkwB,UAAWA,KAAcb,EACzBjD,kBACAgI,YAAalzE,IAAqBA,GAAkBC,cAAgB,EACpEkzE,gBAAiBxD,IAAcE,GAC/BT,gBACAgE,gBAAoC,YAAnBphE,IAAU96B,QAAuBwqF,EAAAA,EAAAA,IAAiB7mF,GAAS0H,EAAAA,EAAAA,OAC5E2tF,4BAGI4D,GAAeb,GAAiBpzF,SAAS,gBACzC8+D,IAAUo1B,EAAAA,EAAAA,IAAel5F,GACzBm5F,IAAYhgB,EAAAA,GAAAA,IAAmBn5E,EAAQ64F,gBAE7C,IAAIO,GAWAC,GATFD,GADElmD,IAEO0hD,GADM,QAGN9wB,IAAYigB,IAAYuQ,GAGlB,aAFA,UAMbC,GACEH,KAAmB5hE,IAASsZ,MAAWg4B,GACzCu1B,GAAoB,UACXp1B,IACTm1B,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,QAGtBv7B,EAAAA,GAAAA,GACEkyB,GAAiBhwF,EAAQ+vF,cAAgB/vF,EAAQ+vF,cAAgB/0F,GACjEi5F,GAAWj0F,EAAQ6b,sBAAmBzgB,EACtCwgB,EACA5b,EAAQ7D,IAEVqvE,GAAgBvxB,GAAKj/C,GAAQywE,EAAWC,EAAgBC,EAAkBpnE,EAAqB5C,GAE/F,MAAM23F,GAAsB/F,EAEtBgG,IAAez/C,EAAAA,EAAAA,KAAa0/C,IAChC,MAAMC,EAAa9F,GAAiBxqE,QAE9BuwE,EAAYF,EAAM9rB,OAAOisB,aAE/B,GADAhG,GAAiBxqE,QAAUuwE,GACvBE,EAAAA,GAAAA,OAAwBH,GAAcC,GAAaD,EAAY,OAEnE,MAAMxrB,EAAYurB,EAAM9rB,OAAO7B,QAAwB,gBACvD,IAAKoC,EAAW,OAEhB,MAAM4rB,EAAaH,EAAYD,GACzB,aAAEK,EAAY,aAAEC,EAAY,UAAEC,GAAc/rB,EACtBhmE,KAAK4K,MAAMknF,EAAeC,EAAYF,GACfD,GAvYjB,GA0YhC11F,IACF,GACC,CAACA,KAEE81F,IAAkBC,EAAAA,GAAAA,GAAqBX,GAAc,CAACA,IA7Y1C,KA6YsE,IAExFY,EAAAA,GAAAA,GAAkBb,GAAsBr/C,QAAM7+C,EAAW6+F,KAEzD9lD,EAAAA,EAAAA,KAAU,KACR,MAAMimD,EAAe1G,GAAgBvqE,QACjCwoE,IAAqByI,IAAgBC,EAAAA,GAAAA,GAAoBD,IAC3D3G,GAAsB,CAAEn0F,WAAY,CAACmC,KACvC,GACC,CAACkwF,GAAmBlwF,GAAWgyF,KAElC,IACI6G,GACAC,GACAC,GAHA1iD,GAAQ,GAIR2iD,IAAiB,EACrB,MAAM5P,IAAcpzC,EAAAA,EAAAA,KAAQ,IACnBkqB,GACHsE,GAAqB9B,GAAOpiE,QAAQkiE,IAAcliE,QAAQmiE,GAAY7O,EAAQhc,SAC9Ej+C,GACH,CAACumE,GAASwC,GAAOF,GAAaC,EAAW7O,EAAOhc,KAE7CqhD,GAAez2B,GAAc,GAAK,EACxC,IAAKtC,KAAYnvC,IAASsZ,IAAS1S,IAAS+W,eAAgB,CAC1D,IAAIvgC,EACJ,GAAI4iB,GACF5iB,EAAQo0D,GAAyBhkE,EAASikE,GAAaC,EAAW7qB,IAAUzpC,WACvE,GAAIk8B,GAEPl8B,EADEk8B,GAAMitD,QACAlN,GAAAA,GAEA7nB,GAAyBhkE,EAASikE,GAAaC,EAAW7qB,IAAUzpC,WAEzE,GAAIwpB,IAAS+W,eAClB/W,GAAQ+W,cAAcvgC,OAASwpB,GAAQ+W,cAActgC,OACpD,CACD,MAAQD,MAAO+qF,EAAc9qF,OAAQ+qF,GAAkBxhE,GAAQ+W,cAC/DvgC,GAAQirF,EAAAA,GAAAA,IAAmC,CACzCjrF,MAAO+qF,EACP9qF,OAAQ+qF,EACRE,eAAgB32B,GAChBF,eACAC,YACA7qB,cACCzpC,KACL,CAEIA,IACEA,GAASqoF,GAAgC10B,GAAgCC,MAC3Eg3B,GAAe5qF,GAEjB0qF,GAAkBryF,KAAKC,IAAI27D,GAAiB9hE,QAAQg2F,IAAcE,IAAgCroF,GAC9FwpB,IAAS+W,eAAiBmqD,GAAkB1qF,EArcnB,KAsc3B6qF,IAAiB,GAGvB,MAAW5P,KACTyP,GAAkBryF,KAAKC,IACrB27D,GAAiB9hE,QAAQg2F,IAAcE,IAAgCpN,GAAYngB,eAAe96D,OAEhG0qF,GAAkBzP,GAAYngB,eAAe96D,MA7clB,KA8c7B6qF,IAAiB,IAIjBH,KACFxiD,GAAS,UAASwiD,GAAkBI,OACpCH,GAAoBD,GAAkB5K,IAGxC,MAAMtb,GAAatnB,GAAa9sD,EAAQ+6F,kBACjC92B,IAAetB,IAAao4B,sBAC9B3/F,EACC4/F,IAAsBvjD,EAAAA,EAAAA,KAAQ,IAC3B28B,GAAYvJ,GAAqBuJ,SAAah5E,GACpD,CAACg5E,KAuBJ,SAASpzE,GAAkBi6F,GACzB,OACElmD,EAAAA,GAAAA,cAACmmD,GAAAA,EAAW,CACVl7F,QAASA,EACTw3F,eAAgBtF,GAA+B8F,QAAwB58F,EACvE6/F,eAAgBA,EAChB9B,UAAWA,GACXlI,UAAWA,GACXxkB,YAAaA,EACbyF,8BAA+BA,EAC/BC,8BAA+BA,EAC/BgpB,sBAAuB/G,IAG7B,CAEA,SAASgH,KACP,MAAMC,EACJtmD,EAAAA,GAAAA,cAACumD,GAAW,CACVt7F,QAASA,EACTupC,SAAUA,GACV+qC,UAAWA,EACXnvD,kBAAmBA,GACnBgvD,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtBglB,GACpBn1D,mBAAoBA,GACpBqwC,aAAcxyE,QAAQmwF,GAA+B8F,QAAwB58F,GAC7Eq7C,QAASq/C,GACTthB,mBAAoBuhB,GACpBthB,aAAcuhB,KAIlB,MAA0B,WAAtBqD,GACKgC,EAIPtmD,EAAAA,GAAAA,cAACwmD,GAAS,CACRv+F,gBAAiBA,GACjBgD,QAAS0xF,GACTnD,aAAc8M,EACdn3D,mBAAoBA,GACpB2oD,eAAgBA,GAChBvX,oBAAqBnD,EACrBqc,iBAAkB1hC,GAGxB,CA2VA,MAAM0uC,GAAgBv0D,IAAWg9B,GAAcjkE,EAAQ+6F,qBAAkB3/F,EACnEqgG,IAAehkD,EAAAA,EAAAA,KAAQ,IAAM04C,GAAejqF,MAAMw1F,GAAMA,EAAElwF,YAAW,CAAC2kF,IAE5E,OACEp7C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,GACL99C,IAAI82E,EAAAA,EAAAA,IAAiBjzE,EAAQ7D,IAC7B8sB,UAAWguE,GACXn/C,MAAOkjD,GAAuB,6BAA4BA,YAA0B5/F,EACpF,kBAAiBqG,GACjBurD,YAAawgB,GACb/2B,QAAS4gB,GACTa,cAAejB,GACf/J,cAAe6gB,GACftmB,aAAcmtC,GAA2BhmB,QAAgCxzE,EACzEugG,YAAaxD,GAA0BjsC,QAAkB9wD,EACzDssD,aAAeywC,IAA2BvD,GAA4B5tC,QAAmB5rD,GAEzF25C,EAAAA,GAAAA,cAAA,OACEkF,IAAKy5C,GACLzqE,UAAU,gBACV,kBAAiBxnB,GACjB,uBAAsB4zD,EAAQA,EAAMx1D,SAASw1D,EAAMx1D,SAASnF,OAAS,GAAGyB,QAAKf,EAC7E,0BAAyB4E,EAAQgpC,uBAAoB5tC,EACrD,2BAA0Bu2F,SAAqBv2F,EAC/C,iBAAgBmuC,SAAYnuC,KAE5B6pC,GACA8P,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,0BACZ6vC,IAAc/jB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAG/B4mE,GACC96C,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,sCAAuC06C,IAAmB,eACpF77C,QAAS8/C,IAERjE,IACCv9C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAIlB2mE,GA3cL,WACE,MAAMgM,EAAmBtG,KAAcn/D,EAAAA,EAAAA,IAASm/D,GAAWn5F,IACrDorF,EAAc+N,IAAcsG,EAAoBtG,QAAwBl6F,EACxEosF,EAAc8N,KAAesG,EAAoBtG,QAAwBl6F,EACzEygG,GAAevG,IAAc3yB,GAAeA,GAAYE,oBAAiBznE,EAE/E,OACE25C,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CACLz5B,KAAMmC,GAAW,eAAiB,QAClCl7B,KAAMopE,EACNjqF,KAAMkqF,EACNnpF,KAAMw9F,EACN1pE,aAAcA,GACdskB,QAAU8wC,GAAcC,EAAcgO,QAAoBp6F,EAC1Dk6E,oBAAqBpD,EACrBpiE,eAAgBA,GAChBghE,WAAS,GAGf,CAwbmBgrB,GACf/mD,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,0BAA2BwgD,GAAiBpzF,SAAS,SAAW,oBAE1F+vC,EAAAA,GAAAA,cAAA,OACEkF,IAAK0yB,GACL1jD,UAAWmvE,GACXtgD,MAAOA,GACPnB,IAAI,QAEHstB,KAAgB0wB,IACf5/C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,iBACZzpB,GAAK,oBACLg8F,IAAiBzmD,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,QAAQ6kD,KAhZxE,WACE,MAAMvyE,GAAY2uB,EAAAA,GAAAA,GAChB,gBACAqsB,IAAe,oBACfkxB,IAAgB,iBAChBsF,IAAkB,oBAEd7P,EAAoB2I,IAAkBzvB,KAAYG,KAAgBi0B,GAClE6D,GAAmBnkD,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjBwhD,IAA8B,YAC9BjlB,GAAkB,sBAGpB,OACEp/B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWA,EAAWikC,cAAe8gB,GAA0Br3B,IAAI,QA8P5E,WAME,GAJuBy9C,KAAkBjlF,MACtCwgF,MAFWn9D,IAASsZ,IAAS3U,KAEAy6D,KAAkB3tB,IAAe90D,IAAYkhF,IACvEsE,IAA+BV,IAAYG,GAG/C,OAGF,IAAIrgB,EACAioB,GACAzG,IAAgBnB,IAAiBjlF,GAM1BwzD,IAAaE,iBACtBkR,EAAcpR,GAAYE,iBAN1BkR,GAAcnzE,EAAAA,EAAAA,IAAepB,GAAM+1F,IAE9BtxB,IAAgBE,KACnB63B,EAAe,UAAQhoB,EAAAA,EAAAA,IAAgBuhB,QAK3C,MAAM0G,EAAoB1G,IAAc,gBAAiBA,IAAcA,GAAWh/D,YAC5E2lE,EAAkB3G,IAAc,cAAeA,IAAcA,GAAWvsE,UAE9E,OACE+rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgB0tB,IAAI,OAChCo9B,EACCh/B,EAAAA,GAAAA,cAAA,QACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,iCAAkCokD,GAC5DvlD,QAASg/C,GACT9+C,IAAI,QAEHua,EAAAA,GAAAA,GAAW6iB,IACV9P,IAAeg4B,GACflnD,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVtrC,WAAYwvF,EAAkBxvF,WAC9B0tC,UAAWC,EAAAA,IACX83B,8BAA+BA,EAC/BC,8BAA+BA,KAGjClO,KAAgBg4B,GAAqBC,GAAmBnnD,EAAAA,GAAAA,cAACsF,GAAAA,EAAW,MACrEk7C,IAAY4G,UAAYpnD,EAAAA,GAAAA,cAACqnD,GAAAA,EAAQ,CAACD,SAAU5G,GAAW4G,YAEvDngE,OAED5gC,EAx2BC,IAy2BJ4gC,GACC+Y,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,OAAOzpB,GAAK,WAC5Bu1C,EAAAA,GAAAA,cAAA,QACE9rB,UAAU,cACVwtB,QAASi/C,KAERxkC,EAAAA,GAAAA,GAAY,IAAGl1B,EAAUE,UAAW,GAAG5V,cAI7Cq8C,IAAa8xB,oBACZ1/C,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,QAAQn3C,GAAK,mBAC7CQ,EAAQ2iE,aAAao4B,iBAAmB9zD,IAAWg9B,GACrDlvB,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,QAAQ32C,EAAQ2iE,aAAao4B,iBAC7D/6F,EAAQ+6F,iBAAmB9zD,KAAYg9B,GACzClvB,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,QAAQ32C,EAAQ+6F,iBAChDtK,KAAsBxsB,GACxBlvB,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,QAC/B85C,GAAkB1hC,aAAevvD,GAChCixF,GAAkB5lD,QAAU,uBAAyB,8BAGvDzvC,EAGV,CAtUOihG,GACAlH,IACCpgD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,qBACZ2oE,IACC78C,EAAAA,GAAAA,cAACunD,GAAS,CACRr8E,MAAO4xE,GACPp7C,QAAS+/C,GACTvtE,UAAU,kBAGbgrE,IACCl/C,EAAAA,GAAAA,cAACwnD,GAAe,CACdv8F,QAAS4b,EACT83D,aAAcvP,IAASrX,EACvB2f,YAAaA,EACbhsE,OAAQowF,EACR3e,8BAA+BA,EAC/BC,8BAA+BA,EAC/B17B,QAASk/C,MAKhBxpF,IACC4oC,EAAAA,GAAAA,cAACynD,GAAO,CACNx8F,QAASA,EACTs1E,oBAAqBpD,EACrBC,8BAA+BA,EAC/BoD,WAAYod,GACZxgE,aAAcA,GACdqjD,iBACErpE,GAAQypE,YACN5D,GAAqB7oD,SAAW1nB,IAAauwE,GAAqB7oD,SAC/D7K,UACFljB,EACLq6E,aAAcse,GACdre,aAAcse,KAGjBM,IAAoBjD,IACnBt8C,EAAAA,GAAAA,cAAC0nD,GAAmB,CAClBvjB,cAAemY,GACf5Y,aAAatiD,EAAAA,EAAAA,IAASn7B,IACtBmpE,MAAOA,GACPmR,oBAAqBpD,EACrB//C,aAAcA,GACd2mD,iBAAkBx6D,GAClB7c,UAAWA,GACXzG,OAAQA,GACRypC,wBAAyBA,KAG5B6vD,IAAoBlD,IACnBr8C,EAAAA,GAAAA,cAAC2nD,GAAa,CACZ77F,MAAOuwF,GACP3Y,aAAatiD,EAAAA,EAAAA,IAASn7B,IACtBmpE,MAAOA,GACPmR,oBAAqBpD,EACrB//C,aAAcA,GACd2mD,iBAAkBx6D,GAClB7c,UAAWA,GACXzG,OAAQA,GACRypC,wBAAyBA,KAG5Bk9B,IACC5sB,EAAAA,GAAAA,cAAC4nD,GAAK,CACJtnC,MAAOA,EACPw1B,YAAaA,GACbvV,oBAAqBpD,EACrB/N,MAAOA,GACPsI,YAAaA,EACbme,kBAAmBA,EACnBz4D,aAAcA,GACd0xD,aAAcgS,KAGjB3iD,IACC6B,EAAAA,GAAAA,cAAC6nD,GAAgB,CACf58F,QAASA,EACTkzC,UAAWA,GACXl4C,OAAQA,MAGV2mE,IAAWnvC,IACXuiB,EAAAA,GAAAA,cAAC0vC,GAAK,CACJzkF,QAASA,EACTs1E,oBAAqBpD,EACrBhO,UAAWA,EACXmW,YAAagP,GACb/O,eAAgBA,EAChBE,qBAAsBoQ,EACtBnQ,cAAeA,GACfhO,YAAaA,EACbxI,YAAaA,GACbzpC,MAAOA,EACP+/C,YAAaigB,GACb/jD,QAASwtC,GACTvJ,eAAgBsQ,MAGlBrpB,IAAW71B,IAASA,GAAMitD,SAC1BhkD,EAAAA,GAAAA,cAAC8nD,GAAU,CACT78F,QAASA,EACTs1E,oBAAqBpD,EACrBmI,YAAagP,GACbl3D,aAAcA,GACdsoD,cAAeA,MAGjB9Y,IAAW71B,KAAUA,GAAMitD,SAC3BhkD,EAAAA,GAAAA,cAAC4vC,GAAK,CACJ3kF,QAASA,EACTkyE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BoI,YAAaigB,GACbt2B,UAAWA,EACXmW,YAAagP,GACbtM,YAAa0V,GACbnY,eAAgBA,EAChBnoD,aAAcA,GACdsoD,cAAeA,GACfhO,YAAaA,EACbxI,YAAaA,GACbxtB,QAASwtC,GACTvJ,eAAgBsQ,MAGlBv2B,IAASv5C,KACT65B,EAAAA,GAAAA,cAACqjC,GAAAA,GAAK,CACJ59C,MAAOA,EACPx6B,QAASA,EACTgD,OAAQ85F,EAAAA,GAAAA,OACRxiB,eAAgBA,EAChBnoD,aAAcA,GACd4qE,aAAc93D,EACd6zB,WAAYA,GACZoL,UAAWA,EACX84B,OAAQpH,GACRqH,aAAa/hF,IAAWipD,KAASnI,OAAoC5gE,EAAlB66F,GACnDvb,eAAgBsQ,GAChBvQ,cAAeA,GACfoY,eAAgBA,EAChBe,sBAAuBA,GACvBsJ,cAAen7F,QAAQ+wF,GACvB/wE,qBAAsBA,GACtB5b,aAAcsmE,EACd0wB,oBAAqBtJ,GACrBuJ,cAAep0E,IAGlBve,IACCsqC,EAAAA,GAAAA,cAACsoD,GAAAA,EAAQ,CACPr9F,QAASA,EACTs1E,oBAAqBpD,EACrBmI,YAAagP,GACbqJ,sBAAuBA,GACvBpY,eAAgBA,EAChByiB,aAAc93D,EACd6zB,WAAYA,GACZ+qB,aAAcI,GACdvJ,eAAgBsQ,GAChBvQ,cAAeA,KAGlBoE,IACC9pC,EAAAA,GAAAA,cAACuoD,GAAO,CAACze,QAASA,KAEnBr+D,IACCu0B,EAAAA,GAAAA,cAACwoD,GAAI,CAACv9F,QAASA,EAASwgB,KAAMA,GAAM6/D,WAAY6V,KAEjD5M,IACCv0C,EAAAA,GAAAA,cAACyoD,GAAI,CACHx9F,QAASA,EACTqpF,iBAAkBA,GAClBl3D,aAAcA,KAGjBiH,IAAS+W,eACR4E,EAAAA,GAAAA,cAAC0oD,GAAmB,CAClBz9F,QAASA,EACTmyB,aAAcA,KAIjBkjE,IACCtgD,EAAAA,GAAAA,cAAA,KACE9rB,WAAW2uB,EAAAA,GAAAA,GACT,iBACCg8C,IAAyB7xE,IAAwB,uBAEpD40B,IAAI,QAEF50B,GAAuBviB,GAAK,qBAC5BqzF,GAAkBC,EAAkB/9C,EAAAA,GAAAA,cAAC2oD,GAAAA,EAAY,CAAC/1F,QAASmrF,IAAsBA,IAKrFwB,IAAoBxwB,IACpB/uB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW8yE,EAAkBplD,IAAI,QACnC31C,KACAu2F,IACCxiD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACZjoB,IAAkB,KAIP,YAAjBo4F,IAA8BgC,MAIlCrX,IACChvC,EAAAA,GAAAA,cAAC4oD,GAAO,CACN39F,QAASA,EACTs1E,oBAAqBpD,EACrBhO,UAAWA,EACXmW,YAAagP,GACbtM,YAAa0V,GACbxuB,YAAaA,GACb9xC,aAAcA,GACdsoD,cAAeA,GACfhO,YAAaA,EACbjyC,MAAOA,EACPqpD,aAAcI,GACdH,sBAAuBkH,KAG1B5xD,KAAYA,GAAQ+W,eACnB4E,EAAAA,GAAAA,cAAC6oD,GAAO,CACN59F,QAASA,EACTw6E,qBAAsBoQ,EACtBre,eAAgBA,GAChBzT,WAAYA,GACZt+B,MAAOA,EACP+/C,YAAaigB,KAGhBrjE,IACC4d,EAAAA,GAAAA,cAAC8oD,GAAQ,CACP79F,QAASA,EACTmyB,aAAcA,GACdo6C,eAAgBA,GAChBzT,WAAYA,GACZt+B,MAAOA,EACPhb,KAAM/e,IAKhB,CAuISq9F,IACClJ,IAA6C,eAAjBwE,IAAiCgC,KAC9DvG,IAAuBC,GACtB//C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,UAAU,wBACV6tB,MAAM,oBACNjkC,OAAK,EACLqkC,KAAK,OACLoG,UAAW99C,GAAK,2BAChBi3C,QAASo5C,EAAwBsG,GAAqBC,IAEtDrhD,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,uBAEb4rE,IAAuBG,GACzBjgD,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,UAAU,wBACV6tB,MAAM,oBACNjkC,OAAK,EACLqkC,KAAK,OACLoG,UAAU,gBACV7G,QAAS+7C,GAAe6D,GAAcC,IAEtCvhD,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,2BAEb7tB,EACH88F,IAAqBnjD,EAAAA,GAAAA,cAACgpD,GAAa,CAACp7F,WAAYwiB,GAAoBozC,SAAU+6B,IAC9E2F,IACClkD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAeo/D,wBAAyBlkB,GAAQorB,GAAeC,KAE/E2I,IACCpjD,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,iBAAkBk1B,KAA2B9vE,IAAmB,WAC1Fy5C,QAAS63B,IAETv5B,EAAAA,GAAAA,cAACi5C,GAAAA,EAAmB,CAClBnpD,SAAU2B,GACV0Q,KAAMu4C,GACNvrD,mBAAoBA,GACpBoxC,oBAAqBnD,MAK5BnyE,EAAQ8iE,eACP/tB,EAAAA,GAAAA,cAACipD,GAAa,CAACh+F,QAASA,EAASy2C,QAAS0Y,KAErB,YAAtBkqC,IACCtkD,EAAAA,GAAAA,cAACwmD,GAAS,CACRv7F,QAAS0xF,GACTpD,WAAS,EACT5nB,SAAU6zB,GACVv9F,gBAAiBA,GACjBknC,mBAAoBA,GACpB2oD,eAAgBA,GAChBvX,oBAAqBnD,EACrBqc,iBAAkB1hC,KAIvBkmB,IACCj+B,EAAAA,GAAAA,cAACw6B,GAAoB,CACnB1yE,OAAQk6D,GACRyc,OAAQR,GACRhzE,QAASA,EACTq1D,MAAOA,EACPomC,aAAcA,IAAcn1E,SAC5B/mB,gBAAiBA,GACjBi7C,QAAS0c,GACT/O,oBAAqBgP,GACrBhyC,kBAAmBA,GACnBmvD,UAAWA,EACX4iB,iBAAkBA,KAGlB,KKpwCV,IAAexiD,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,OAAE93C,GAAW83C,EACbspD,GAAgBppD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBj4C,GAGvE,OAAOohG,EAAgBlpD,EAAAA,GAAAA,cAACkpD,EAAkBtpD,QAAYv5C,CAAS,ICKjE,IAAes5C,EAAAA,EAAAA,KAVkDC,IAC/D,MAAM,OAAE93C,GAAW83C,EACbupD,GAAuCrpD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAAA,MAAe,wCAAyCj4C,GAI1D,OAAOqhG,EAAuCnpD,EAAAA,GAAAA,cAACmpD,EAAyCvpD,QAAYv5C,CAAS,ICkJ/G,IAAes5C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAA6B,IAA3B,OAAEnN,GAAQmN,EACjB,MAAMnI,GAAUyiB,EAAAA,EAAAA,IAAuBloB,EAAQS,IACvCA,OAAQqK,EAAU,MAAE84F,GAAUn+F,GAAW,CAAC,EAElD,MAAO,CACLA,UACA23B,IAAKtyB,GAAc84F,GAAQ//E,EAAAA,EAAAA,IAAW7jB,EAAQ8K,QAAcjK,EAC5DgjG,SAAUD,GAAS94F,GAAa9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,QAAcjK,EAClE,GATei9C,EAzHgC19C,IAM9C,IAN+C,OACnDK,EAAM,QACNgF,EAAO,aACPqtD,EAAY,IACZ11B,EAAG,QACHymE,GACDzjG,EACC,MAAM,qBACJ0jG,EAAoB,SACpBjgG,EAAQ,iBACRkgG,EAAgB,SAChBC,EAAQ,aACRx7F,IACEuQ,EAAAA,EAAAA,MACE9T,GAAOk3C,EAAAA,GAAAA,KAEPuD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7Bi0B,GAAaj0B,EAAAA,EAAAA,IAAuB,MACpC8lD,EAAgBz8F,QAAQ/B,IAE5By+F,QAASnpB,IACPopB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACTuxC,WA1B6B,IA2B7BzH,UAAW,KAEP,kBACJpgC,EAAiB,oBAAEic,EAAmB,wBACtChc,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBnd,EAAKpzC,EAAAA,IAAc,EAAM6vB,EAAAA,KAC7CmoE,EAAqBC,EAAmBC,IAAsBjmD,EAAAA,GAAAA,IAAQ,IAE7E3E,EAAAA,EAAAA,KAAU,IACDqqD,EAAgBlpB,EAAoB3I,EAAWxjD,SAAWukD,IAC3DA,EAAOkG,gBACTyqB,EAAqB,CAAErjG,UACzB,SACGI,GACJ,CAACJ,EAAQwjG,EAAelpB,EAAqB+oB,IAEhD,MAKMhnC,GAAcvd,EAAAA,EAAAA,KAAY,KACzB95C,IACDA,EAAQg/F,eACVV,EAAiB,CAAEhyF,KAAMtM,EAAQg/F,iBACxBh/F,EAAQ62F,cACjB9zF,EAAa,CAAE/H,OAAQgF,EAAQhF,OAASyG,UAAWzB,EAAQ62F,iBAE3Dz4F,EAAS,CAAEjC,GAAI6D,EAAQhF,SAEnBgF,EAAQy8B,YACV8hE,EAAS,CACPrvF,MAAOlP,EAAQhF,OACfuhC,MAAOv8B,EAAQy8B,cAGrB,GACC,CAAC15B,EAAc/C,EAAS5B,EAAUkgG,EAAkBC,IAEvD,GAAKv+F,EAIL,OACE+0C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvI,IAAI,oBACJzoB,UAAU,gCACV+jC,YAhCqB9gD,KACvBuhE,EAAAA,GAAAA,GAAwBvhE,GACxB8qD,EAAwB9qD,EAAE,EA+BxBgsD,cAAejB,GAEfliB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kDAAkD0tB,IAAI,QACnE5B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgB0tB,IAAI,QACjC5B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBAAgB0tB,IAAI,OAChChf,IAAOu5B,EAAAA,GAAAA,IAAW7sC,EAAAA,EAAAA,IAAgBsT,IAAQ,IAC1CymE,IAAWltC,EAAAA,GAAAA,GAAWlxD,EAAQi/F,kBAAmB9rF,EAAAA,EAAAA,GAAa3T,EAAM4+F,IAAY,KAGnFrpD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBAAyB0tB,IAAI,OAAOsD,IAAK0yB,GACtD53B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,qBAAqB0tB,IAAI,SACtCqsC,EAAAA,GAAAA,GAAuBhjF,EAAQ3B,KAAKA,KAAM2B,EAAQ3B,KAAK0e,WAG1Dg4B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,cAAc0tB,IAAI,OAChC5B,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,qBACbjpB,EAAQk/F,cAAgB1/F,EAAK,4BAA8BA,EAAK,uBAKvEu1C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,YAAYI,KAAK,OAAOgD,QAAM,EAACzD,QAAS4gB,EAAapuC,UAAU,4BAC1EzpB,EAAKQ,EAAQm+F,MACV,uBACCn+F,EAAQ62F,cAAgB,wBAA0B,+BAI5D7jB,GACCj+B,EAAAA,GAAAA,cAACmpD,GAAoC,CACnCrhG,OAAQk6D,EACRyc,OAAQR,EACRhzE,QAASA,EACTm/F,WAAYL,EACZtkD,QAAS0c,EACT/O,oBAAqBgP,IAGzBpiB,EAAAA,GAAAA,cAACkpD,GAAa,CACZphG,OAAQgiG,EACRrkD,QAASukD,IAEP,KCoIV,IAAerqD,EAAAA,EAAAA,KAtO0B/5C,IA2BnC,IA3BoC,qBACxCmmB,EAAoB,OACpB9lB,EAAM,SACNC,EAAQ,WACRqE,EAAU,cACV8/F,EAAa,iBACbC,EAAgB,SAChB72F,EAAQ,WACRk0D,EAAU,UACV4iC,EAAS,cACTC,EAAa,UACbr7B,EAAS,aACT7W,EAAY,YACZmyC,EAAW,6BACXC,EAA4B,qBAC5BztB,EAAoB,KACpB31E,EAAI,QACJugE,EAAO,eACP8iC,EAAc,uBACdC,EAAsB,mBACtBjP,EAAkB,cAClBuC,EAAa,WACb2M,EAAU,sBACVntB,EAAqB,YACrBotB,EAAW,cACXC,EAAa,2BACb1tB,GACDz3E,EACC,MAAM,oBAAEolG,IAAwBzsF,EAAAA,EAAAA,OAE1B,8BACJ2+D,EAA6B,8BAC7BC,EAA6B,8BAC7BC,GpD7EW,SACb91E,EACAgxD,EACA2kB,EACAI,GAEA,MAAM,oBACJjkC,EAAmB,iBAAE6xD,EAAgB,sBAAEvM,IACrCngF,EAAAA,EAAAA,OAEE,SAAE+lC,IAAaC,EAAAA,EAAAA,MACf2mD,EAAkC5mD,EAAW,IAAM,KAGvDolD,QAASxsB,EAA+BiuB,OAAQC,EAAkBC,SAAUC,IAC1E3B,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACTizC,WApBsC,MAqBpC3+E,IACF,GAAa,WAATtlB,EACF,OAGF,IAAI2L,EAAQ,EACZ,MAAMu4F,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnCluB,EAAsC,GAC5C,IAAIluC,GAAa,EAEjB1iB,EAAQ1b,SAASuzF,IACf,MAAM,eACJ5lB,EAAc,OAAElG,EAAM,mBAAEgzB,EAAkB,WAAEC,GAC1CnH,GAEE,QAAEoH,GAAYlzB,EACdjsE,EAAYgB,OAAOm+F,EAAQ/9F,eAAiB+9F,EAAQn/F,WAErDmyE,GAUDnyE,EAAYuG,IACdA,EAAQvG,GAGNm/F,EAAQ53D,kBACVu3D,EAAW5/F,KAAKc,GAGdm/F,EAAQjP,mBACV6O,EAAY7/F,KAAKc,GAGfm/F,EAAQr3D,UACVk3D,EAAuB9/F,KAAKc,IAtBxBm/F,EAAQr3D,WACNo3D,GAAcD,EAAmBG,OAASF,EAAWjxF,MACvD20B,GAAa,GAEfkuC,EAA0B5xE,KAAKc,GAmBnC,IAGEuwE,EAAqB7oD,SAAWnhB,GAASgqE,EAAqB7oD,SAChEglB,EAAoB,CAAEnmC,UAGpBu4F,EAAW7lG,QACbslG,EAAiB,CAAE1gG,WAAYihG,IAG7BC,EAAY9lG,QACd+4F,EAAsB,CAAEn0F,WAAYkhG,KAGlCC,EAAuB/lG,QAAU63E,EAA0B73E,SAC7D03E,EAA2B,CAAEquB,yBAAwBluB,4BAA2BluC,cAClF,KAGFy8D,EAAAA,GAAAA,GAAkBX,EAAkBE,GAEpC,MACE5B,QAASvsB,IACPwsB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACTizC,WAAYh9B,GACZy9B,OAAQd,KAGFxB,QAAStsB,IAAkCusB,EAAAA,GAAAA,IAAwB,CACzEC,QAAStxC,EACTizC,WAAYh9B,KAGd,MAAO,CACL2O,gCACAC,gCACAC,gCAEJ,CoDxBM6uB,CAAoB3kG,EAAMgxD,EAAc2kB,EAAsBI,IAE5D,oBACJ6uB,EAAmB,mBACnBC,EAAkB,cAClBC,GrDhFW,SACb9kG,EACAgxD,EACA/tD,EACA+/F,EACA72F,EACAq3F,EACAC,EACAljC,EACA8iC,EACAC,GAEA,MAAM,qBAAEx6F,IAAyBmO,EAAAA,EAAAA,OAE1B8tF,EAAmBC,IAAoB5pD,EAAAA,EAAAA,KAC5C,IAAgB,WAATp7C,EAAoB,EACzB6O,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAW+R,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7F/L,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAW+R,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAAC9R,EAAsB7F,IAInB2hG,GAAsBvoD,EAAAA,EAAAA,IAAuB,MAE7CwoD,GAAqBxoD,EAAAA,EAAAA,IAAuB,MAE5CyoD,GAAgBzoD,EAAAA,EAAAA,IAAuB,MAE7C,SAAS4oD,IACP,IAAK1kC,EAAS,OAEd,IAAKt9D,IAAeA,EAAW5E,OAG7B,OAFAmlG,GAAY,QACZC,GAAc,GAIhB,IAAKT,EAGH,OAFAQ,GAAY,QACZC,GAAc,GAIhB,IAAKzyC,EAAalkC,QAChB,OAGF,MAAM,aAAE2wE,EAAY,aAAEC,EAAY,UAAEC,GAAc3sC,EAAalkC,QACzDo4E,EAAet5F,KAAK4K,MAAMknF,EAAeC,EAAYF,GAErD0H,EAAaD,GAvDC,EAyDC,IAAjBxH,IAEJ8F,EAAYr3F,GAAYg5F,IALHD,GAvDH,KA6DlBzB,GAAe0B,GACjB,CAEA,MACE/C,QAASnpB,IACPopB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACT0zC,OAAQU,EAAAA,KACN9/E,IACF,IAAK0/E,IAAqBD,EACxB,OAKF,GAD4B9hG,EAAW,GAAKoiG,EAAAA,IAE1C,OAGF,MAAMC,EAAehgF,EAAQzb,MAAKvL,IAAA,IAAC,eAAEi5E,GAAgBj5E,EAAA,OAAKi5E,CAAc,IACxE,IAAK+tB,EACH,OAGF,MAAM,OAAEj0B,GAAWi0B,EAEM,sBAArBj0B,EAAOzkD,WAEP24E,EAAAA,IAA0BlC,EAAev2E,SAAW7pB,EAAW5E,QAAUwc,EAAAA,MAEzEyoF,EAAuBx2E,SAAU,GAGnCi4E,KAC8B,qBAArB1zB,EAAOzkD,WAChBo4E,GACF,KAGF/uB,EAAAA,GAAAA,IAAe2uB,EAAqB3rB,IACpChD,EAAAA,GAAAA,IAAe4uB,EAAoB5rB,GAEnC,MACEmpB,QAASoD,EACT3B,OAAQ4B,EACR1B,SAAU2B,IACRrD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACT0zC,OAAQiB,KACPV,IAEHhvB,EAAAA,GAAAA,IAAe6uB,EAAeU,GAE9B,MACEpD,QAASwD,EACT/B,OAAQgC,EACR9B,SAAU+B,IACRzD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACT0zC,OAvHoB,GAwHnBO,IAEHhvB,EAAAA,GAAAA,IAAe6uB,EAAec,GAE9B,MAAMG,GAAuB1pD,EAAAA,EAAAA,MAmB7B,OAlBA0pD,EAAqBj5E,QAAUm4E,GAC/Bv2C,EAAAA,GAAAA,IAAc,KACR6R,GACFwlC,EAAqBj5E,SACvB,GACC,CAACyzC,KAGJ7R,EAAAA,GAAAA,IAAc,KACZ+2C,IACAI,IAEAr+F,YAAW,KACTs+F,IACAJ,GAAgB,GA1IO,IA2ID,GACvB,CAACD,EAAcI,EAAgB5iG,EAAYyiG,EAAgBI,IAEvD,CAAElB,sBAAqBC,qBAAoBC,gBACpD,CqD5DMkB,CACFhmG,EACAgxD,EACA/tD,EACA+/F,EACA72F,EACAq3F,EACAC,EACAljC,EACA8iC,EACAC,GAGIngG,GAAOk3C,EAAAA,GAAAA,KAEP4rD,EACJvtD,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GA1DS,iBA0D4B,wBAAyBlG,IAAI,mBAChFqD,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,oBAIV+iG,EAAwB9vB,EAAwB,EAAI2sB,EAAc7+F,QAAO,CAACC,EAAKgiG,IAC5EhiG,EAAMgiG,EAAapgC,aAAaqgC,OAAO/nG,QAC7C,GACH,IAAIgoG,EAAkB,EAEtB,MAAMrgC,EAAa+8B,EAAct/F,KAAI,CACnC6iG,EACAC,EACAC,KAEA,MAAMzgC,EAAeugC,EAAUvgC,aAAatiE,KAAI,CAC9CgjG,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYpoG,SACRinE,GAAQmhC,EAAY,MACrBpgC,EAAAA,EAAAA,IAAgBogC,EAAY,MAC3BA,EAAY,GAAGn7F,QAAQ6H,QAAQ0jC,UACnC,CACA,MAAMlzC,EAAU8iG,EAAY,GACtBhxB,EACJixB,IAAqBC,EAAkBtoG,OAAS,GAC7CkoG,IAAmBC,EAAgBnoG,OAAS,EAGjD,OAAOgK,EAAAA,EAAAA,IAAQ,CACb1E,EAAQ7D,KAAOsjG,EAA6Bt2E,SAAWm5E,EACvDvtD,EAAAA,GAAAA,cAACm/B,GAAa,CACZxiC,IAAK1xC,EAAQ7D,GACb6D,QAASA,EACT/E,SAAUA,EACV82E,cAAehwE,QAAQ9G,GAAYA,IAAamB,EAAAA,IAChD61E,8BAA+BA,EAC/BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/BH,qBAAsBA,EACtBH,gBAAiB0wB,IAA0BG,EAC3C5wB,aAAcA,EACdM,2BAA4BA,KAGlC,CAEA,IAAI6wB,EAEJ,OAAOH,EAAYhjG,KAAI,CACrB8hE,EACAshC,KAEA,MAAMljG,EAAU2hE,GAAQC,GAAkBA,EAAeU,YAAcV,EACjEvM,EAAQsM,GAAQC,GAAkBA,OAAiBxmE,EACnD+oE,GAAQC,EAAAA,EAAAA,IAAapkE,GACrBmjG,EAAiBxhC,GAAQC,GACzBY,EAAcsgC,EAAYI,EAAe,GAE3CljG,EAAQsI,iBAAmBk3F,EAAYr2E,WAAY8pD,EAAAA,EAAAA,IAAiBjzE,EAAQsI,mBAC9Ek3F,EAAYr2E,SAAU8pD,EAAAA,EAAAA,IAAiBjzE,EAAQ7D,KAGjD,MAAMinG,GAAmBD,GAAkBnjG,EAAQoE,UAAYpE,EAAQoE,eAAYhJ,EAC7EioG,EAAsB7gC,IAAgBb,GAAQa,GAAeA,EAAYp+D,eAAYhJ,EAErFwD,EAAW,CACfkxF,eAAiC,IAAjBoT,EAChB3P,cAAe2P,IAAiBJ,EAAYpoG,OAAS,EACrD84F,uBAAwBzxF,QAAQqhG,GAAmBA,IAAoBH,GACvEpT,sBAAuB9tF,QAAQqhG,GAAmBA,IAAoBC,GACtEvxB,aACEoxB,IAAiBJ,EAAYpoG,OAAS,GACnCqoG,IAAqBC,EAAkBtoG,OAAS,GAChDkoG,IAAmBC,EAAgBnoG,OAAS,GAInDuoG,EAAyBG,EAEzB,MAAME,GAAavlF,EAAAA,EAAAA,IAAqB/d,GAElC0xC,GAAMpwB,EAAAA,EAAAA,IAA6BthB,GAAY,GAAEA,EAAQyH,QAAQ67F,IAAeA,EAEhFhQ,GAA+B,IAAlBL,IAA4BsM,EAEzCgE,EAAoBvjG,EAAQ7D,KAAOu0F,EAEzC,OAAOhsF,EAAAA,EAAAA,IAAQ,CACb1E,EAAQ7D,KAAOsjG,EAA6Bt2E,SAAWm5E,EACvDvtD,EAAAA,GAAAA,cAACyuD,GAAO,CACN9xD,IAAKA,EACL1xC,QAASA,EACTqzF,6BAA8BphB,EAC9BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/B9c,MAAOA,EACP6O,UAAWA,EACX0rB,WAAYhxF,EAAS20F,eAAiB+L,IAAcn7B,KAAWo/B,IAAsB7mC,GACrFizB,eAAgB/wF,EAASkxF,gBAAkBwP,IAAcn7B,EACzDlpE,SAAUA,EACVsE,gBAAiBlD,EACjBi3F,WAAYA,EACZhf,WAAYgf,GAAcr4F,IAAamB,EAAAA,GACvCy1E,gBAAiB0wB,IAA0BG,EAC3C5S,eAAgBlxF,EAASkxF,eACzByD,cAAe30F,EAAS20F,cACxBC,uBAAwB50F,EAAS40F,uBACjC3D,sBAAuBjxF,EAASixF,sBAChC/d,aAAclzE,EAASkzE,aACvBE,qBAAsBA,EACtBI,2BAA4BA,IAE9BpyE,EAAQ7D,KAAOu0F,GACb37C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,uBAAuByoB,IAAI,sBACxCqD,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,wBAGhB,IACDijG,MAAM,IAGX,OACE1tD,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,qBACVyoB,IAAKixD,EAAUzgC,SACflV,YAAaygB,GAAAA,EACbg2B,eAAa,GAEb1uD,EAAAA,GAAAA,cAAA,OACE9rB,WAAW2uB,EAAAA,GAAAA,GAAe,eAAgBgoD,GAAc,eACxDluD,IAAI,cACJsb,YAAaygB,GAAAA,EACbh3B,QAAUmpD,OAA6ExkG,EAAhE,IAAM2kG,EAAoB,CAAEhxF,WAAY4zF,EAAUzgC,YAEzEntB,EAAAA,GAAAA,cAAA,QAAM4B,IAAI,QACPipD,GAAc+C,EAAU1gC,eAAiByhC,EAAAA,KACxClkG,EAAK,+BAENogG,GAAc+C,EAAU1gC,eAAiByhC,EAAAA,KACxClkG,EAAK,sBAAsBmkG,EAAAA,GAAAA,IAAgBnkG,EAAMmjG,EAAUzgC,cAAU9mE,GAAW,KAEhFwkG,IAAc+D,EAAAA,GAAAA,IAAgBnkG,EAAMmjG,EAAUzgC,YAGnDE,EAAaqgC,OACV,IAIV,OACE1tD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,qBAAqBw6E,eAAa,GAC/C1uD,EAAAA,GAAAA,cAAA,OAAKkF,IAAKgnD,EAAqBvvD,IAAI,oBAAoBzoB,UAAU,sBAChEo5C,EAAWogC,QACV3hF,GAAwBu+E,GACxBtqD,EAAAA,GAAAA,cAAC6uD,GAAgB,CAAClyD,IAAK12C,EAAQA,OAAQA,EAAQqyD,aAAcA,IAE/DtY,EAAAA,GAAAA,cAAA,OACEkF,IAAKinD,EACLxvD,IAAI,mBACJzoB,UAAU,qBAEZ8rB,EAAAA,GAAAA,cAAA,OACEkF,IAAKknD,EACLzvD,IAAI,cACJzoB,UAAU,gBAER,I,gBCjQV,MAqEA,IAAeyrB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAA6B,IAA3B,OAAEgC,GAAQhC,EACjB,MAAM,SAAEkE,GAAa9R,EAAO8R,SAASsb,SAC/Bk8E,GAAWC,EAAAA,EAAAA,IAAkB35F,IAAU25F,EAAAA,EAAAA,IAAkBvpG,EAAOmY,eAChEvG,EAAUE,GAAU3R,OAAS2R,EAASw3F,EAAWx3F,EAAS3R,aAAUU,EACpEkC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ4P,GAChC,OAAK7M,EAIE,CACL6O,UACA43F,oBAAqBzmG,EAAKoF,aAAepF,EAAKoF,YAAYvG,KAAOmB,EAAK6iB,uBAClE7iB,EAAKoF,YAAYvG,QACjBf,EACJi3B,gBAAiB93B,EAAO83B,iBARjB,CAAC,CAST,GAhBegmB,EAnE+B19C,IAI7C,IAJ8C,QAClDwR,EAAO,gBACPkmB,EAAe,oBACf0xE,GACDppG,EACC,MAAM,qBACJqpG,EAAoB,YACpBxqF,EAAW,oBACX20B,IACE76B,EAAAA,EAAAA,MAEE9T,GAAOk3C,EAAAA,GAAAA,KAEP2W,GAAe3U,EAAAA,EAAAA,IAAuB,OAE1C+lD,QAASnpB,IACPopB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStxC,EACTuxC,WApB6B,OAsB/BzqD,EAAAA,EAAAA,KAAU,KACJhoC,GAA+B,yBAApBkmB,GAIf2xE,GAAsB,GACrB,CAAC3xE,EAAiB2xE,EAAsB73F,KAE3CgoC,EAAAA,EAAAA,KAAU,KACgB,yBAApB9hB,GAA8C0xE,GAChD51D,EAAoB,CAAEnmC,MAAO+7F,GAC/B,GACC,CAAC1xE,EAAiB8b,EAAqB41D,IAE1C,MAAME,GAAsBnqD,EAAAA,EAAAA,KAAaoqD,IACvCA,EAAkB,IACbA,EACHh4D,qBAAqB,GAEvB1yB,EAAY,CAAErN,QAAS+3F,GAAkB,GACxC,CAAC1qF,IAEJ,OACEu7B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBAAkBgxB,IAAKoT,GACpCtY,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,QAAQ0tB,IAAI,QAAQn3C,EAAK,kCACtCu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cAAc0tB,IAAI,QAAQn3C,EAAK,8BAE5Cu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACZ9c,GACC4oC,EAAAA,GAAAA,cAACovD,GAAAA,EAAa,CACZh4F,QAASA,EACTsqC,QAASwtD,EACThjD,SAAU90C,EACVmpE,oBAAqBA,EACrBp+B,KAAM,IACNjuB,UAAU,QACVm7E,eAAa,EACbtjF,sBAAoB,MAKxB,KC7EJujF,GAAY,EAAIthE,GAAAA,GA2FtB,IAAe2R,EAAAA,EAAAA,KAjFkB/5C,IAK3B,IAL4B,eAChCqhE,EAAc,KACd3/D,EAAI,uBACJioG,EAAsB,MACtBrkF,GACDtlB,EACC,MAAM6E,GAAOk3C,EAAAA,GAAAA,KAEb,MAAa,cAATr6C,EAiCN,SAAyBmD,GACvB,OACEu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,SAAQ8rB,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,uCAEvC,CApCW+kG,CAAgB/kG,GAGrBw8D,EAmCN,SAA6Bx8D,GAC3B,OACEu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,6BACb8rB,EAAAA,GAAAA,cAAA,MAAI9rB,UAAU,SAASzpB,EAAK,wCAC5Bu1C,EAAAA,GAAAA,cAAA,MAAI9rB,UAAU,eACZ8rB,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,+CACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,+CACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,+CACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,iDAKpB,CAjDWglG,CAAoBhlG,GAGzB8kG,EAgDN,SAAqB9kG,GACnB,OACEu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,UAAU0tB,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,GACjD25C,EAAAA,GAAAA,cAAA,MAAI9rB,UAAU,SAASzpB,EAAK,yBAC5Bu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAAezpB,EAAK,4BACjCu1C,EAAAA,GAAAA,cAAA,MAAI9rB,UAAU,mBACZ8rB,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,yBACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,yBACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,yBACVu1C,EAAAA,GAAAA,cAAA,UAAKv1C,EAAK,2BAKpB,CA9DWilG,CAAYjlG,GAGjBygB,EASN,SAAqBzgB,EAAcygB,GACjC,OACE80B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACb8rB,EAAAA,GAAAA,cAACs6C,GAAAA,EAAS,CAACpvE,MAAOA,EAAOi3B,KAAMmtD,GAAWp7E,UAAU,oBACpD8rB,EAAAA,GAAAA,cAAA,MAAI9rB,UAAU,SAASzpB,EAAK,qCAC5Bu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kCAAiCioC,EAAAA,GAAAA,GAAW1xD,EAAK,mCAAoC,CAAC,SAI3G,CAlBWklG,CAAYllG,EAAMygB,GAIzB80B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,SAAQ8rB,EAAAA,GAAAA,cAAA,YAAOv1C,EAAK,eAA2B,ICmF5DmlG,IAAwBz5F,EAAAA,EAAAA,KAAUuL,GAAOA,KANvB,KAM8C,GA0hBtE,IAAei+B,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAMgd,KAA6C,IAA3C,OAAEvc,EAAM,SAAEC,EAAQ,KAAEoB,GAAMkb,EACjC,MAAMja,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,MAAO,CAAC,EAGV,MAAMgC,GAAa8zF,EAAAA,EAAAA,IAAwB74F,EAAQS,EAAQC,EAAUoB,GAC/DwyC,EAAwB,cAATxyC,GACjBsD,EAAAA,EAAAA,IAA4BpF,EAAQS,IACpC4E,EAAAA,EAAAA,IAAmBrF,EAAQS,GACzB01F,GAAqBl2E,EAAAA,EAAAA,IAAyBjgB,EAAQS,EAAQC,GAC9D0H,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD,KACEA,IAAamB,EAAAA,IAAmBkB,GAAME,SACjCqxC,GAAgB6hD,GAAsB7hD,EAAa6hD,IAExD,MAAO,CAAC,EAGV,MAAM,aAAEv1E,EAAY,kBAAEypF,EAAiB,YAAEliG,GAAgBpF,EACnDunG,GAAavpF,EAAAA,EAAAA,IAAuB/gB,EAAQS,GAE5C8pG,EACJ7pG,IAAamB,EAAAA,KACTkD,IAAehC,EAAKuiB,cAAgBglF,GAAcniG,IAAgBA,EAAY0B,UAG9E2gG,GAAU/pE,EAAAA,EAAAA,IAAczgC,EAAQS,GACtC,IACI+1C,EADAi0D,GAAmB,GAEnBzpC,EAAAA,EAAAA,IAA0BhhE,EAAQS,KAChC+pG,EAAQziF,SACVyuB,EAAUg0D,EAAQziF,SAASyuB,QAE3Bi0D,GAAmB,GAIvB,MAAM/kF,EAAQ3iB,EAAK8V,SAASnY,GAE5B,MAAO,CACL6lB,sBAAsBC,EAAAA,EAAAA,IAA2BxmB,GACjD0qG,cAAc,EACd9pF,eACAypF,oBACArF,eAAe9jC,EAAAA,EAAAA,IAAcn+D,GAC7B4nG,aAAahV,EAAAA,EAAAA,IAAY5yF,GACzB6nG,UAAW7nG,EAAK6nG,UAChBnpC,gBAAgBC,EAAAA,EAAAA,IAAqB1hE,EAAQS,GAC7Cg1F,eAAeC,EAAAA,EAAAA,IAAqBj1F,GACpCmjG,MAAOp8F,QAAQgjG,GACfzlG,aACAuvC,eACA6tB,WAAY36D,QAAQY,GAAYwuB,iBAChCyb,eAAehtB,EAAAA,EAAAA,IAAoBrlB,EAAQS,EAAQC,GACnDokG,iBAA2B,WAAThjG,IAAqB8F,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQC,GAC9EmqG,sBAAsBC,EAAAA,EAAAA,IAAqB9qG,EAAQS,EAAQC,GAC3D4pG,aACA/oC,oBAAoBC,EAAAA,EAAAA,IAAqBxhE,GACzCyqG,mBACAj0D,UACA2/C,qBACAuC,cAAe31F,EAAKglB,UAAa,iBAAkBhlB,EAAKglB,SACpDvgB,QAAQzE,EAAKglB,SAAS4wE,mBACtB93F,EACJ+2B,aAAc53B,EAAO43B,aACrBlS,WACI6kF,GAAiC,CAAEpiG,eACxC,GAtEe21C,EAxhB2B19C,IAsCzC,IAtC0C,OAC9CK,EAAM,SACNC,EAAQ,KACRoB,EAAI,SACJipG,EAAQ,YACRzF,EAAW,cACXC,EAAa,qBACbh/E,EAAoB,aACpBmkF,EAAY,cACZ1F,EAAa,YACb2F,EAAW,QACXK,EAAO,QACP3oC,EAAO,eACPZ,EAAc,cACdg0B,EAAa,UACbmV,EAAS,MACThH,EAAK,WACL7+F,EAAU,aACVuvC,EAAY,cACZjC,EAAa,WACb8vB,EAAU,iBACV2iC,EAAgB,qBAChB+F,EAAoB,aACpBjqF,EAAY,kBACZypF,EAAiB,WACjBC,EAAU,mBACV/oC,EAAkB,YAClBp5D,EAAW,iBACXsiG,EAAgB,QAChBj0D,EAAO,mBACP2/C,EAAkB,cAClBuC,EAAa,aACb9gE,EAAY,gBACZqzE,EAAe,cACfC,EAAa,MACbxlF,EAAK,2BACLmyD,EAA0B,2BAC1BszB,GACD/qG,EACC,MAAM,qBACJwK,EAAoB,gBAAEwgG,EAAe,sBAAEC,EAAqB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBACrGC,IACEzyF,EAAAA,EAAAA,MAGE+5C,IAAe3U,EAAAA,EAAAA,IAAuB,MAItCstD,IAAkBttD,EAAAA,EAAAA,IAAyB,WAATr8C,IACnC4pG,EAAAA,EAAAA,KAAmBniG,EAAAA,EAAAA,MAAa9I,EAAQC,KACxCirG,EAAAA,EAAAA,KAAuBpiG,EAAAA,EAAAA,MAAa9I,EAAQC,IAC5C,GAECukG,IAAc9mD,EAAAA,EAAAA,MACdytD,IAAeztD,EAAAA,EAAAA,MACf0tD,IAAsB1tD,EAAAA,EAAAA,MACtBs5B,IAAuBt5B,EAAAA,EAAAA,MACvB+mD,IAA+B/mD,EAAAA,EAAAA,MAC/B2tD,IAAoB3tD,EAAAA,EAAAA,MACpB4tD,IAA4B5tD,EAAAA,EAAAA,KAAO,GACnC6tD,IAA6B7tD,EAAAA,EAAAA,IAAO32C,QAAQW,KAE3CwoF,GAAiBsb,KAAsB7wD,EAAAA,EAAAA,MAExC8wD,IAAkBlvD,EAAAA,GAAAA,GAASxG,GAASve,OAAQk0E,EAAAA,EAAAA,IAAqB31D,EAAQve,YAASp3B,GAClFurG,IAAgBpvD,EAAAA,GAAAA,GAASxG,GAASpoB,KAAMi+E,EAAAA,EAAAA,IAAqB71D,EAAQpoB,UAAOvtB,GAC5EyrG,GAAoB91D,GAASve,OAAQs0E,EAAAA,EAAAA,IAAuB/1D,EAAQve,OAASue,GAASpoB,KACxFo+E,EAAAA,EAAAA,IAAmBh2D,EAAQpoB,UAAOvtB,EAChC4rG,GAAwBH,IAAqB,CACjDj3F,MAAOi3F,GAAkBj3F,MAAQq3F,EAAAA,GACjCp3F,OAAQg3F,GAAkBh3F,OAASo3F,EAAAA,IAG/B/2E,GAAoBnuB,QAAQzC,IAElCyrD,EAAAA,GAAAA,IAAc,KAER76B,KACF9U,EAAAA,EAAAA,KAAU,KACRmrF,GAA2Bp9E,SAAU,CAAK,GAE9C,GACC,CAAC+G,MAGJ66B,EAAAA,GAAAA,IAAc,KACZinB,GAAqB7oD,QAAUyjB,CAAa,GAC3C,CAACA,KAEJuH,EAAAA,EAAAA,KAAU,MACHrzB,GAAwBy+E,GAAiB3iC,GAAWzqC,GACvDyzE,EAAsB,CAAE5qG,UAC1B,GACC,CAAC8lB,EAAsB9lB,EAAQ4hE,EAAS2iC,EAAeptE,EAAcyzE,KAGxE76C,EAAAA,GAAAA,IAAc,KACR76B,KACFuvE,GAA6Bt2E,QAAU6oD,GAAqB7oD,QAC9D,GACC,CAAC+G,MAEJ66B,EAAAA,GAAAA,IAAc,KACZs7C,GAAkBl9E,QAAU07E,CAAU,GACrC,CAACA,I1D7OiCiB,MAUrC/oD,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoB7wC,GAClB,MAAM5M,GAAa4nG,EAAAA,GAAAA,KAEf5nG,GAAcA,EAAW5E,OAAS,IACpCwR,EAAEuoC,iBACFqxD,EAAkB,CAAExmG,eAExB,GAEmC,E0DqOnC6nG,CAA8BrB,GAE9B,MAAM1G,IAAgB3nD,EAAAA,EAAAA,KAAQ,KAC5B,IAAKn4C,IAAeuvC,EAClB,OAGF,MAAMltC,GAAc+uF,GAAsB0U,IAAyB1U,GAC5DpxF,EAAW,IAAM8lG,IAAyB9lG,EAAW,GAExDA,EADA,CAACoxF,KAAuBpxF,GAG5B,IAAKqC,EAAYjH,OACf,OAGF,MAAM0sG,EAAiBzlG,EAAY7B,KAAK3D,GAAO0yC,EAAa1yC,KAAK4D,OAAOgC,SAElEslG,EAA2C,cAAThrG,EAAuB,CAAC,OAAQ,MAAQ,CAAC,MACjF,OAAO+qG,EAAe1sG,OAClBmnE,IAAcylC,EAAAA,EAAAA,IAAQF,EAAgBC,GAAY5H,GAA6Bt2E,cAC/E/tB,CAAS,GACZ,CAACkE,EAAYuvC,EAAcu2D,EAAsB1U,EAAoBr0F,KAExE+oF,EAAAA,GAAAA,IAAY,KACV,IAAK9lF,IAAeuvC,EAClB,OAEF,MAAMrqC,EAAMlF,EAAWS,QAAQ5D,GAAO0yC,EAAa1yC,IAAKypC,YAEnDphC,EAAI9J,QAETmrG,EAAqB,CAAE7qG,SAAQwJ,OAAM,GAxJE,OA2JzC4gF,EAAAA,GAAAA,IAAY,KACV,IAAK9lF,IAAeuvC,GAAgB5zC,IAAamB,EAAAA,GAC/C,OAEF,MAAMoI,EAAMlF,EAAWS,QAAQ5D,GAAO0yC,EAAa1yC,IAAKgpB,mBAAmBu3C,aAEtEl4D,EAAI9J,QAETqrG,EAAiB,CAAE/qG,SAAQwJ,OAAM,GAlKK,MAqKxC,MAAM+iG,IAAiB9vD,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAATp7C,EAIJ,OAAO6O,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAW+R,EAAAA,GAAAA,UAA6B,KAAM,GAAM,EAAM,GAEtG,CAAC9R,EAAsB7F,KAEpB,WAAEkoG,GAAU,kBAAEC,I3D/RP,WAGb,MAAOD,EAAYE,IAAkB5uD,EAAAA,GAAAA,IAAQ,GAEvC6uD,GAAeC,EAAAA,GAAAA,GAAgB7kC,IAAU,GA4B/C,MAAO,CACLykC,aACAC,mBA5BwB3tD,EAAAA,EAAAA,KAAY,CAACm0B,EAA2Bq3B,KAChEoC,IAEKj9F,SAASg2B,KAAKwd,UAAU0vB,SAAS,2BACpCue,EAAAA,EAAAA,KAAQ,KACNzhF,SAASg2B,KAAKwd,UAAU/gB,IAAI,wBAAwB,IAIxDyqE,GAAa,MACXzb,EAAAA,EAAAA,KAAQ,KACN,MAAM2b,EAAep9F,SAAS4pC,cAAc,UACxCwzD,GACFA,EAAa5pD,UAAU+N,OAAO,SAGhC,MAAM87C,EAgBd,SAAuB75B,EAAwBq3B,GAC7C,MAAMyC,EAAc95B,EAAUvjE,iBAAiC,gBACzDs9F,EAAe/5B,EAAU+rB,UAE/B,OAAOp/F,MAAMwe,KAAK2uF,GAAa7hG,MAAM8sB,IACnC,MAAM,UAAEi1E,EAAS,aAAEnO,GAAiB9mE,EAC9BtjB,EAAMu4F,EAAYD,EACxB,OAAQlO,GAAgBpqF,GAAOA,IAAQ41F,EAAWriC,GAAwBD,GAAW,GAEzF,CAzB4BklC,CAAcj6B,EAAWq3B,GACzCwC,GACFA,EAAY7pD,UAAU/gB,IAAI,SAG5BzyB,SAASg2B,KAAKwd,UAAU+N,OAAO,wBAAwB,GACvD,GACF,GACD,CAAC07C,EAAgBC,IAMtB,C2D0P4CQ,GAEpCzI,IAAiBhnD,EAAAA,EAAAA,MACjBinD,IAAyBjnD,EAAAA,EAAAA,MAEzB0vD,IAAetuD,EAAAA,EAAAA,KAAY,KAC/B,GAAIwsD,GAA0Bn9E,QAE5B,YADAm9E,GAA0Bn9E,SAAU,GAItC,MAAM8kD,EAAY5gB,GAAalkC,QAC1B8kD,IAILyxB,GAAev2E,SAAU,EAEpBk9E,GAAkBl9E,SACrBs+E,GAAkBx5B,EAAWq3B,GAG/BX,IAAsB,KACpB,MAAMpqG,GAASuJ,EAAAA,EAAAA,MACiB4hG,OAAiC7pG,EAAAA,EAAAA,IAAetB,GAAQg3E,gBAAgBv2E,QAEtGo3E,EAA2B,CAAEi2B,aAAa,IAG5C3I,GAAev2E,SAAU,GAEzB+iE,EAAAA,EAAAA,KAAQ,KACDje,EAAUq6B,gBAIftC,GAAgB78E,QAAU8kD,EAAU8rB,aAAe9rB,EAAU+rB,UAEhD,WAAT39F,GACFspG,EAAgB,CAAE3qG,SAAQC,WAAUsG,aAAcykG,GAAgB78E,UACpE,GACA,IACF,GACD,CACDs+E,GAAmBnC,EAAUI,EAA4BtzB,EAA4B/1E,EAAMrB,EAAQC,IAI/Fs+F,IAAez/C,EAAAA,EAAAA,KAAa0/C,IAChCgN,GAAmBhN,EAAM+O,YAAY14F,OAAO,GAC3C,KACHsqF,EAAAA,GAAAA,GAAkB9sC,GAAcksC,IAGhC,MAAQ1pF,OAAQ24F,KAAiBzqC,EAAAA,GAAAA,MAEjC5pB,EAAAA,EAAAA,KAAU,KACRkZ,GAAalkC,QAASy3E,QAAQ6H,aAAeC,OAAOr7C,GAAalkC,QAAS2wE,aAAa,GACtF,CAAC0O,GAAcjD,KAGlBpxD,EAAAA,EAAAA,KAAU,KACR,IAAKozD,KAAmBtC,GAAgB9pF,GAAgB0pF,EACtD,OAKF,GAD2BvlG,GAAcA,EAAWA,EAAW5E,OAAS,GAAKgnG,EAAAA,IAE3E,OAGF,MAAMzzB,EAAY5gB,GAAalkC,UAE1B7pB,GACHA,EAAW5E,OAASwc,EAAAA,IAAqB,GACrC+2D,EAAUzf,kBAAqCmrC,cAAgB1rB,EAAU6rB,eAE7EyN,IACF,GACC,CAACtC,EAAc3lG,EAAYioG,GAAgB1C,EAAY1pF,KAG1D4vC,EAAAA,GAAAA,IAAc,KACZ,IAAKzrD,IAAe8mG,GAAoBj9E,QACtC,OAGF,MAAMw/E,EAAwBvC,GAAoBj9E,QAC/CppB,QAAQ4qE,GAAYrrE,EAAW0F,SAASvC,OAAOkoE,EAAQi2B,QAAQn/F,cAI5D+xE,EAASm1B,EAAsB,IAAMA,EAAsB,GAC5Dn1B,IAILgsB,GAAYr2E,QAAUqqD,EAAOr3E,GAC7BgqG,GAAah9E,QAAUqqD,EAAOrF,wBAAwBz+D,IAAG,GAExD,CAACpQ,EAAY+/F,EAAkBnU,GAAiBoa,IAGnDpiC,IAA4B/6D,IAEtB,IADJygG,EAAgBC,EAAsBC,GACvC3gG,EACC,MAAM8lE,EAAY5gB,GAAalkC,QAC/Bi9E,GAAoBj9E,QAAUvuB,MAAMwe,KAAK60D,EAAUvjE,iBAAiC,uBAEpF,MAAMq+F,EACJzpG,GAAcspG,GAAkBtpG,EAAWA,EAAW5E,OAAS,KAAOkuG,EAAeA,EAAeluG,OAAS,GAEzGsuG,EACJ1pG,IAAa,KAAOspG,IAAiB,IAAMtpG,GAAY5E,SAAYwc,EAAAA,IAAqB,EAAI,EAExF+xF,EAAkBF,IAA0BC,EAC5CE,EAAoB5pG,GAAc+mG,GAAkBl9E,UAAY7pB,EAAWA,EAAW5E,OAAS,GAI/FyuG,EACJ9J,GACG4J,GACC3pG,GAAcA,EAAW5E,OAASwc,EAAAA,IAAqB,IACvD+2D,EAAUq6B,cAAerqD,UAAU0vB,SAAS,0BAC5CM,EAAUzf,kBAAsCmrC,cAAyC,EAAzB1rB,EAAU6rB,aAG5EqP,IACFl7B,EAAUq6B,cAAerqD,UAAU/gB,IAAI,yBAEvCr5B,YAAW,KACLoqE,EAAUq6B,eACZr6B,EAAUq6B,cAAcrqD,UAAU+N,OAAO,wBAC3C,GAhT2B,MAoT/B,MAAM,UAAEguC,EAAS,aAAED,EAAY,aAAED,GAAiB7rB,EAC5C1sE,EAAeykG,GAAgB78E,QAC/BigF,EAAkBhD,GAAoBj9E,QAAQi9E,GAAoBj9E,QAAQzuB,OAAS,GAEzF,IAAI2uG,EAAe9nG,GAAgBunG,GAAuBhP,GACtDmP,IAKFI,GADuBD,EAAkBA,EAAgBtP,aAAe,GAG1E,MAAM0H,EAAanC,GAAoBwJ,GAAwBQ,GApU1C,GAsUrB,IAAIC,EAEJ,GAAIL,GAAmBzH,IAAe0H,IAChCE,IACFld,EAAAA,EAAAA,KAAQ,MACNpgB,EAAAA,GAAAA,GACEmC,EACAm7B,EACA,MAzUgB,GA2UjB,IAILE,EAAevP,EAAeD,EAC9BkM,GAAgB78E,QAAUlhB,KAAKC,IAAID,KAAKmkD,KAAK2tC,EAAeuP,GAAexP,IAGtEqP,GACH,OASJ,MAAMI,OAAoCnuG,IAAxB0tG,GAAqCA,IAAwB5d,GACzE1X,EAASgsB,GAAYr2E,SAAW8kD,EAAU55B,cAAe,IAAGmrD,GAAYr2E,WACxEm5E,GACH9uB,GACEisB,GAA6Bt2E,SAC7B8kD,EAAU55B,cAA+B,mBAG9C,GAAImtD,GAAc+H,EAAW,CAC3B,IAAI3P,EAAAA,GAAAA,KACF,OAGF0P,EAAevP,EAAeD,CAChC,MAAWtmB,GACLmsB,GAAuBx2E,UACzBw2E,GAAuBx2E,SAAU,GACjCqgF,EAAAA,GAAAA,GAAoBv7B,IAItBq7B,EAAetP,GADMxmB,EAAOrF,wBAAwBz+D,KACRy2F,GAAah9E,SAAW,KAEpEmgF,EADShH,EACMr6F,KAAKw7B,IAClB6+D,EAAc2F,WAAa3C,EAxXG,GADX,IA0XnBvL,EAAex4F,GAGFw4F,EAAex4F,GAGhCkoG,EAAAA,GAAAA,GAAYx7B,EAAWhmE,KAAKmkD,KAAKk9C,IAE5BjD,GAAkBl9E,UACrBm9E,GAA0Bn9E,SAAU,GACpC+iE,EAAAA,EAAAA,KAAQ,KACNoa,GAA0Bn9E,SAAU,CAAK,KAI7C68E,GAAgB78E,QAAUlhB,KAAKC,IAAID,KAAKmkD,KAAK2tC,EAAeuP,GAAexP,EAEtC,GAKpC,CAACx6F,EAAY+/F,EAAkBnU,GAAiBoa,KAEnD3rD,EAAAA,GAAAA,IAAsB7iC,IAA8B,IAA5B4yF,GAAuB5yF,OACd1b,IAA3BsuG,IACFC,EAAAA,GAAAA,IA/YiC,IA+Y4BxqG,EAAAA,IAC/D,GACC,CAAC28D,IAEJ,MAAMt8D,IAAOk3C,EAAAA,GAAAA,KAEPxgB,GAAYn0B,QAAQ/G,IAAUm7B,EAAAA,EAAAA,IAASn7B,IACvCskG,GAAYv9F,SAAUm0B,KAAcqpE,GAAkBvjC,GAAkBg0B,GACxE9rB,GAAYniE,SAASu9F,IAAaC,GAClCqK,IAAuBzzE,EAAAA,EAAAA,IAASn7B,KAAYghE,IAAmBmiC,KAG9DiB,KAAkB18F,GAAepD,KAE7B8mG,GAAoBj9E,SAAkD,IAAvCi9E,GAAoBj9E,QAAQzuB,SAEvC,IAAvB4E,GAAY5E,QAAwE,kBAAxDm0C,IAAevvC,EAAW,KAAKqI,QAAQ6H,QAAQnT,MACpC,kBAAvCqG,GAAaiF,SAAS6H,QAAQnT,MAGhCioG,GAAyBY,GAAeC,GAClB,IAAvB7lG,GAAY5E,QAAwE,eAAxDm0C,IAAevvC,EAAW,KAAKqI,QAAQ6H,QAAQnT,KAC1EwtG,GAAsC,IAAvBvqG,GAAY5E,QAC4B,gBAAxDm0C,IAAevvC,EAAW,KAAKqI,QAAQ6H,QAAQnT,KAE9CytG,GAAiB/4D,IAAYA,EAAQxxB,cAAgBwxB,EAAQpoB,MAAQooB,EAAQve,MAE7EvJ,IAAY2uB,EAAAA,GAAAA,GAChB,4BACAssB,IAAa,cACZqhC,GAAW,cACH,WAATlpG,GAAqB,cACrBmpG,GAAmB,oBACnBC,GAAiB,kBACjB3pC,GAAsB,qBACtB0rC,IAAc,YACb5qC,GAAW,gBAGd,OACE7nB,EAAAA,GAAAA,cAAA,OACEkF,IAAKoT,GACLpkC,UAAWA,GACX8gF,SAAU3B,GACVp7C,YAAaygB,GAAAA,GAEZtyD,EACC45B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,SACb8rB,EAAAA,GAAAA,cAAA,YACG6vD,EAAoBA,EAAkBvmG,KAAQ,sBAAoBkhG,EAAgB,UAAY,UAGjGxuD,EACFgE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,SACZ+7E,GAAoBjwD,EAAAA,GAAAA,cAAA,YAAOv1C,GAAK,YAChCsqG,KAAmB9E,GAAoBjwD,EAAAA,GAAAA,cAAA,YAAOv1C,GAAK,eACnDuxC,GACCgE,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,WACV6uB,MAAOkvD,IACJ,UAASA,GAAsBp3F,WAGjC62F,IACC1xD,EAAAA,GAAAA,cAAA,OACEmD,IAAKuuD,GACL72F,MAAOo3F,IAAuBp3F,MAC9BC,OAAQm3F,IAAuBn3F,OAC/BsoC,IAAI,aAGPwuD,IACC5xD,EAAAA,GAAAA,cAACspC,GAAAA,EAAc,CACbrI,SAAO,EACP99B,IAAKyuD,GACLpoB,MAAI,EACJuL,yBAAuB,EACvBxL,OAAK,EACLE,aAAW,IAGdqoB,KAAsBJ,KAAoBE,IACzC5xD,EAAAA,GAAAA,cAACiwC,GAAAA,EAAQ,CACPp1E,MAAOo3F,IAAuBp3F,MAC9BC,OAAQm3F,IAAuBn3F,SAGlCkhC,EAAQxxB,aACPw1B,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wBACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBAAkBzpB,GAAK,kBACnC0xD,EAAAA,GAAAA,GAAWngB,EAAQxxB,YAAa,CAAC,KAAM,QAAS,aAMzDqqF,GACF70D,EAAAA,GAAAA,cAACi1D,GAAe,CAAC7/F,OAAQnP,IACvBsE,KAAgB8/F,IAAiBkF,IAA0BuF,IAC7D90D,EAAAA,GAAAA,cAACk1D,GAAU,CACTjvG,OAAQA,EACRilB,MAAOA,EACP5jB,KAAMA,EACN2/D,eAAgBA,EAChBsoC,uBAAwBA,KAEtBhlG,GAAc8/F,IAAkB18F,EACpCqyC,EAAAA,GAAAA,cAACm1D,GAAkB,CACjBppF,qBAAsBA,EACtB9lB,OAAQA,EACR0hE,WAAYA,EACZ6iC,cAAeA,EACfjgG,WAAYA,GAAc,CAACoD,EAAavG,IACxCijG,cAAeA,IAAiBv9B,GAAc,CAACn/D,IAC/C28F,iBAAkBt9F,QAAQs9F,GAC1B72F,SAAUzG,QAAQ6qC,GAClB0yD,UAAWA,GACXp7B,UAAWA,GACX7W,aAAcA,GACdmyC,YAAaA,GACbC,6BAA8BA,GAC9BztB,qBAAsBA,GACtB/2E,SAAUA,EACVoB,KAAMA,EACNugE,QAASA,EACT8iC,eAAgBA,GAChBC,uBAAwBA,GACxBjP,mBAAoBA,EACpBuC,cAAeA,EACf2M,aAAYR,IAAyB,cAAT/iG,EAC5Bo2E,uBAAwB2sB,KAAkBmH,GAA2Bp9E,QACrE02E,YAAaA,EACbC,cAAeA,EACf1tB,2BAA4BA,IAG9Br9B,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,CAAClO,MAAM,QAAQqzD,gBAAgB,SAErC,KCplBV,IAAez1D,EAAAA,EAAAA,KAhDwB/5C,IAOjC,IAPkC,KACtC6kD,EAAI,cACJ4qD,EAAa,YACbvqF,EAAW,QACX42B,EAAO,UACP4zD,EAAS,UACTphF,GACDtuB,EACC,MAAM6E,GAAOk3C,EAAAA,GAAAA,KAGPuD,GAAMvB,EAAAA,EAAAA,IAAuB,OAC7B,kBACJqe,EAAiB,kBACjBE,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBnd,GAAMowD,GAEjC,OACEt1D,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GC1CG,uBD0CyB3uB,GAAYgxB,IAAKA,GAC3DlF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,YACNjkC,OAAK,EACLoW,UC9C+C,uBD+C/CwtB,QAASA,EACTyhB,cAAejB,EACf3Z,UAAW99C,EAAK4qG,IAEhBr1D,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GCnD+D,uBDmDlC,QAAO4H,QAEnDz9C,QAAQ8d,IAAgBk1B,EAAAA,GAAAA,cAAA,OAAK9rB,UCrD4H,yBDqD5FmsB,EAAAA,GAAAA,IAAqBv1B,IAClFwqF,GACCt1D,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACH/oD,OAAQk6D,EACRvc,QAAS0c,EACT/O,oBAAqBgP,EACrBrR,WAAS,EACT5F,UAAU,QACV2F,UAAU,UAEV9Q,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,YAAY/I,QAAS4zD,GAAY7qG,EAAK,mBAGrD,IElEV,GAAuD,uBC+HvD,IAAek1C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACC,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,GACpD,IAAKkC,EACH,MAAO,CAAC,EAGV,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMkD,GAAoB9C,EAC9Ca,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1BsvG,EAAkBhtG,GAAQrC,IAAamB,EAAAA,IAAsC,WAApBmD,EAE/D,MAAO,CACLA,kBACAvE,SACAuvG,eAAgBD,EAAkBhtG,EAAKspC,0BAAuBxrC,EAC9DovG,cAAeF,EAAkBhtG,EAAKwlB,yBAAsB1nB,EAC5DykB,YAAayqF,EAAkBhtG,EAAKuiB,iBAAczkB,EACnD,GAlBei9C,EA/FqC19C,IASnD,IAToD,QACxDuqD,EAAO,QACPqgD,EAAO,gBACPhmG,EAAe,OACfvE,EAAM,YACN6kB,EAAW,eACX0qF,EAAc,cACdC,EAAa,eACbC,GACD9vG,EACC,MAAM,eACJ+vG,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAE9jE,EAAoB,gBACzE+jE,EAAe,iBAAEC,EAAgB,oBAAEC,IACjCz3F,EAAAA,EAAAA,MAGE63C,GAAazS,EAAAA,EAAAA,IAAuB,MAEpCsyD,EAAqBjpG,QAAQwoG,GAC7BU,EAAoBlpG,QAAQyoG,IAElCr2D,EAAAA,EAAAA,KAAU,KACJ62D,GAAsBhwG,GACxB8rC,EAAqB,CAAE9rC,UACzB,GACC,CAACA,EAAQ8rC,EAAsBkkE,KAElC72D,EAAAA,EAAAA,KAAU,KACJ82D,GAAqBjwG,GACvB+vG,EAAoB,CAAE/vG,UACxB,GACC,CAACA,EAAQ+vG,EAAqBE,IAEjC,MAAM5zC,GAAcvd,EAAAA,EAAAA,KAAY,KAC9B,GAAKoL,EAIL,GAAwB,WAApB3lD,EACFmrG,QACK,CACL,MAAM9+B,EAAoBzgB,EAAWhiC,QAASm/E,cAAej0D,cAA8B,gBACrF62D,EAAkBt/B,EAAkBlhE,iBAAiC,sBACrEygG,EAAqBD,EAAgBA,EAAgBxwG,OAAS,GACpE,IAAKywG,EACH,QAGFr/B,EAAAA,GAAAA,GAAiBF,EAAmBu/B,EAAoB,MAlDzC,GAmDjB,IACC,CAACjmD,EAAS3lD,EAAiBmrG,IAExBllD,GAAe5N,EAAAA,GAAAA,GDpFA,wBCsFlBsN,GAAWnjD,QAAQwoG,IAAmBxoG,QAAQyoG,KDtFwL,wBCuFtOzoG,QAAQwoG,IAAmBxoG,QAAQyoG,MAAoBtlD,GDvFqZ,wBCwF5cqgD,GDxF+S,wBCyF/SkF,GDzF6X,wBC4FhY,OACE11D,EAAAA,GAAAA,cAAA,OAAKkF,IAAKkR,EAAYliC,UAAWu8B,GAC/BzQ,EAAAA,GAAAA,cAACq2D,GAAgB,CACf5rD,KAAK,gBACL4qD,cAAc,8BACd3zD,QAASk0D,EACTN,UAAWS,EACXjrF,YAAa0qF,EACbthF,WAAW2uB,EAAAA,GAAAA,GDpGuE,wBCsG/EozD,GAAsBhzD,IACtBizD,GDvG8J,0BC2GnKl2D,EAAAA,GAAAA,cAACq2D,GAAgB,CACf5rD,KAAK,UACL4qD,cAAc,sBACd3zD,QAASm0D,EACTP,UAAWQ,EACXhrF,YAAa2qF,EACbvhF,WAAYgiF,GAAqBjzD,KAGnCjD,EAAAA,GAAAA,cAACq2D,GAAgB,CACf5rD,KAAK,aACL4qD,cAAc,mBACd3zD,QAAS4gB,EACTx3C,YAAaA,EACboJ,UDzHiM,yBC2H/L,K,gBC7GV,MAAMoiF,GAAqB,KACrBC,GAAmB,GACnBC,GAAiB,YAERl3F,eAAem3F,GAC5BC,EAAkBt5C,EAAY5xC,GAE9B,MAAMyrB,EAAUxoB,IAAIquC,gBAAgBM,IAC5B91D,KAAMwe,EAAQ,KAAEq8B,GAASib,EACjC,IAAIu5C,EACAj3C,EACAtoB,EACAvxB,EAEJ,GAAIG,EAAAA,IAAAA,IAAkCF,GAAW,CAC/C,MAAMi3C,QAAY65C,EAAAA,GAAAA,IAAa3/D,IACzB,MAAEp8B,EAAK,OAAEC,GAAWiiD,EAC1Bl3C,GAAoBgxF,GAAoBh8F,EAAOC,GAE/C,MAAMg8F,EAAe5jG,KAAKC,IAAI0H,EAAOC,GAAUw7F,GACzC1sB,EAAQ9jE,IAAaC,EAAAA,IAE3B,IAAKF,EAAkB,CACrB,IAAK2F,GAASurF,oBAAsBntB,IAAUktB,GAA6B,eAAbhxF,GAA4B,CACxF,MAAMkxF,QAAmBv6C,GACvBxlB,EAAS6/D,EAAeR,GAAqBpjG,KAAKC,IAAI0H,EAAOC,GAAU,EAAG,cAG5E,OADA2T,IAAI8uC,gBAAgBtmB,GACbw/D,GAAgBC,EAAUt5C,EAAM,CACrC25C,kBAAmBC,GAEvB,CAEiB,eAAblxF,IACF4wF,EAAWA,EAAS5gG,QAAQ0gG,GAAgB,SAG9CG,EAAQ,CAAE97F,QAAOC,SACnB,CAEAs8B,EAAiBH,CACnB,MAAO,GAAIhxB,EAAAA,IAAAA,IAAkCH,GAAW,CACtD,MAAQmxF,WAAYp8F,EAAOq8F,YAAap8F,EAAM,SAAE+kD,SAAmBs3C,EAAAA,GAAAA,IAAalgE,GAChFpxB,GAAoBgxF,GAAoBh8F,EAAOC,GAE1C+K,IACH8wF,EAAQ,CAAE97F,QAAOC,SAAQ+kD,aAG3BzoB,QAAuBggE,EAAAA,GAAAA,IAAqBngE,EAC9C,MAAO,GAAI/wB,EAAAA,IAAAA,IAAkCJ,GAAW,CACtD,MAAM,SACJ+5C,EAAQ,MAAE5pD,EAAK,UAAEoqD,EAAS,SAAEg3C,SC5D3B/3F,eAAkCxF,GACvC,MAAM,aAAEw9F,EAAY,YAAEC,SAAsB,qCACtCC,QAAiBF,EAAax9F,IAC5B29F,QAAQ,MAAExhG,EAAK,OAAEmqD,EAAM,QAAEs3C,GAAWC,QAAQ,SAAE93C,IAAe23C,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLzhG,QACAoqD,UAAWD,EACXP,WACAw3C,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMr+F,KAAK9L,SAAS,iBAAcpH,EAQ5F,CD+CcwxG,CAAmB5gE,GAC7ByoB,EAAQ,CACNG,SAAUA,GAAY,EACtB5pD,QACAoqD,aAEFjpB,EAAiBigE,CACnB,CAEA,MAAO,CACLpgE,UACAy/D,WACA5wF,WACAq8B,OACAw0D,QACAj3C,QACAtoB,iBACAvxB,iBAAkBA,QAAoBxf,EACtCyxG,SAAW,GAAE5lG,KAAKC,SAASe,KAAKya,cAC7BnC,EAEP,CAEO,SAASusF,GACdnwF,EAA8BowF,GAE9B,OAAOpwF,EAAY7c,KAAKktG,GAClBD,EACEC,EAAOlB,kBACF,IACFkB,EACHhhE,QAASghE,EAAOlB,mBAGbkB,EAGF,IACFA,EACHpyF,kBAAmBoyF,EAAO9xF,YAAe9f,EACzC6xG,yBAAqB7xG,IAG3B,CAEA,SAASwwG,GAAoBh8F,EAAeC,GAE1C,OADuB5H,KAAKC,IAAI0H,EAAOC,GAAU5H,KAAKw7B,IAAI7zB,EAAOC,IACxCy7F,EAC3B,C,4BElHA,IAAI4B,GASW,SAASC,GAA8BC,GACpDF,GAAW91E,QACXg2E,EAAQh2E,OACV,CAVI9c,EAAAA,KACF4yF,GAAaziG,SAAS0oD,cAAc,SACpC+5C,GAAWjvD,UAAU/gB,IAAI,kCACzBzyB,SAASg2B,KAAK2qC,YAAY8hC,K,gECS5B,MACMG,GAAiC,IAAIC,OAAQ,IAAGC,EAAAA,IAAAA,UAA2B,K,gBCbjF,MAAMC,GAAc,IAAIhqF,IAAI,cAAyD5Y,KAC/E6iG,GAAqB,IACrBC,GAAmB,CAAEF,eAAaG,aAAa,GAC/CC,GAAc,CAAEvxG,KAAM,aACtBwxG,GAAW,GACXC,GAAa,GAEnB,IAAIC,GACAC,GACAC,GAEG55F,eAAe0B,KAOpB,OANKg4F,KACHA,GAAsB,oCACtBC,UAAsBD,IAAqBG,QAC3CD,GAAgB,IAAID,GAAaN,KAG5BK,EACT,CAEO15F,eAAe85F,GAAMC,SA6C5B/5F,uBACQ0B,WACAk4F,GAAcE,OACtB,CA/CQE,GAEN,MAAMhhC,EAAYpmE,KAAKC,MACvB,IAAIonG,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BP,GAAcQ,gBAAmBC,IAC/BH,EAAO5tG,KAAK+tG,EAAW,EAGzB,MAAMC,EAsCR,SAA6BC,EAAyBn4F,GACpD,MAAMo4F,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAAUrB,GACnBgB,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEMrsG,EAFMqsG,EAAU/uG,QAAO,CAACC,EAAK2oB,IAAY3oB,EAAM2oB,GAAS,GAC1CimF,EACE,IAzDoCnsG,KAC1DurG,EAAS7tG,KAAc,IAATsC,GACdmrG,EAAiBnrG,EAAO,EAyDxBwT,CAAGxT,EAAS6qG,GAAa,EAAI7qG,GAE7B0sG,sBAAsBF,EACxB,CAEAA,GAEO,KACLD,GAAc,CAAI,CAEtB,CArE0BI,CAAoB3B,IAK5C,MAAO,CACL73C,KAAMA,IAAM,IAAIzvC,SAAgB,CAACqrC,EAASod,KACxC6+B,GAAc4B,OAAS,KACrB79C,EAAQ,CACNG,KAAM,IAAIP,KAAK28C,EAAQX,IACvBh5C,SAAU3sD,KAAK4K,QAAQy7F,GAAYrnG,KAAKC,OAASmmE,GAAa,KAC9DmhC,YACA,EAEJP,GAAc6B,QAAU1gC,EAExB,MAAM2gC,EAAY9nG,KAAKC,IAAI,EAAGmlE,EAAYogC,GAAqBxmG,KAAKC,OACpErD,YAAW,KACToqG,GAAc73C,OACdu4C,GAAiB,GAChBoB,EAAU,IAEfzoF,MAAOA,KACL,MAAMyoF,EAAY9nG,KAAKC,IAAI,EAAGmlE,EAAYogC,GAAqBxmG,KAAKC,OACpErD,YAAW,KACToqG,GAAc3mF,QACdgnF,EAAWrnG,KAAKC,MAChBynG,GAAiB,GAChBoB,EAAU,EAGnB,C,gBChEA,MAAMC,GAA0B,0BAE1BC,GAAe,CACnBC,KAAM,MACNC,OAAQ,SACRC,UAAW,YACXC,cAAe,eACfC,YAAa,QACbC,UAAW,OAGPC,GAAW,CACfC,OAAQ,IACRP,KAAM,SACNC,OAAQ,KACRC,UAAW,IACXC,cAAe,MACfC,YAAa,MACbC,UAAW,OAGP7wE,GAAU,CACd,KACA,KACA,KACA,KACA,KACA,MAGF,SAASgxE,GAAUC,GAIjB,OAHe,IAAIC,WACAC,gBAAgBF,EAAM,aAE9BlwE,IACb,CAEA,SAASqwE,GAAeC,EAAYnmG,GAClC,MAAM4oE,EAAS/oE,SAAS0oD,cAAcq9C,GAASC,QAI/C,OAHAj9B,EAAO5oE,KAAOA,EACd4oE,EAAOpI,YAAY2lC,EAAKC,WAAU,IAE3Bx9B,CACT,CAEA,SAASy9B,GAAeF,EAAYj5D,GAClC,MAAM9kB,EAAKvoB,SAAS0oD,cAAcrb,GAGlC,OAFA9kB,EAAGo4C,YAAY2lC,EAAKC,WAAU,IAEvBh+E,CACT,CAEA,SAASk+E,GAASC,EAAoB7wG,GACpC,IAAI8wG,EAAU9wG,EAAO0wG,WAAU,GAC/B,OAAKG,GAGDA,EAAMr5D,OAASq5D,EAAMr5D,MAAMu5D,aAAepB,GAAaC,OACzDkB,EAAUH,GAAeG,EAASZ,GAASN,OAEzCiB,EAAMr5D,OAASq5D,EAAMr5D,MAAMw5D,YAAcrB,GAAaE,SACxDiB,EAAUH,GAAeG,EAASZ,GAASL,SAEzCgB,EAAMr5D,OAASq5D,EAAMr5D,MAAMy5D,iBAAmBtB,GAAaG,YAC7DgB,EAAUH,GAAeG,EAASZ,GAASJ,YAEzCe,EAAMr5D,OAASq5D,EAAMr5D,MAAMy5D,iBAAmBtB,GAAaI,gBAC7De,EAAUH,GAAeG,EAASZ,GAASH,gBAEzCc,EAAMr5D,OAASq5D,EAAMr5D,MAAM05D,gBAAkBvB,GAAaK,cAC5Dc,EAAUH,GAAeG,EAASZ,GAASF,cAEzCa,EAAMr5D,OAASq5D,EAAMr5D,MAAM05D,gBAAkBvB,GAAaM,YAC5Da,EAAUH,GAAeG,EAASZ,GAASD,YAGtCa,GArBEA,CAsBX,CAiBA,SAASK,GAAkBC,GACzB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU3mG,SAASknG,eAAeZ,EAAK1lC,aAAe,IACtDumC,EAAab,EAQjB,MAPsB,MAAlBA,EAAKc,WACPT,EAAUN,GAAeM,EAAUL,EAA2BnmG,MAC1D,UAAWmmG,EAAKe,WAAW,IAAM/vG,QAAQgvG,EAAKe,WAAW,GAAGh6D,SAC9D85D,EAAab,EAAKe,WAAW,KAGjCV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAEA,SAASW,GAAahB,GACpB,GAAIA,EAAKe,aAAef,EAAKe,WAAWp3G,QAAU,GAAuB,OAAlBq2G,EAAKc,UAAuC,OAAlBd,EAAKc,UAAoB,CACxG,IAAIG,EACAZ,EAAU3mG,SAASknG,eAAeZ,EAAK1lC,aAAe,IAC1D,GAAsB,OAAlB0lC,EAAKc,UAAuC,OAAlBd,EAAKc,UAAuC,OAAlBd,EAAKc,SAAmB,CAC9EG,EAAavnG,SAAS0oD,cAAc49C,EAAKc,UACzCT,EAAU3mG,SAASwnG,yBACnB,MAAMC,EAAQ,GACd,IAAK,IAAIl5F,EAAI,EAAGA,EAAI+3F,EAAKe,WAAWp3G,OAAQse,IAC1Ck5F,EAAMvxG,QAAQoxG,GAAahB,EAAKe,WAAW94F,KAE7Ck5F,EAAMpyG,KAAKkZ,GAAkBo4F,EAAQhmC,YAAYpyD,IACnD,MAA+C,IAApC0mB,GAAQ7gC,QAAQkyG,EAAKc,WAC9BG,EAAavnG,SAAS0oD,cAAc49C,EAAKc,UACzCT,EAAUK,GAAkBV,EAAKe,WAAW,KACjB,MAAlBf,EAAKc,UACdG,EAAavnG,SAAS0oD,cAAc,KACpCi+C,EA9CN,SAA0BM,GACxB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU3mG,SAASknG,eAAeZ,EAAK1lC,aAAe,IACtDumC,EAAannG,SAASknG,eAAe,IASzC,MARI,UAAWZ,EAAKe,WAAW,IAAM/vG,QAAQgvG,EAAKe,WAAW,GAAGh6D,SAC9D85D,EAAab,EAAKe,WAAW,IAE3Bf,EAAKe,WAAW,IAAsC,MAAhCf,EAAKe,WAAW,GAAGD,WAC3CT,EAAUN,GAAeM,EAAQJ,WAAU,GAAQD,EAAKe,WAAW,GAAyBlnG,MAC5FgnG,EAAab,EAAKe,WAAW,GAAGA,WAAW,IAE7CV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAiCgBe,CAAiBpB,IACA,OAAlBA,EAAKc,SACdT,EAAUL,GAEViB,EAAavnG,SAAS0oD,cAAc,QACpCi+C,EAAUK,GAAkBV,IAE9B,OAAIiB,GACFA,EAAW5mC,YAAYgmC,GAChB,CAACY,IAGH,CAACjB,EAAKC,WAAU,GACzB,CAEA,GAAID,EAAKe,WAAY,CACnB,MAAMM,EAAQ,GACd,IAAK,IAAIp5F,EAAI,EAAGA,EAAI+3F,EAAKe,WAAWp3G,OAAQse,IAC1Co5F,EAAMzxG,QAAQoxG,GAAahB,EAAKe,WAAW94F,KAE7C,OAAOo5F,CACT,CAEA,MAAO,CAACrB,EACV,CAEA,SAASsB,GAAWtB,GAClB,OAAyB,IAAlBA,EAAKuB,QACd,C,gBChJA,MAEMC,GAAkB,0BAwHxB,GAtE0BC,CACxBhnG,EACAinG,EACAC,EACAC,EACAC,EACAC,MAEA1+D,EAAAA,EAAAA,KAAU,KACR,GAAK3oC,EAqDL,OAFAf,SAASsrC,iBAAiB,QAAS+8D,GAAa,GAEzC,KACLroG,SAASurC,oBAAoB,QAAS88D,GAAa,EAAM,EAlD3Dz+F,eAAey+F,EAAY5mG,GACzB,IAAKA,EAAE6mG,cACL,OAGF,MAAMC,EAAQvoG,SAASwoG,cACvB,GAAID,IAAU,CAACE,EAAAA,IAAmBC,EAAAA,KAAyBnuG,SAASguG,EAAM72G,IACxE,OAGF,MAAMi3G,EAAalnG,EAAE6mG,cAAcM,QAAQ,QAAQC,UAAU,EA3ExC,MA4Ef3C,EAAOzkG,EAAE6mG,cAAcM,QAAQ,aACrC,IAAIE,EAAsB5C,GAAO/oG,EAAAA,EAAAA,IAzEvC,SAA2B+oG,GACzB,IAAI6C,EAAW/oG,SAAS0oD,cAAc,OACtC,IACEw9C,GD4JkC8C,EC5Jb9C,GD6JDztF,MAAM8sF,IAlB9B,SAA0B0B,GACxB,MAAMjxE,EAAOh2B,SAAS0oD,cAAc,QAC9Bi/C,EAAQV,EAAMI,WACd4B,EAAgB94G,MAAMwe,KAAKg5F,GAAOryG,OAAOsyG,IACzCsB,EAAa,GAEnB,IAAK,MAAM5C,KAAQ2C,EACjBC,EAAWhzG,QAAQoxG,GAAahB,IAGlC,IAAK,IAAI/3F,EAAI,EAAGA,EAAI26F,EAAWj5G,OAAQse,IACrCynB,EAAK2qC,YAAYuoC,EAAW36F,GAAGg4F,WAAU,IAG3C,OAAOvwE,CACT,CAOSmzE,CAAiBlD,GAAU+C,EAAiB5oG,QAAQ,eAAgB,MAAMikD,UAHxE4hD,GAAU+C,EAAiB5oG,QAAQ,eAAgB,KAAKikD,SC7JjE,CAAE,MAAOlgD,GACH+C,EAAAA,KAEFC,QAAQC,MAAMjD,EAElB,CDsJa,IAAuB6kG,ECrJpCD,EAAS1kD,UAAY6hD,EAAK9lG,QAAQ,UAAW,KAAKA,QAAQ0nG,GAAiB,IAE3E,MAAMsB,EAAeL,EAAS9oG,iBAAiC,iBAiC/D,OAhCImpG,EAAan5G,SACf84G,EAAWK,EAAaA,EAAan5G,OAAS,IAGhDE,MAAMwe,KAAKo6F,EAASM,qBAAqB,MAAM7tG,SAAS8qG,IACtD,GAAMA,aAAgBgD,YAiBtB,OAhBAhD,EAAKriC,gBAAgB,SAGA,OAAjBqiC,EAAKiD,SAAkBjD,EAAKkD,YAAY,MACvB,MAAjBlD,EAAKiD,SAAiBjD,EAAK3lC,YAAY3gE,SAASknG,eAAe,OAC9C,QAAjBZ,EAAKiD,SAAsBjD,EAAKnQ,QAAQsT,YAAYnD,EAAKkD,YAAYlD,EAAKx8D,aAAa,QAAU,IAEjGw8D,EAAKnQ,QAAQuT,eAAepD,EAAK/kD,SAEjCooD,EAAAA,GAA0BrD,EAAKiD,UACjCjD,EAAKliC,aAAa,mBAAoBulC,EAAAA,GAA0BrD,EAAKiD,UAGlEjD,EAAKnQ,QAAQsT,YAAcnD,EAAK1lC,cAAgB0lC,EAAKsD,WAAWtD,EAAKkD,YAAYlD,EAAK1lC,aAEvF0lC,EAAKnQ,QAAQzoD,KAAK44D,EAAKliC,aAAa,MAAOkiC,EAAKnQ,QAAQzoD,KACpD44D,EAAKnQ,QAAQsT,YACnB,KAAKI,EAAAA,GAAAA,YACHvD,EAAKkD,YAAYlD,EAAK1lC,aAAe,IACrC,MACF,KAAKipC,EAAAA,GAAAA,YACHvD,EAAK1lC,YAAc0lC,EAAKnQ,QAAQzoD,KAAO,GACjC,IAILq7D,EAAS1kD,UAAUylD,SAC5B,CA4BQC,CAAkB7D,QAAOv1G,GAAW,QAClCA,EAEAm4G,IAAuBkB,EAAAA,GAAAA,IAAoBlB,IAAwBX,IACrEW,GAAsBmB,EAAAA,GAAAA,IAAiBnB,GACvCV,OAGF,MAAM,MAAEX,GAAUhmG,EAAE6mG,cACpB,IAAIz0G,EAA4B,GAOhC,GALA4N,EAAEuoC,iBACEy9D,EAAMx3G,OAAS,IACjB4D,QAAcq2G,EAAAA,GAAAA,GAA8BzC,KAGzC5zG,GAAO5D,SAAW04G,EACrB,OAGF,GAAI90G,GAAO5D,SAAWi4G,EAAe,CACnC,MAAMiC,QAAuBjuF,QAAQC,IAAItoB,EAAMwB,KAAKwvB,GAC3Ck8E,GAAgBl8E,EAAKqY,KAAMrY,MAEpCojF,GAAgB/1F,GAAgBA,EAAYhF,OAAOi9F,IACrD,CAEA,MAAMC,EAActB,GAAqBx2F,UAAUriB,OAAS64G,EAAsB,CAAEl1G,KAAM+0G,GAEtFyB,GACFpC,EAA0BoC,EAAa7B,GAAO72G,GAElD,CAMC,GACA,CACDs2G,EAA2BE,EAAeD,EAAgBlnG,EAAUonG,EAAwBC,GAC5F,E,gBChHJ,MAAMiC,GAAe,IAAIn5E,IAAY,CAAC24E,EAAAA,GAAAA,QAA+BA,EAAAA,GAAAA,M,wCCPrE,MAAMS,GAAW,IACXC,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrB5uF,SAAU,GACV7qB,MAAO,GACP05G,aAAa,EACbC,gBAAiB,IAGbC,GAAS5qG,SAAS0oD,cAAc,OAyEtC,MAAMmiD,IAAsBC,EAAAA,GAAAA,IAAS,CAACjvF,EAAkB7qB,EAAe05G,KAAyB,CAC9F7uF,WACA7qB,QACA05G,cACAC,gBAAiB9uF,EAAS+vB,kBC1FtBm/D,GAAa,sB,4BCmGnB,SAAS76F,GAAkBb,GACzB,OAAIA,EAAWc,iBAAyB,OAEpCG,EAAAA,IAAAA,IAAkCjB,EAAWe,UACxC,QAGLG,EAAAA,IAAAA,IAAkClB,EAAWe,UACxC,QAGLI,EAAAA,IAAAA,IAAkCnB,EAAWe,UACxC,QAGF,MACT,C,4BC1GA,IAAI46F,IAAW,EASf,MCbA,IAAe/gE,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE93C,GAAW83C,EACb+gE,GAAqB7gE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBj4C,GAGjF,OAAO64G,EAAqB3gE,EAAAA,GAAAA,cAAC2gE,EAAuB/gE,QAAYv5C,CAAS,I,oDCX3E,SAAwD,uBCqBlDu6G,GAAwB,SA4B9B,IAAejhE,EAAAA,EAAAA,KA1BqB/5C,IAE9B,IAF+B,KACnC6kD,EAAI,MAAEhlB,GACP7/B,EACC,MAAMo6D,GAAYxd,EAAAA,GAAAA,IAASqvD,EAAAA,EAAAA,IAAqBpnD,IAAO,EAAOxb,EAAAA,GAAAA,MAExD4xE,GAAUn+D,EAAAA,EAAAA,KAAQ,KACtB,IAAKsd,EAAW,MAAO,GACvB,MAAMje,EAAkB,SAAVtc,EAXO,qBACC,qBAYhBq7E,EAA8B9gD,EAAUlqD,QAAQ8qG,GAAuB7+D,GACvEg/D,GAAM,IAAIlF,WAAYC,gBAAgBgF,EAA6B,iBAMzE,OALAC,EAAIprG,iBAAiB,QAAQzE,SAAS4xC,IACpCA,EAAKC,MAAMi+D,OAASj/D,EACpBe,EAAKC,MAAMk+D,YAlBe,OAkBsB,IAG1C,2BAA0BF,EAAI/qC,gBAAgBkrC,WAAW,GAChE,CAAClhD,EAAWv6B,IAEf,OACEua,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GD3CK,uBC2CuBs+D,EAAAA,IAAmBl+D,KAC3DjD,EAAAA,GAAAA,cAAA,OAAKmD,IAAK09D,EAASz9D,IAAI,GAAGlvB,WAAW2uB,EAAAA,GAAAA,GD5C4C,uBC4Cfs+D,EAAAA,IAAmBl+D,MACnF,ICyDR,IAAetD,EAAAA,EAAAA,KA7EqB/5C,IAO9B,IAP+B,IACnCg9B,EAAG,MACH6C,EAAK,OACLx/B,EAAM,SACNC,EAAQ,aACRk7G,EAAY,aACZC,GACDz7G,EACC,MAAM,cAAE+iC,EAAa,gBAAEhG,IAAoBpkB,EAAAA,EAAAA,MAErC9T,GAAOk3C,EAAAA,GAAAA,KAEP8I,GAAO/H,EAAAA,EAAAA,KAAQ,IACZ9f,EAAI0+E,MAAMnwG,MAAKiC,IAAA,IAAC,KAAEw/B,GAAMx/B,EAAA,MAAc,mBAATw/B,CAAyB,KAAGl9B,UAC/D,CAACktB,EAAI0+E,SAED/wD,EAAYgxD,EAAUC,IAAaz9D,EAAAA,GAAAA,MACnC09D,EAAcC,IAAmB9gE,EAAAA,EAAAA,SAAsCv6C,GAExE67D,GAAoBnd,EAAAA,EAAAA,KAAa5tC,IACrCA,EAAEuoC,iBACF,MAAMiiE,EAAOxqG,EAAEuiE,cAAcN,wBAC7BsoC,EAAgB,CAAEpzE,EAAGqzE,EAAKC,MAAOxyE,EAAGuyE,EAAK7V,SACzCsV,IACAG,GAAU,GACT,CAACH,EAAcG,IAEZM,GAAkB98D,EAAAA,EAAAA,KAAY,KAClCy8D,IACAH,GAAc,GACb,CAACG,EAAWH,IAETS,GAA0B/8D,EAAAA,EAAAA,KAAY,KAC1C28D,OAAgBr7G,EAAU,GACzB,IAEG07G,GAAkBh9D,EAAAA,EAAAA,KAAY,KAClCpiB,EAAgB,CACdxoB,MAAOyoB,EAAIx7B,GACXy7B,WAAW,GACX,GACD,CAACD,EAAIx7B,GAAIu7B,IAEZ,OACEqd,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACP7N,IAAK/Z,EAAIx7B,GACT48D,WAAYvZ,GAAQzK,EAAAA,GAAAA,cAACgiE,GAAa,CAACv3D,KAAMA,EAAMhlB,MAAOA,IACtDglB,KAAOA,OAAgBpkD,EAAT,OAEdq7C,QAASA,IAAM/Y,EAAc,CAC3B/F,MACA38B,SACAC,aAEFi9D,cAAejB,GAEdt/B,EAAI7R,UACJ0wF,GACCzhE,EAAAA,GAAAA,cAACiiE,GAAAA,EAAM,KACLjiE,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACH/oD,OAAQyoD,EACRpF,UAAU,QACVpI,MAAQ,SAAQ0+D,EAAanzE,YAAYmzE,EAAaryE,OACtDlb,UAAU,0BACV68B,WAAS,EACTtL,QAASo8D,EACTzuD,oBAAqB0uD,GAErB9hE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,OAAOy3D,aAAW,EAACxgE,QAASqgE,GAAkBt3G,EAAK,uBAK/D,ICiGf,IAAek1C,EAAAA,EAAAA,KArJkB/5C,IAgB3B,IAhB4B,OAChCK,EAAM,SACNC,EAAQ,gBACRi8G,EAAe,eACfC,EAAc,eACdC,EAAc,cACd1pG,EAAa,cACbC,EAAa,iBACbC,EAAgB,cAChBC,EAAa,WACbwpG,EAAU,SACVvlE,EAAQ,YACRlG,EAAW,aACX0rE,EAAY,aACZC,EAAY,MACZ/8E,GACD7/B,EACC,MAAO68G,EAAkBC,EAAgBC,IAAmB5+D,EAAAA,GAAAA,MACrDiO,EAAkBC,EAAkB2wD,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,GAEzFG,EAAuBnqG,GAAiBC,EACxCmqG,EAAsBpqG,GAAiBC,GAEtCoqG,EAAyBC,EAA2BC,IAA+Bn/D,EAAAA,GAAAA,MAC1F3E,EAAAA,EAAAA,KAAU,KACJqjE,GACFG,GACF,GACC,CAACH,EAAkBG,IAEtB,MAAMO,GAAyBp+D,EAAAA,EAAAA,KAAY,KACrC09D,EACFE,IAEAD,GACF,GACC,CAACD,EAAkBC,EAAgBC,IAEhCS,GAAmBr+D,EAAAA,EAAAA,KAAY,CAAC5tC,EAAUksG,KAC9C,MAAM,MAAE95G,GAAU4N,EAAEwhE,OACd2qC,GAAiBC,EAAAA,GAAAA,IAAch6G,GAEjC+5G,GAAgB39G,QAClB48G,EAAae,EAAgBD,EAC/B,GACC,CAACd,IAEEiB,GAAoBz+D,EAAAA,EAAAA,KAAY,MACpC0+D,EAAAA,GAAAA,GACE59G,MAAMwe,KAAKy+F,EAAuBY,EAAAA,IAChC/qG,EAAgBqN,EAAAA,IAAgCC,EAAAA,KAC/C/Z,KAAK,MACPiL,GAAMisG,EAAiBjsG,GAAG,IAC5B,GACA,CAACwB,EAAemqG,EAAsBM,IAEnCO,GAAuB5+D,EAAAA,EAAAA,KAAY,MACvC0+D,EAAAA,GAAAA,IAAuB5qG,GAAoBC,EACvCjT,MAAMwe,KAAK6B,EAAAA,KAA+Bha,KAAK,KAC/C,KACEiL,GAAMisG,EAAiBjsG,GAAG,IAAO,GACtC,CAAC2B,EAAeD,EAAkBuqG,IAE/BngF,GAAOyf,EAAAA,EAAAA,KAAQ,IACZp1C,OAAOgT,OAAOgiG,GAAYt3G,QAAQ43B,KAClCma,MACY,SAAbA,GAAuBna,EAAIx7B,KAAOnB,IAAU28B,EAAI6F,UAAUx4B,SAAS,UAGhE2yB,EAAI6F,UAAUx4B,SAAS8sC,OAE/B,CAACulE,EAAYr8G,EAAQ82C,IAElBtyC,GAAOk3C,EAAAA,GAAAA,KAEb,GAAKwgE,EAIL,OACEniE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAC4jE,GAAAA,EAAqB,CACpBx8G,GAAG,qBACH8sB,UAAWuuF,EAAmB,+BAAiC,qBAC/D3kG,OAAK,EACLikC,MAAM,cACN8hE,WAAYV,EACZ56D,UAAU,oBACVu7D,aAAa,uBACbC,UAAQ,GAER/jE,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAEf8rB,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACHzpD,GAAG,uBACHU,OAAQ26G,GAAoBO,EAC5BjyD,WAAS,EACT5F,UAAU,QACV2F,UAAU,SACVrL,QAASk9D,EACTzuF,UAAU,yBACVk/B,oBAAqBuvD,EACrBjwD,aAAe5gD,EAAAA,QAAkCzL,EAAnB2rD,EAC9BW,aAAe7gD,EAAAA,QAAkCzL,EAAnB4rD,EAC9B+xD,mBAAoBlyG,EAAAA,GACpBmyG,eAAe,uBAMb7B,GACApiE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACt2B,UAAU,iBAAiBsvC,UAAQ,GAAC,uDAE/C4+C,GACCpiE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG+iE,GACC/iE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,QAAQ/I,QAAS8hE,GAC7B/4G,EAAKq4G,EAAuB,8BACxBnqG,EAAgB,4BAA8B,+BAGrDE,GAAoBC,IAElBknC,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,WAAW/I,QAASiiE,GAChCl5G,GAAMoO,GAAoBC,EAAgB,4BAA8B,oBAKlFupG,GACCriE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,OAAO/I,QAAS8gE,GAAe/3G,EAAK,SAGpD23G,IAAmBvrE,GAAe5T,EAAKl4B,KAAK63B,GAC3Cod,EAAAA,GAAAA,cAACkkE,GAAa,CACZthF,IAAKA,EACL38B,OAAQA,EACRC,SAAUA,EACVu/B,MAAOA,EACP27E,aAAc6B,EACd5B,aAAc6B,OAIhB,ICjLV,IAAevjE,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE93C,GAAW83C,EACbukE,GAAmBrkE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBj4C,GAG7E,OAAOq8G,EAAmBnkE,EAAAA,GAAAA,cAACmkE,EAAqBvkE,QAAYv5C,CAAS,ICGvE,IAAes5C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE93C,GAAW83C,EACbwkE,GAAiBtkE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBj4C,GAGzE,OAAOs8G,EAAiBpkE,EAAAA,GAAAA,cAACokE,EAAmBxkE,QAAYv5C,CAAS,I,gBCLnE,MAQA,IAAes5C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE93C,GAAW83C,EACbykE,GAAiBvkE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBj4C,GAGzE,OAAOu8G,EAAiBrkE,EAAAA,GAAAA,cAACqkE,EAAmBzkE,QAAYv5C,CAAS,I,4BCLnE,MAQA,IAAes5C,EAAAA,EAAAA,KAR+BC,IAC5C,MAAM,OAAE93C,GAAW83C,EACb0kE,GAAoBxkE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsBj4C,GAG/E,OAAOw8G,EAAoBtkE,EAAAA,GAAAA,cAACskE,EAAsB1kE,QAAYv5C,CAAS,IC0DzE,IAAes5C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAgC,IAA9B,UAAE1G,GAAW0G,EACpB,MAAM,OAAEnN,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACxD,OAAKS,EAIE,CAAEgF,SAASiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,IAH3C,CAAC,CAGsD,GAPhD42C,EA7C+B19C,IAE7C,IAF8C,OAClDkC,EAAM,QAAEmD,EAAO,QAAEw6C,GAClB7/C,EACC,MAAM,qBAAEw0D,IAAyB77C,EAAAA,EAAAA,OAE1ByzC,EAAkBC,IAAoB4wD,EAAAA,GAAAA,GAAe/6G,EAAQ29C,IAC9D,oBAAE8+D,GAAwBt5G,GAAW,CAAC,EAE5C,GAAKA,GAAYA,EAAQu5G,gBAIzB,OACExkE,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACH/oD,OAAQA,EACRipD,UAAWwzD,EACXp5D,UAAU,QACV2F,UAAU,SACVrL,QAASA,EACTvxB,UAAU,kBACVk/B,oBAAqB3N,EACrBiN,aAAe5gD,EAAAA,QAAkCzL,EAAnB2rD,EAC9BW,aAAe7gD,EAAAA,QAAkCzL,EAAnB4rD,EAC9BwyD,WAAS,GAETzkE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,WACZjpB,EAAQu5G,gBAAgBz5G,KAAK4oE,GAC5B3zB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,OACZy/C,EAAI5oE,KAAKk6B,GACR+a,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLiD,QAAM,EACNqe,SAA0B,gBAAhBv+B,EAAO39B,KAEjBo6C,QAASA,IAAM0Y,EAAqB,CAAE1tD,UAAWzB,EAAQ7D,GAAI69B,YAE5DA,EAAO37B,YAMb,K,wCCPX,MA6NA,IAAeq2C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAA6C,IAA3C,uBAAEsxG,GAAwBtxG,EACjC,MAAM,OAAEnN,EAAM,SAAEC,EAAUoB,KAAMkD,IAAoBrE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACzF,IAAKS,IAAWC,IAAasE,EAC3B,MAAO,CAAC,EAGV,MACEnC,iBAAiB,WACfiI,EAAU,SAAEhI,EAAUiC,WAAYo6G,EAAiB,UAAEh0G,EAAS,WAAEC,KAEhE9J,EAAAA,EAAAA,IAAetB,GAEb0H,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClDikB,EAAgC,cAApB3f,GACd6f,EAAAA,EAAAA,IAAyB7kB,EAAQS,IACjCmkB,EAAAA,EAAAA,IAAgB5kB,EAAQS,EAAQC,GAC9BwkF,EAAgBllF,EAAOwV,SAASC,MAAMF,gBAAkB,EACxDsgF,EAAe/yF,IAAarC,EAC5B2+G,EAAoBD,GAAmB55G,KAAK3D,IAAO8S,EAAAA,EAAAA,IAAkB1U,EAAQ8K,EAAalJ,KAEhG,IAAI6D,EASAS,EACJ,GATIwB,IAAiBw3G,EACnBz5G,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiH,GACnCid,EACTlf,GAAU4d,EAAAA,EAAAA,IAAqBrjB,EAAQS,EAAQC,EAAUsE,GAChD6wF,GAA8C,IAA9BspB,EAAmBh/G,SAC5CsF,EAAU25G,IAAoB,IAI5B13G,GAAgBjC,IAAYy5G,EAAwB,CACtD,MAAM,YAAE92C,GAAgB3iE,EAClBg8D,GAAiBC,EAAAA,EAAAA,IAAqB1hE,EAAQS,GAChD2nE,IAAgBA,EAAYsyB,eAAiBj5B,KAC/Cv7D,GAAS87D,EAAAA,EAAAA,IAAsBhiE,EAAQyF,IAGpCS,GAAWkiE,GAAaE,iBAC3BpiE,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAElC,MAAWowF,IACLpwF,IACFS,GAAS87D,EAAAA,EAAAA,IAAsBhiE,EAAQyF,GAClCS,IACHA,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,KAG7BS,IACHA,GAAS01B,EAAAA,EAAAA,IAAS9wB,IAAe+Y,EAAAA,EAAAA,IAAW7jB,EAAQ8K,IAAe9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,KAI1F,MAAMu0G,EAAuBD,GAAmBp0E,MAAMs0E,GACpDA,GAASlyG,QAAQtJ,MAAQgE,OAAOC,KAAKu3G,EAAQlyG,SAASjN,OAAS,IAGjE,MAAO,CACLuH,eACAid,YACAlf,UACAS,SACAg/E,gBACAq6B,uBAAwB1pB,EAAespB,EAAmBh/G,YAASU,EACnEsK,YACAC,aACAi0G,uBACA94F,sBAAsBC,EAAAA,EAAAA,IAA2BxmB,GAClD,GApEe89C,EA3NuC19C,IAarD,IAbsD,aAC1DsH,EAAY,UACZid,EAAS,QACTlf,EAAO,OACPS,EAAM,cACNg/E,EAAa,uBACbq6B,EAAsB,UACtBp0G,EAAS,WACTC,EAAU,qBACVi0G,EAAoB,uBACpBH,EAAsB,qBACtB34F,EAAoB,QACpBi5F,GACDp/G,EACC,MAAM,gBACJmI,EAAe,aACf+a,EAAY,aACZ9a,EAAY,uBACZi3G,EAAsB,oBACtBC,EAAmB,qBACnBC,EAAoB,gBACpBC,IACE7mG,EAAAA,EAAAA,MAEE2mC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bl5C,GAAOk3C,EAAAA,GAAAA,KAEP05C,EAAeruF,QAAQ+3G,GACvB50D,EAAUnjD,SACZE,GAAgBid,IAAclf,GAC5BS,GAAUq5G,GAEVM,GAAazqD,EAAAA,GAAAA,GACjB,CAACmqD,GACDA,EApC4B,SAoCuB1+G,IAG/C,aACJ0oD,EAAY,qBAAEE,IACZC,EAAAA,GAAAA,GAAkBm2D,GAAcl1D,OAAS9pD,GAAYqkF,OAAerkF,GAAYqkF,GAE9E46B,GAAgBvgE,EAAAA,EAAAA,KAAY,KAC5B73C,IAAiBw3G,EACnB32G,EAAgB,CAAErB,eAAWrG,IACpB8jB,EACTrB,EAAa,CAAEpc,eAAWrG,IACjB0+G,GACTK,IAEFJ,KAAW,GACV,CACD93G,EAAcw3G,EAAwBv6F,EAAW46F,EAAwBC,EAASj3G,EAAiB+a,EACnGs8F,KAGFhmE,EAAAA,EAAAA,KAAU,IAAO+Q,GAAUpG,EAAAA,GAAAA,GAAsBu7D,QAAiBj/G,GAAY,CAAC8pD,EAASm1D,IAExF,MAAMC,GAAqBxgE,EAAAA,EAAAA,KAAY,KACjCs2C,GACJrtF,EAAa,CAAE/H,OAAQgF,EAAShF,OAAQyG,UAAWzB,EAAS7D,GAAIK,mBAAmB,GAAO,GACzF,CAACuG,EAAcqtF,EAAcpwF,IAE1Bu6G,GAAmBzgE,EAAAA,EAAAA,KAAa5tC,IACpCA,EAAE2wC,kBACFw9D,GAAe,GACd,CAACA,IAEEG,GAA6B1gE,EAAAA,EAAAA,KAAY,KAC7CkgE,GAAwB,GACvB,CAACA,KAEE,kBACJjjD,EAAiB,oBAAEic,EAAmB,kBAAE/b,EAAiB,uBACzDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBnd,GAErBwgE,GAAoB3gE,EAAAA,EAAAA,KAAY,IAAMG,EAAI9wB,SAAS,IACnDuxF,GAAiB5gE,EAAAA,EAAAA,KAAY,IAAMG,EAAI9wB,SAAU,IACjDwxF,GAAiB7gE,EAAAA,EAAAA,KAAY,IAAMG,EAAI9wB,QAASkrB,cAAc,kCAAkC,KAEhG,UACJ6L,EAAS,UAAE2F,EAAS,iBAAE+0D,EAAgB,iBAAEC,EAAkB/iE,MAAOgjE,IAC/DC,EAAAA,GAAAA,GACF/nC,EACAynC,EACAC,EACAC,GAGI1xF,GAAY2uB,EAAAA,GAAAA,GAAe,0BAA2BoM,GAEtDg3D,GAAWvjE,EAAAA,EAAAA,KAAQ,IACnBx1C,IAAiBw3G,EACZ,aAELv6F,EACK,YAELkxE,EACK,oBADT,GAKC,CAAClxE,EAAWkxE,EAAcnuF,EAAcw3G,IAErChmC,EAAaqmC,GAA0BA,EAAyB,EAClEt6G,EAAK,wBAAyBs6G,QAC9B1+G,EAEE6/G,GAAkBxjE,EAAAA,EAAAA,KAAQ,KAC9B,IAAKz3C,IAAYowF,IAAiBpwF,EAAQ2H,QAAQtJ,OAASqH,GAAaob,EAAsB,OAAO9gB,EAErG,MAAMk7G,GAAexG,EAAAA,EAAAA,IAAiB10G,EAAQ2H,QAAQtJ,MACtD,MAAO,IACF2B,EACH2H,QAAS,IACJ3H,EAAQ2H,QACXtJ,KAAM68G,GAET,GACA,CAACp6F,EAAsBsvE,EAAcpwF,EAAS0F,IAEjD,GAAKo+C,EAIL,OACE/O,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWA,EAAWgxB,IAAKA,EAAKie,cAAejB,EAAmBxgB,QAASwgB,GAC9EliB,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,sBACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAW+xF,KAEhBjmE,EAAAA,GAAAA,cAACwnD,GAAe,CACdtzE,UAAU,eACVjpB,QAASi7G,EACTx6G,OAASiF,OAAqBtK,EAATqF,EACrBgzE,WAAYA,EACZzoE,MAAOkU,EAAY1f,EAAK,eAAiBkG,EAAYlG,EAAK,qCAAkCpE,EAC5Fq7C,QAAS6jE,EACT3mC,eAAgByc,IAElBr7C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,UAAU,kBACVpW,OAAK,EACLsoG,OAAK,EACLrkE,MAAM,cACNwG,UAAW99C,EAAK,UAChBi3C,QAAS8jE,GAETxlE,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEdmnE,GACCr7C,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAI,CACH/oD,OAAQk6D,EACR6jD,iBAAkBA,EAClBC,iBAAkBA,EAClB36D,UAAWA,EACX2F,UAAWA,EACX/N,MAAOgjE,EACP7xF,UAAU,uBACVuxB,QAAS0c,EACT/O,oBAAqBgP,GAErBpiB,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAO95C,OAAkCtK,EAAtB,oBACnB29D,WAAYrzD,EAAYqvC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,0BAAwB7tB,EAE7Dq7C,QAASA,IAAMwjE,EAAoB,CACjCv0G,WAAW,KAGZlG,EAAKs6G,EAAyB,EAAI,kBAAoB,oBAEzD/kE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAM95C,EAAY,yBAAsBtK,EACxC29D,WAAarzD,OAAiDtK,EAArC25C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBAEtCwtB,QAASA,IAAMwjE,EAAoB,CACjCv0G,WAAW,KAGZlG,EAAKs6G,EAAyB,EAAI,kBAAoB,oBAExDF,GACC7kE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACqmE,GAAAA,EAAa,MACdrmE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAO75C,OAAmCvK,EAAtB,oBACpB29D,WAAYpzD,EAAaovC,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,0BAAwB7tB,EAE9Dq7C,QAASA,IAAMyjE,EAAqB,CAClCv0G,YAAY,KAGbnG,EAAKs6G,EAAyB,EAAI,0CAA4C,gBAEjF/kE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CACPC,KAAM75C,EAAa,yBAAsBvK,EACzC29D,WAAapzD,OAAkDvK,EAArC25C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,qBAEvCwtB,QAASA,IAAMyjE,EAAqB,CAClCv0G,YAAY,KAGbnG,EAAKs6G,EAAyB,EAAI,0CAA4C,iBAIrF/kE,EAAAA,GAAAA,cAACqmE,GAAAA,EAAa,MACdrmE,EAAAA,GAAAA,cAACwK,GAAAA,EAAQ,CAACC,KAAK,UAAU/I,QAAS+jE,GAC/Bh7G,EAAK,sBAKV,KCrQV,IAAek1C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,YAAEh4B,GAAgBg4B,EAClB0mE,GAAkBxmE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBn4B,EAAYjiB,QAGvF,OAAO2gH,EAAkBtmE,EAAAA,GAAAA,cAACsmE,EAAoB1mE,QAAYv5C,CAAS,ICGrE,IAAes5C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE93C,GAAW83C,EACb2mE,GAAiBzmE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBj4C,GAGzE,OAAOy+G,EAAiBvmE,EAAAA,GAAAA,cAACumE,EAAmB3mE,QAAYv5C,CAAS,ICGnE,IAAes5C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,OAAE93C,GAAW83C,EACb4mE,GAAY1mE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcj4C,GAG/D,OAAO0+G,EAAYxmE,EAAAA,GAAAA,cAACwmE,EAAc5mE,QAAYv5C,CAAS,ICGzD,IAAes5C,EAAAA,EAAAA,KARsBC,IACnC,MAAM,OAAE93C,GAAW83C,EACb6mE,GAAW3mE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAaj4C,GAG7D,OAAO2+G,EAAWzmE,EAAAA,GAAAA,cAACymE,EAAa7mE,QAAYv5C,CAAS,IC2BjDqgH,GAAU,IAAInO,OAAOoO,EAAAA,IAAkB,KAyF7C,IAAehnE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAuC,IAArC,OAAEnN,EAAM,SAAEC,GAAUkN,EAC3B,MAAMkU,GAAYC,EAAAA,EAAAA,IAAgB/hB,EAAQS,EAAQC,GAClD,MAAO,CACLu/B,OAAOugB,EAAAA,EAAAA,IAAYxgD,GACnB+lB,gBAAgBzkB,EAAAA,EAAAA,IAAetB,GAAQ+lB,eACvCjE,YACD,GAPeg8B,EAvF8B19C,IAQ5C,IAR6C,OACjDK,EAAM,SACNC,EAAQ,QACR0gH,EAAO,WACPnmE,EAAU,eACVl1B,EAAc,UACdjE,EAAS,MACTme,GACD7/B,EACC,MAAM,mBACJihH,EAAkB,oBAClBn/F,EAAmB,qBACnBo/F,IACEvoG,EAAAA,EAAAA,MAEEwoG,GAAsBC,EAAAA,GAAAA,IAAqB,KAC/C,MAAM,KAAE19G,EAAI,SAAE0e,IAAanV,EAAAA,EAAAA,IAAkB+zG,KACvCK,EAAaj/F,GAAU7W,MAAM+1G,GACjCA,EAAO5/G,OAASi4G,EAAAA,GAAAA,UAGlB,OAAO0H,GAAYntG,KAAOxQ,EAAK6kB,MAAMu4F,MAAW,EAAE,GACjD,CAACE,GAzBc,KAyBS,GAErBO,GAAUC,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBH,IAAU,IAEtFxnE,EAAAA,EAAAA,KAAU,KACR,MAAMxpC,EAAOuxG,IAETvxG,EACFixG,EAAmB,CAAEv9G,KAAMsM,KAE3B8R,IACAo/F,EAAqB,CAAE7gH,SAAQC,aACjC,GACC,CAACihH,EAASlhH,EAAQC,EAAUwhB,EAAqBm/F,EAAoBC,KAExE9wD,EAAAA,GAAAA,IAAc,KACZtuC,IACAo/F,EAAqB,CAAE7gH,SAAQC,YAAW,GACzC,CAACD,EAAQyhB,EAAqBxhB,EAAU4gH,IAE3C,MAAM32D,GAAUqY,EAAAA,GAAAA,IAAgB,IACvBx7D,QAAQue,GAAkBq7F,MAAct/F,IAAcm5B,IAC5D,CAACA,EAAYmmE,EAASt/F,EAAWiE,KAC9B,aAAEwjC,EAAY,qBAAEE,IAAyBC,EAAAA,GAAAA,GAAkBiB,GAE3Dk3D,GAAmBh9C,EAAAA,GAAAA,GAAiB9+C,GAAgB,GAEpD+7F,GAA4BviE,EAAAA,EAAAA,KAAY,KAC5C+hE,EAAqB,CAAE7gH,SAAQC,WAAUohB,WAAW,GAAO,GAC1D,CAACrhB,EAAQC,EAAU4gH,IAEtB,IAAK/3D,IAAiBs4D,EACpB,OAIF,MAAM,MAAE5pF,KAAU8pF,GAAwBF,EACpCG,EAAc,CAClB50G,QAAS,CACPo8E,QAASu4B,IAIb,OACEvnE,EAAAA,GAAAA,cAAA,OAAK9rB,WAAW2uB,EAAAA,GAAAA,GAAe,iBAAkBoM,IAC/CjP,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,4BACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAEf8rB,EAAAA,GAAAA,cAAC4oD,GAAO,CAAC39F,QAASu8G,EAAa34B,WAAS,EAACppD,MAAOA,IAChDua,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,UAAU,uBACVpW,OAAK,EACLsoG,OAAK,EACLrkE,MAAM,cACNwG,UAAU,wBACV7G,QAAS4lE,GAETtnE,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAGb,KC7GV,IAAeyrB,EAAAA,EAAAA,KARwBC,IACrC,MAAM,OAAE93C,GAAW83C,EACb6nE,GAAa3nE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAej4C,GAGjE,OAAO2/G,EAAaznE,EAAAA,GAAAA,cAACynE,EAAe7nE,QAAYv5C,CAAS,IC+C3D,IAAes5C,EAAAA,EAAAA,KA7CqB/5C,IAK9B,IAL+B,OACnCkC,EAAM,QACN45C,EAAO,KACPp4C,EAAI,WACJm3C,GACD76C,EAEC,MAAM8hH,GAAU/jE,EAAAA,EAAAA,IAAwB,MAuBxC,OArBAvE,EAAAA,EAAAA,KAAU,KACR,MAAMuoE,EAASD,EAAQtzF,QACvB,IAAKuzF,EAAQ,OAEb,MAAM9sG,EAAQ8sG,EAAOC,YAAc,EAEhBD,EAAO7wC,QAAQ,aACvB/zB,MAAMiU,YAAY,wBAA0B,GAAEn8C,MAAU,GAClE,CAAC/S,EAAQwB,KAEZ81C,EAAAA,EAAAA,KAAU,KACR,MAAMuoE,EAASD,EAAQtzF,QACvB,IAAKuzF,EAAQ,OAEb,MAAME,EAAaF,EAAO7wC,QAAQ,aAElC,MAAO,KACL+wC,EAAW9kE,MAAM+kE,eAAe,wBAAwB,CACzD,GACA,IAGD9nE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,WAAW2uB,EAAAA,GAAAA,GAAe,WAAY/6C,GAAU,QAChDgW,OAAK,EACLikC,MAAM,cACNyhB,SAAU/iB,EACViB,QAASA,EACT6G,UAAU,6BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,WAAW2uB,EAAAA,GAAAA,GAAe,gBAAiB,cAAe/6C,GAAU,UACvEk4C,EAAAA,GAAAA,cAAA,QAAMkF,IAAKwiE,EAASxzF,UAAU,iBAAiB5qB,GACxC,I,gBCkJRy+G,GAAe,SAAfA,GAAe,OAAfA,EAAe,YAAfA,EAAe,gBAAfA,EAAe,YAAfA,EAAe,oBAAfA,CAAe,EAAfA,IAAe,IAWpB,MAgzCA,IAAepoE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAMkd,KAEW,IAAAkC,EAAA,IAFT,OACP3e,EAAM,SAAEC,EAAQ,gBAAEsE,EAAe,SAAE85C,GACpC5hC,EACC,MAAMna,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B+pG,EAAU/pG,IAAW+hH,EAAAA,KAAkB/hF,EAAAA,EAAAA,IAAczgC,EAAQS,QAAUI,EACvE8/D,EAAgBn5D,QAAQgjG,GACxB/oC,GAAiBC,EAAAA,EAAAA,IAAqB1hE,EAAQS,GAC9CgiH,GAAiB7mF,EAAAA,EAAAA,IAASn7B,GAC1BiiH,GAAgC/hD,IAAkB8hD,KACnDE,EAAAA,EAAAA,IAA0C3iH,EAAQS,EAAQC,GACzD2mB,GAAemsB,EAAAA,EAAAA,IAAmBxzC,EAAQS,EAAQC,IAClD,SAAEwuB,EAAQ,sBAAE0zF,EAAqB,yBAAEC,GAA6B7iH,EAAOwV,SAASC,MAChFqtG,EAAoB9iH,EAAOovB,cAAc2zF,EAAAA,KACzC3zF,EAAgBF,IAAa6zF,EAAAA,IAA0B/iH,EAAOovB,cAAcF,QAAYruB,EACxFmiH,EAAuBN,EAA+BA,EAA6B9gH,QAAKf,EACxFoiH,EAAkBD,GAAuBtuG,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQuiH,QAAwBniH,GACnG,cAAEsX,GAAkBnY,EACpBkjH,EAAkBngH,GAAMglB,SAAWhlB,GAAMglB,UAAUF,UAAY1P,OAAgBtX,EAC/EgnB,EAAW9kB,GAAMilB,eAAiBk7F,IACtCngH,EAAKilB,cAAcgjB,MAAM/lB,GAASA,EAAKrjB,KAAOshH,IAC1CA,EACCngH,GAAMogH,aAAaC,UAAYrgH,GAAMnB,QAAKf,GAE3CwiH,EAAax7F,GAAWhE,EAAAA,EAAAA,IAAW7jB,EAAQ6nB,QAAYhnB,EACvDinB,GAAcu7F,GAAcx7F,GAAW7kB,EAAAA,EAAAA,IAAWhD,EAAQ6nB,QAAYhnB,EACtEyiH,GAAqBC,EAAAA,EAAAA,IAAyBvjH,EAAQS,GACtD+iH,GAAsBC,EAAAA,EAAAA,IAA0BzjH,EAAQS,GACxDyB,GAAqBvB,EAAAA,EAAAA,IAAyBX,GAC9C0jH,EAA0BjjH,IAAWyB,GAAoBzB,QAC1DC,IAAawB,GAAoBxB,UACjCsE,IAAoB9C,GAAoBJ,KACvC8hB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQS,GAC1BkjH,EAAgE,QAA3CvkG,EAAIwE,IAASA,EAAKmE,UAAU6B,uBAAe,IAAAxK,GAAAA,EAEhE4W,EAAmC,cAApBhxB,GACjB4+G,EAAAA,EAAAA,IAA4B5jH,EAAQS,IACpCw1B,EAAAA,EAAAA,GAAmBj2B,EAAQS,EAAQC,GAEjCgH,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAElDyB,GAAWb,EAAAA,EAAAA,IAAetB,GAEhC,MAAO,CACL6jH,gBAAgBxgG,EAAAA,EAAAA,IAAqBrjB,EAAQS,EAAQC,EAAUsE,GAC/D8yB,gBAAiB93B,EAAO83B,gBACxBpwB,eACAgc,OAAOU,EAAAA,EAAAA,IAAYpkB,EAAQS,EAAQC,GACnCqC,OACA49D,gBACAc,iBACAiiD,0BACAI,wBAAwBC,EAAAA,EAAAA,IAA6B/jH,EAAQS,GAC7D8xD,UAAWxvD,GAAOm+D,EAAAA,EAAAA,IAAcn+D,QAAQlC,EACxCygE,oBAAoBp4D,EAAAA,EAAAA,IAAyBlJ,EAAQ8+C,GACrDyiB,oBAAoBC,EAAAA,EAAAA,IAAqBxhE,GACzCgkH,oBACsB,WAApBh/G,GACGwC,QAAQ6f,GAAclnB,QAE3B8jH,eAAoC,cAApBj/G,EAChBg+G,uBACAkB,uBAAwBjB,GAAiBkB,oBACzCtuB,aAAcp1F,IAAW0B,EAASU,gBAAgBC,SAClD0J,UAAWrK,EAASqK,UACpB43G,iBAAkBpkH,EAAO8R,SAAS6Z,SAAS7Z,SAC3CuyG,oBAAqBrkH,EAAOwS,aAAamZ,SAAS7Z,SAClDwyG,iBAAkBvhH,GAAMglB,UAAUooB,QAClCo0E,gBAAiBvkH,EAAO2gC,eAAexO,QACvCha,gBACAyf,aAAc53B,EAAO43B,aACrBh1B,qBAAsBT,EAASS,qBAC/BggH,wBACAC,2BACApxG,aAAczR,EAAOyR,aACrBqxG,kBAAmBA,GAAmBxzF,SACtCF,cAAeA,GAAeE,SAC9B+J,WAAYl3B,EAASk3B,WAAWC,WAChCkrF,mBAAoBriH,EAASk3B,WAAWrf,UACxCyqG,gBAAiB1hH,GAAMglB,UAAYhlB,EAAKglB,SAAS28F,YACjDA,YAAala,GAASziF,SAAYyiF,EAAQziF,SAASyuB,SAASmuE,WAAY,OAAS9jH,EACjF+jH,cAAepa,GAASziF,UAAUyuB,SAASC,WAC3C4sE,aACAv7F,aACAD,WACAmO,eACAstF,qBACAE,sBACA1G,WAAY98G,EAAOw9B,WAAWC,KAC9BonF,oBAAoBC,EAAAA,EAAAA,GAAe9kH,EAAQS,GAC3Cw/B,OAAOugB,EAAAA,EAAAA,IAAYxgD,GACnB+kH,eAAez2F,EAAAA,GAAAA,GAAmBtuB,EAAQ,sBAAwBglH,EAAAA,IAClEC,cAAc32F,EAAAA,GAAAA,GAAmBtuB,EAAQ,iBACzCumB,sBAAsBC,EAAAA,EAAAA,IAA2BxmB,GACjD2jH,wBACA7tG,mBAAoB9V,EAAO8V,mBAC5B,GAhGegoC,EAryCwB19C,IAyDtC,IAzDuC,cAC3C8kH,EAAa,eACbjB,EAAc,uBACdH,EAAsB,QACtBzhD,EAAO,SACPvjB,EAAQ,WACRqmE,EAAU,eACVtB,EAAc,OACdpjH,EAAM,SACNC,EAAQ,gBACRsE,EAAe,MACf0e,EAAK,KACL3gB,EAAI,wBACJ2gH,EAAuB,qBACvBn9F,EAAoB,sBACpBo9F,EAAqB,gBACrB7rF,EAAe,cACf6oC,EAAa,eACbc,EAAc,UACdlP,EAAS,cACTwyD,EAAa,mBACbzjD,EAAkB,mBAClBC,EAAkB,aAClBs0B,EAAY,UACZrpF,EAAS,qBACTw2G,EAAoB,uBACpBkB,EAAsB,oBACtBF,EAAmB,iBACnBI,EAAgB,oBAChBC,EAAmB,iBACnBC,EAAgB,gBAChBC,EAAe,cACfpsG,EAAa,aACb8sG,EAAY,aACZrtF,EAAY,qBACZh1B,EAAoB,sBACpBggH,EAAqB,yBACrBC,EAAwB,kBACxBC,EAAiB,cACjB1zF,EAAa,aACb3d,EAAY,WACZ4nB,EAAU,mBACVmrF,EAAkB,YAClBE,EAAW,gBACXD,GAAe,WACfpB,GAAU,WACVv7F,GAAU,SACVD,GAAQ,aACRmO,GAAY,aACZtuB,GAAY,mBACZ47G,GAAkB,oBAClBE,GAAmB,cACnBoB,GAAa,WACb9H,GAAU,mBACV+H,GAAkB,mBAClB/uG,GAAkB,MAClBmqB,IACD7/B,EACC,MAAM,YACJ6e,GAAW,WACXmmG,GAAU,WACVv7F,GAAU,gBACVhnB,GAAe,cACf68B,GAAa,eACb2lF,GAAc,qBACdC,GAAoB,SACpBzhH,GAAQ,eACR0hH,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtBviF,GAAa,qBACbwiF,GAAoB,iBACpBt5G,GAAgB,oCAChB4d,KACElR,EAAAA,EAAAA,MAEE9T,IAAOk3C,EAAAA,GAAAA,KAGPypE,IAAcznE,EAAAA,EAAAA,IAAuB,MAErC0nE,IAAW1nE,EAAAA,EAAAA,IAAuB,OAEjCijE,GAAS0E,KAAWC,EAAAA,GAAAA,GAAU,IAC/BC,IAAoBC,EAAAA,GAAAA,GAAqB9hD,EAAAA,KACzC+hD,IAA6B/nE,EAAAA,EAAAA,MAC7BgoE,IAAoB3gD,EAAAA,GAAAA,GAAY0/C,IAC9B7vG,MAAO0zB,IAAgBC,GAAAA,EAAAA,MACzBhhB,GAAgBjlB,GAAMilB,cACtBo+F,GAAgBp+F,KAChBA,GAAc7nB,OAAS,IAAM6nB,GAAcgjB,MAAM/lB,GAASA,EAAKrjB,KAAOuW,MAErEkuG,GAAoBC,GAAqBC,KAA6BhoE,EAAAA,GAAAA,KACvEioE,IAAoBC,EAAAA,GAAAA,GAAqBhmH,EAAQC,IAEvDk5C,EAAAA,EAAAA,IAAU8sE,GAAAA,GAAmC,CAACtF,KAE9C,MAAMuF,IAAgCxoE,EAAAA,EAAAA,IAAO,GAEvCyoE,IAAuBrnE,EAAAA,EAAAA,KAAY,KACvCgnE,IAA2B,GAC1B,CAACA,MACGM,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYjD,EAAwB8C,KAExEhtE,EAAAA,EAAAA,KAAU,KACRssE,GAA2Bt3F,aAAU/tB,CAAS,GAC7C,CAACJ,KAEJm5C,EAAAA,EAAAA,KAAU,KACJn5C,GAAUm3B,GAAgByqC,GAC5BijD,GAAqB,CAAE7kH,UACzB,GACC,CAAC4hE,EAAS5hE,EAAQ6kH,GAAsB1tF,EAAcl3B,KAEzDk5C,EAAAA,EAAAA,KAAU,KACJn5C,GAAUsC,GAAQ60B,IAAiB5P,IAAiBq6C,IAAWlB,EAAAA,EAAAA,IAAiBp+D,IAClF0iH,GAAW,CAAEhlH,UACf,GACC,CAACsC,EAAMtC,EAAQ4hE,EAASzqC,EAAc6tF,GAAYz9F,KAErD,MAAMg/F,IAA+B7oE,EAAAA,EAAAA,KAAO,IAC5CqS,EAAAA,GAAAA,IAAc5iD,IAAqC,IAAnCq5G,EAAYC,GAAkBt5G,EAE5Co5G,GAA6Bp4F,QAAUpnB,QAAQ/G,IAAWwmH,GAAcj/F,KAAkBk/F,EAAkB,GAC3G,CAACzmH,EAAQunB,MAEZ0pC,EAAAA,EAAAA,KAAgB,KACTk0D,GAAYh3F,UAEjBg3F,GAAYh3F,QAAQ2lC,UApIP,8uBAoI2B,GACvC,IAEH,MAAOnyC,GAAa+1F,KAAkB/8D,EAAAA,EAAAA,IAA0B,IAC1D+rE,GAAiB3/G,QAAQ4a,GAAYjiB,SAErC,gBACJoT,GAAe,YAAE6zG,GAAW,eAAExK,GAAc,eAAEC,GAAc,oBAAEwK,GAAmB,cACjF5zG,GAAa,iBAAEP,GAAgB,cAAEI,GAAa,cAAEF,GAAa,cAAED,GAAa,iBAAEE,KAC5E6pC,EAAAA,EAAAA,KAAQ,KAAMxpC,EAAAA,EAAAA,IAA4B3Q,EAAM49D,IAAgB,CAAC59D,EAAM49D,IAErE2mD,IAAqBp0G,KAAqB2wG,GAE1C,yBACJhG,GAAwB,uBACxB0J,GAAsB,kBACtBC,GAAiB,kBACjBC,GAAiB,iBACjB7J,GAAgB,gBAChB8J,GAAe,uBACfC,GAAsB,qBACtBC,IpBzWW,SAA2BxnH,GAoBvC,IApBwC,YACzCgiB,EAAW,cACX2iG,EAAa,QACbe,EAAO,eACP3N,EAAc,OACd13G,EAAM,cACN6S,EAAa,cACbF,EAAa,cACbD,EAAa,iBACbE,GAWDjT,EACC,MAAM,sBAAE8yB,EAAqB,oCAAEjJ,IAAwClR,EAAAA,EAAAA,OAChEyuG,EAAmBK,IAAwBzsE,EAAAA,EAAAA,KAAkB,IAC7DmsE,EAAwBO,IAA6B1sE,EAAAA,EAAAA,KAAkB,IACvEyiE,EAA0BkK,IAA+B3sE,EAAAA,EAAAA,SAA8Bv6C,GAExF8mH,GAAyBpoE,EAAAA,EAAAA,KAAY,KACzC44D,EAAe12G,EAAAA,EAAiB,GAC/B,CAAC02G,IAEEyP,GAAuBroE,EAAAA,EAAAA,KAC1ByoE,IACC,MAAM3N,EAAqC,mBAAb2N,EAA0BA,EAAS5lG,GAAe4lG,EAChF,GAAK3N,EAAel6G,OAKpB,GAAIk6G,EAAervE,MAAMzrB,IACvB,MAAMzd,EAAOse,GAAkBb,GAE/B,MAAiB,UAATzd,IAAqBwR,IAAkBD,GAChC,UAATvR,IAAqBsR,IAAkBC,GAC9B,UAATvR,IAAqBqR,IAAkBE,GAC9B,SAATvR,IAAoBuR,CAAiB,IAE3C4W,EAAoC,CAAExpB,gBACjC,GAAI45G,EAAervE,MAAKp9B,IAAA,IAAC,KAAE+uC,GAAM/uC,EAAA,OAAK+uC,EAAOooE,CAAa,IAC/D7xF,EAAsB,CACpBnd,MAAO,2BAEJ,CACLoiG,EAAekC,GACf,MAAM12F,EAAc02F,EAAervE,MAAMzrB,IACvC,MAAMzd,EAAOse,GAAkBb,GAE/B,MAAiB,UAATzd,IAAqBwR,GACd,UAATxR,IAAqBsR,GACZ,UAATtR,IAAqBqR,CAAc,IAG3C00G,EAAqBrgH,QAAQmc,GAAetQ,IAC5Cy0G,GAA2Bz0G,EAC7B,MA7BEs0G,GA6BF,GACC,CACDvlG,EAAa9O,EAAeD,EAAkBF,EAAeC,EAAe3S,EAAQskH,EACpF4C,EAAwBz0F,EAAuBilF,EAAgBluF,IAkBnE,MAAO,CACL4zF,2BACA4J,mBAhBwBloE,EAAAA,EAAAA,KAAYzlC,MAAO/V,EAAekxD,KAC1D2yD,EAAqB,IAChBxlG,WACMgK,QAAQC,IAAItoB,EAAMwB,KAAKwvB,GAC9Bk8E,GAAgBl8E,EAAKqY,KAAMrY,EAAM,CAAE29E,oBAAqBz9C,QAAap0D,QAEvE,GACD,CAACuhB,EAAawlG,IAUfhK,kBARuBr+D,EAAAA,EAAAA,KAAYzlC,MAAO/V,EAAekkH,KACzDL,QAA2Bx7F,QAAQC,IAAItoB,EAAMwB,KAAKwvB,GAASk8E,GAAgBl8E,EAAKqY,KAAMrY,OACtFgzF,EAA4BE,EAAmB,GAC9C,CAACL,IAMFF,gBAAiB5B,EACjB6B,yBACAC,uBACAL,yBACAC,oBAEJ,CoB4QMU,CAAmB,CACrB9lG,eACA0jG,WACA3N,kBACA4M,gBACAtkH,SACA6S,iBACAF,iBACAD,iBACAE,uBAGK80G,GAAmBC,GAAiBC,KAAoB9pE,EAAAA,GAAAA,MACxD+pE,GAAsBC,GAAoBC,KAAuBjqE,EAAAA,GAAAA,MACjEkqE,GAAkBC,GAAgBC,KAAmBpqE,EAAAA,GAAAA,MACrDqqE,GAAkBC,GAAgBC,KAAmBvqE,EAAAA,GAAAA,MACrDwqE,GAAmBC,GAAiBC,KAAoB1qE,EAAAA,GAAAA,MACxD2qE,GAAiBC,GAAcC,KAAe7qE,EAAAA,GAAAA,MAE/C,oBACJ8qE,GAAmB,mBACnBC,GAAkB,oBAClBC,GAAmB,qBACnBC,GAAoB,kBACpBC,GACAC,gBAAiBC,GAAa,mBAC9BC,ICvYsBC,MAExB,MAAMH,GAAkBvrE,EAAAA,EAAAA,IAA0B,OAC3CqrE,EAAsBM,IAA2B1uE,EAAAA,EAAAA,MAClDwuE,GAAqBzrE,EAAAA,EAAAA,OACpBsrE,EAAmBM,IAAwB3uE,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJowE,EAAAA,IAAaC,EAAAA,IACVC,IACP,GACC,IAEH,MAAMb,GAAsB9pE,EAAAA,EAAAA,KAAYzlC,UACtC,IACE,MAAM,KAAE+hD,EAAI,MAAE9uC,SAAgBm9F,IAAsBC,IAC9CT,EAAgB96F,UACdg7F,EAAmBh7F,SAAWliB,KAAKC,MAAQ,GAAM,IACnD+8G,EAAgB96F,QAAQ2uB,MAAM6sE,UAAa,SAA4B,IAAnBD,GAAc,wBAEpEJ,EAAqBr9G,KAAKC,OAC5B,IAEFi9G,EAAmBh7F,QAAUliB,KAAKC,MAClCo9G,EAAqBr9G,KAAKC,OAE1Bm9G,EAAwB,CAAEjuD,OAAM9uC,SAClC,CAAE,MAAO1Y,GAEPgD,QAAQC,MAAMjD,EAChB,IACC,IAEGk1G,GAAsBhqE,EAAAA,EAAAA,KAAY,KACtC,GAAKiqE,EAAL,CAIIE,EAAgB96F,UAClB86F,EAAgB96F,QAAQ2uB,MAAM6sE,UAAY,QAE5C,IACE,OAAOZ,EAAsBz8F,OAC/B,CAAE,MAAO1Y,GAGP,YADAgD,QAAQC,MAAMjD,EAEhB,CAXA,CAWA,GACC,CAACm1G,IAEEF,GAAqB/pE,EAAAA,EAAAA,KAAY,KACrC,GAAKiqE,EAAL,CAIAM,OAAwBjpH,GACxB+oH,EAAmBh7F,aAAU/tB,EAC7BkpH,OAAqBlpH,GACjB6oH,EAAgB96F,UAClB86F,EAAgB96F,QAAQ2uB,MAAM6sE,UAAY,QAE5C,IACE,OAAOZ,EAAsB3tD,MAC/B,CAAE,MAAOxnD,GAGP,YADAgD,QAAQC,MAAMjD,EAEhB,CAdA,CAcA,GACC,CAACm1G,IAMJ,OAJA5vE,EAAAA,EAAAA,KAAU,IACD4vE,GAAuBjlE,EAAAA,GAAAA,GAAsB+kE,QAAsBzoH,GACzE,CAAC2oH,EAAsBF,IAEnB,CACLD,sBACAE,sBACAD,qBACAE,uBACAC,oBACAC,kBACAE,qBACD,EDqTGC,IAEJh/B,EAAAA,GAAAA,IAAY,KACV27B,GAAkB,CAAE1kH,KAAM,eAAgB,GACzC0nH,IAAwBa,EAAAA,MAE3BzwE,EAAAA,EAAAA,KAAU,KACH4vE,IACHhD,GAAkB,CAAE1kH,KAAM,UAC5B,GACC,CAAC0nH,GAAsBhD,KAE1B,MAAM8D,IAAeC,EAAAA,GAAAA,GAAY/iH,QAAQq8G,KACzCjqE,EAAAA,EAAAA,KAAU,KACJwnE,OAAckJ,GAAa17F,SAC7B43F,GAAkB,CAAE1kH,KAAM,UAC5B,GACC,CAACs/G,GAASkJ,GAAc9D,KAE3B,MAAMj2E,GAAUxtC,IAAQynH,EAAAA,EAAAA,IAAYznH,GAC9B0nH,IAAWC,EAAAA,EAAAA,IAAuB3nH,IAElC,mBACJ4nH,GAAkB,kBAClBC,GAAiB,eACjBC,GAAc,qBACdC,GAAoB,YACpBC,KACEC,EAAAA,GAAAA,GACFxjH,QAAQ66D,GAAWqhD,GAA2Bd,IAA0BuE,IACxE/F,GACA0E,QACAjlH,EACA4Q,EACAqxG,EACA1zF,IAGI,yBACJ67F,GAAwB,wBACxBC,GAAuB,kBACvBC,KACEC,EAAAA,GAAAA,GACF5jH,QAAQ66D,GAAWqhD,GAA2Bb,IAA6BsE,IAC3E/F,GACA0E,GACAE,GACAH,GACAxB,IAGI,qBACJgH,GAAoB,oBACpBC,I3BpbW,SACbjuF,EACA+jF,EACAtvG,GAEA,MAAM,qBAAEy5G,EAAoB,sBAAEC,IAA0BzyG,EAAAA,EAAAA,OAEjD0yG,EAAkBC,EAAoBC,IAAwBptE,EAAAA,GAAAA,IAAQ,GAEvEqtE,GAAiBhK,EAAAA,GAAAA,IAAiB,KACtC,MAAMxL,EAAOgL,IACb,IAAK/jF,IAAc+4E,GAASyV,EAAAA,IAAsBzV,EAAKj2G,OAdxC,EAc8D,OAG7E,IADiBi2G,EAAKztF,MAAMkjG,EAAAA,GAAqBC,GAAAA,EAAe9Y,EAAAA,KACjD,OAEf,MAAM+Y,GAAYC,EAAAA,GAAAA,GAAiB5V,GAMnC,OALsB2V,IACnBF,EAAAA,IAA0D,KAApCI,EAAAA,GAAAA,GAAqBF,KACvCF,EAAAA,IAAsBrkH,QAAQ4uG,EAAKztF,MAAMmqF,MAI3C+Y,EAAAA,GAAqBE,EAAYA,EAAUpjG,MAAM,gBAAgB,QAClE9nB,CAAS,GACZ,CAACugH,EAAS/jF,IAEPpsB,GAAW+xD,EAAAA,GAAAA,IAAgB,IAAMx7D,QAAQokH,MAAmB,CAACA,IAC7DM,EAAc1kH,QAAQsK,GAAU3R,QAiBtC,OAfAy5C,EAAAA,EAAAA,KAAU,KACR,IAAKvc,EAAW,OAEhB,MAAMs5D,EAAci1B,IAChBj1B,EACGu1B,GACHX,EAAqB,CAAEjlH,MAAOqwF,IAGhC60B,GACF,GACC,CAACnuF,EAAWuuF,EAAgBM,EAAaX,EAAsBC,KAElE5xE,EAAAA,EAAAA,IAAU+xE,EAAsB,CAACA,EAAsBvK,IAEhD,CACLiK,qBAAsB7jH,QAAQyJ,GAAYi7G,IAAgBT,GAC1DH,oBAAqBI,EAEzB,C2BoYMS,CACF3kH,QAAQ66D,GAAWqhD,GAA2Bd,GAAyBrvG,KAAoB4zG,IAC3F/F,GACAgD,IAGI,qBACJgI,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFhlH,QAAQ66D,GAAWqhD,IAA4ByD,IAC/C/F,GACA0E,GACAE,GACAH,GACAvB,EACAC,EACApsG,IAIA7V,OAAQmqH,GACR93G,MAAO+3G,GACPnrF,UAAWorF,GACX7rF,SAAU8rF,GACVp9G,QAASq9G,GACTC,aAAcC,GACdzrF,KAAM0rF,GACNC,SAAUC,ItB7cC,SACb7vF,EACA58B,EACA2gH,EACA/nF,GAEA,MAAM,eAAE8zF,EAAc,eAAEprF,EAAc,mBAAEqrF,IAAuBr0G,EAAAA,EAAAA,OAExD0yG,EAAkBC,EAAoBC,IAAwBptE,EAAAA,GAAAA,IAAQ,GAEvE8uE,GAA2BC,EAAAA,GAAAA,IAAqB,KACpD,MAAMlX,EAAOgL,IACb,OAAO/jF,GAAa+4E,EAAK/sD,WAAW,KAkExC,SAAuB+sD,GACrB,IAAKA,EAAK/sD,WAAW,KACnB,OAAOsxD,GAGT,MAAM72G,EASR,SAAsBsyG,GASpB,OARA0E,GAAOvmD,UAAY6hD,EAAK9lG,QAAQ,QAAS,MAEzCwqG,GAAO3qG,iBAA8B,SAASzE,SAAS+sB,IAChDA,EAAGqhF,YACNrhF,EAAGqhF,UAAYrhF,EAAGuhB,aAAa,OACjC,IAGK8gE,GAAOhB,SAChB,CAnBeyT,CAAanX,GACpBrwG,EAASjC,EAAK6kB,MAAM8xF,IAC1B,OAAK10G,EAIEg1G,GAAoBh1G,EAAO,GAAIA,EAAO,GAAkB,KAAdA,EAAO,KAAcjC,EAAK6kB,MAAM+xF,KAHxEC,EAIX,CA9E+C6S,CAAcpX,GAAQuE,EAAc,GAC9E,CAACyG,EAAS/jF,GAAYm9E,KACnB,SACJzuF,EAAQ,MAAE7qB,EAAK,YAAE05G,EAAW,gBAAEC,IAC5B73C,EAAAA,GAAAA,GAAgBqqD,EAA0B,CAACA,EAA0BjM,IAAU,IAEnF5wD,EAAAA,GAAAA,IAAcpwD,IAAoB,IAAlBqtH,GAAartH,EACvBqtH,GACF1rF,EAAe,CAAEhW,SAAU0hG,GAC7B,GACC,CAAC1hG,EAAUgW,KAEd6X,EAAAA,EAAAA,KAAU,KACHihE,GAELsS,EAAe,CACb1sH,SAAQsrB,SAAU8uF,EAAiB35G,SACnC,GACD,CAACT,EAAQS,EAAOisH,EAAgBtS,KAEnCjhE,EAAAA,EAAAA,IAAU+xE,EAAsB,CAACA,EAAsBvK,IAEvD,MACEx/G,GAAI+S,EAAK,SACTmsB,EAAQ,OACRvxB,EAAM,QACNC,EAAO,UACP+xB,EAAS,KACTD,GACGu5E,GAAmBxhF,IAAawhF,IAAqB,CAAC,EAErDv4G,EAASkF,SAASgI,GAASrP,QAAU2gC,KAAc2qF,IAEzD7xE,EAAAA,EAAAA,KAAU,KACHt3C,GAAWypB,GACdqhG,GACF,GACC,CAAC9qH,EAAQ8qH,EAAoBrhG,IAEhC,MAAMkhG,GAAW1tE,EAAAA,EAAAA,KAAY,KACtBs7D,GAELsS,EAAe,CACb1sH,SAAQsrB,SAAU8uF,EAAiB35G,QAAOqO,UAC1C,GACD,CAAC9O,EAAQ8O,EAAQrO,EAAOisH,EAAgBtS,IAE3C,MAAO,CACLv4G,SACAqS,QACA4sB,YACAT,WACAtxB,UACAs9G,aAAcpB,EACdpqF,KAAMs5E,GAAet5E,EAAQ,IAAGvV,KAAYuV,SAASzgC,EACrDosH,WAEJ,CsByYMS,CACFlmH,QAAQ66D,GAAWqhD,IAA4ByD,IAAkBvvF,GACjEn3B,EACA2gH,GACA/nF,IAIA/2B,OAAQqrH,GACR3wF,MAAO4wF,GACPC,oBAAqBC,IrBneV,SACbzwF,EACA+jF,EACAsD,EACAD,GAEA,MAAOoJ,EAAqBE,IAA0B3yE,EAAAA,EAAAA,OAC/CqwE,EAAkBC,EAAoBC,IAAwBptE,EAAAA,GAAAA,IAAQ,GAEvEyvE,GAAyBV,EAAAA,GAAAA,IAAqB,KAClD,MAAMlX,EAAOgL,IACb,OAAO/jF,GAAa+4E,EAAK/sD,WAAW,MAAO2iE,EAAAA,GAAAA,GAAiB5V,GAAMztF,MAAMsyF,MAAc,GAAGjkG,YAASnW,CAAS,GAC1G,CAACugH,EAAS/jF,GAdE,KAgBT4wF,GAAarM,EAAAA,GAAAA,GACjBoM,EAAwB,CAACA,EAAwB5M,IAAU,GAqB7D,OAlBAxnE,EAAAA,EAAAA,KAAU,KACR,MAAM1b,EAAU+vF,IACVtJ,EAAWD,GAAeD,EAChC,IAAKvmF,IAAYymF,EAEf,YADAoJ,OAAuBltH,GAIzB,MAAM2E,EAAS04B,EAAQ66E,UAAU,GAC3BmV,EAA0BvJ,EAASn/G,QAAQ27F,IAAO37F,GAAU27F,EAAEjjE,QAAQmrB,WAAW7jD,KAEvFuoH,EACEG,GAAyB/tH,OAAS+tH,OAA0BrtH,EAC7D,GACA,CAACotH,EAAYvJ,EAAaD,KAE7B7qE,EAAAA,EAAAA,IAAU+xE,EAAsB,CAACA,EAAsBvK,IAEhD,CACL9+G,OAAQkF,QAAQqmH,GAAqB1tH,SAAWsrH,GAChDzuF,MAAO0uF,EACPmC,sBAEJ,CqB2bMM,CACF3mH,QAAQ66D,GAAWqhD,IAA6BgB,GAAeA,GAAavkH,QAAWskH,IAAiBtkH,SACxGihH,GACAsD,EACAD,IAGI2J,IAA4B7uE,EAAAA,EAAAA,KAAY,SAAC8uE,GAAyD,IAAxCvoE,EAAe5lD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGy4G,EAAAA,IAChF,GAAI7yD,IAAY6yD,EAAAA,KAAqB2O,GAAmB,OACxD,MAAMgH,EAAY/qH,OAAOgrH,eACzB,IAAIrqD,EAOJ,GALEA,EADEpe,IAAY6yD,EAAAA,IACCzoG,SAAS4pC,cAA8BqqB,EAAAA,KAEvCj0D,SAAS8/C,eAAelK,GAGrCwoE,EAAUE,WAAY,CACxB,MAAMC,EAAiBH,EAAUI,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgB3oE,GAGzC,OAFA8oE,EAAAA,GAAAA,IAAsBP,QACtBnqD,EAAa2qD,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAG7D,CAEAjJ,GAAS,GAAE1E,OAAYiN,KAGvBjZ,uBAAsB,MACpB4Z,EAAAA,GAAAA,GAAqB9qD,EAAa,GAEtC,GAAG,CAACojD,GAAmBlG,GAAS0E,KAE1BmJ,IAAqC1vE,EAAAA,EAAAA,KAAY,SACrDz7C,GACG,IADqBgiD,EAAe5lD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGy4G,EAAAA,IAE1C,MAAM0V,GAAUa,EAAAA,GAAAA,GAA0BprH,GAC1CsqH,GAA0BC,EAASvoE,EACrC,GAAG,CAACsoE,KAEEe,IAAmC5vE,EAAAA,EAAAA,KAAY,SAACj5C,GAA2D,IAAxCw/C,EAAe5lD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGy4G,EAAAA,IACzFyV,IAA0BgB,EAAAA,GAAAA,IAAqB9oH,GAAQw/C,EACzD,GAAG,CAACsoE,KnBjgBWiB,EACf3rG,EACAjjB,EACAC,EACA0gH,EACA0E,EACA1N,EACAxgF,KAEA,MAAM,UAAE03F,EAAS,WAAElK,EAAU,iBAAE34F,IAAqB1T,EAAAA,EAAAA,MAE9Cw2G,EAAY/nH,QAAQ4wG,GAEpBoX,GAAcjwE,EAAAA,EAAAA,KAAY,WAAiF,IAAhFkwE,EAAiDvvH,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGyjB,EAAWzjB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAClG,GAAIqvH,IAAc33F,EAAc,OAEhC,MAAMw+E,EAAOgL,IAEH,IAAAsO,EAAAC,EAOHC,EAAAC,EAPHzZ,EACFkZ,EAAU,CACR7uH,OAAwB,QAAlBivH,EAAED,EAAUhvH,cAAM,IAAAivH,EAAAA,EAAIjvH,EAC5BC,SAA4B,QAApBivH,EAAEF,EAAU/uH,gBAAQ,IAAAivH,EAAAA,EAAIjvH,EAChCgjB,OAAOrW,EAAAA,EAAAA,IAAkB+oG,GACzBzyF,gBAGFyhG,EAAW,CACT3kH,OAAwB,QAAlBmvH,EAAEH,EAAUhvH,cAAM,IAAAmvH,EAAAA,EAAInvH,EAC5BC,SAA4B,QAApBmvH,EAAEJ,EAAU/uH,gBAAQ,IAAAmvH,EAAAA,EAAInvH,EAChCijB,eAGN,GAAG,CAACljB,EAAQC,EAAU6uH,EAAW33F,EAAcwpF,EAASkO,EAAWlK,IAE7D0K,GAAmBvwE,EAAAA,EAAAA,KAAY,KACnCiwE,OAAY3uH,GAAW,EAAK,GAC3B,CAAC2uH,IAEEO,GAAiBxF,EAAAA,GAAAA,GAAYiF,GAC7BQ,GAA2B3iB,EAAAA,GAAAA,GAAgB4iB,EAAAA,KAAgB,OAAMpvH,EAAW,CAACJ,EAAQC,KAG3F0+C,EAAAA,GAAAA,IAAsBh/C,IAA2C,IAAzC6mH,EAAYiJ,EAAcC,GAAU/vH,EAC1D,GAAIK,IAAWwmH,GAAcvmH,IAAawvH,KACnCxsG,GAASysG,GACZrK,EAAQ,KAGLpiG,GAAOC,aACV,OAIJ,GAAIy0F,IAAkB10F,EACpB,OAGFoiG,GAAQoJ,EAAAA,GAAAA,GAA0BxrG,IAElC,MAAM0sG,EAAiB1sG,EAAMlB,UACzBjd,KAAKm8G,GAAWA,EAAO5/G,OAASi4G,EAAAA,GAAAA,aAAqC2H,EAAOxvG,aAC7E1M,OAAOgC,UAAY,GAClB4oH,EAAejwH,QAAQssB,EAAiB,CAAExiB,IAAKmmH,IAE9C9jH,EAAAA,IACH8oG,uBAAsB,KACpB,MAAMlxC,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KACxDD,IACF8qD,EAAAA,GAAAA,GAAqB9qD,GAAc,EACrC,GAEJ,GACC,CAACzjE,EAAQC,EAAUgjB,EAAOoiG,EAAS1N,EAAe3rF,KAGrDmtB,EAAAA,EAAAA,KAAU,IACD,KAEA21E,GAEHQ,EAAenhG,QAAQ,CAAEnuB,SAAQC,aAtFvCw6G,IAAW,EACX9F,uBAAsB,KACpB8F,IAAW,CAAK,GAuFN,GAET,CAACz6G,EAAQC,EAAU6uH,EAAWQ,IAEjC,MAAMM,GAAY9F,EAAAA,GAAAA,GAAY9pH,GACxB6vH,GAAc/F,EAAAA,GAAAA,GAAY7pH,IAChCk5C,EAAAA,EAAAA,KAAU,KACR,GAAIshE,GACF,OAGF,IAAKkG,IAGH,YAFA2O,EAAenhG,UAKjB,MAAM2hG,EAAeF,EAAUzhG,QACzB4hG,EAAiBF,EAAY1hG,QAEnCohG,GAAyB,KACnBK,EAAUzhG,UAAY2hG,GAAgBD,EAAY1hG,UAAY4hG,GAChET,EAAenhG,SACjB,GACA,GACD,CAACyhG,EAAWjP,EAAS4O,EAA0BM,EAAaP,KAE/DxpB,EAAAA,GAAAA,GAAkBupB,GAClBp2E,GAAgBo2E,EAAiB,EmBoZjCT,CAAS3rG,EAAOjjB,EAAQC,EAAU0gH,GAAS0E,GAASjC,EAAgBjsF,GAEpE,MAAM64F,IAAgBlxE,EAAAA,EAAAA,KAAY,WAAoBr/C,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,IAElD4lH,GAAQ,IAGV3N,GAAe12G,EAAAA,GAEfmpH,KACAM,KACAI,KACAe,KAEIvtE,EAEFx1C,YAAW,IAAMq/G,MApVY,KAsV7BA,IAEJ,GAAG,CACD7C,GAAShnE,EAAUwsE,GAAqBJ,GAAyBmB,GAAqBzB,GACtFjC,MAGK+H,GAAoBC,GAAkBzR,IvBjiB5B0R,EACjBxP,EACA0E,EACA1N,EACAqY,EACAzH,EACAvoH,EACAC,EACAoB,EACA4hB,EACAsS,EACAtuB,KAEA,MAAM,YAAEmpH,EAAW,gBAAEC,EAAe,qBAAExP,IAAyBvoG,EAAAA,EAAAA,OACxDmmG,EAAwB6R,IAA6B31E,EAAAA,EAAAA,KAAS,IAErEgE,EAAAA,GAAAA,IAAsBh/C,IAA2C,IAAzC4wH,EAAmBC,GAAiB7wH,EAC1D,IAAKg4G,EACH,OAGF,GAAI1wG,GAAgBupH,IAAqBvpH,EAGvC,OAFAo+G,EAAQ,SACRiL,GAA0B,GAI5B,GAAIC,GAAmBpvH,KAAOw2G,EAAcx2G,IAAM8F,IAAiBupH,EACjE,OAGF,MAAMntH,GAAQktH,GAAqBh7F,GAAclyB,KAAK3D,OAAS61B,EAAeoiF,EAAchrG,QAAQtJ,KAC9FsyG,GAAO8Y,EAAAA,GAAAA,GAA0BprH,GAEvCgiH,EAAQ1P,GACR2a,GAA0B,GAE1B3b,uBAAsB,KACpB,MAAMlxC,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KACxDD,IACF8qD,EAAAA,GAAAA,GAAqB9qD,GAAc,EACrC,GACA,GACD,CAACk0C,EAAe1wG,EAAcsuB,EAAc8vF,KAE/ClsE,EAAAA,EAAAA,KAAU,KACR,IAAKw+D,EACH,OAGF,MAAM8Y,IAAuB,YAAa9Y,EAAchrG,UACjDgrG,EAAchrG,QAAQtJ,MAAM0e,UAAUwoB,MAAM02E,GAAWnH,GAAa76F,IAAIgiG,EAAO5/G,QAEtFw/G,EAAqB,CACnB7gH,SACAC,WACAohB,UAAWovG,GACX,GACD,CAACzwH,EAAQC,EAAU03G,KAEtBx+D,EAAAA,EAAAA,KAAU,KACR,GAAKw+D,EACL,MAAO,KACL,MAAM+Y,GAAS9jH,EAAAA,EAAAA,IAAkB+zG,KAC3B52F,EAAS2mG,EAAOrtH,KAAK3D,OAASgxH,OAAStwH,EAE7CiwH,EAAgB,CACdrwH,SAAQC,WAAUoB,OAAMgC,KAAM0mB,GAC9B,CACH,GACA,CAAC/pB,EAAQ23G,EAAegJ,EAAS0P,EAAiBpwH,EAAUoB,IAE/D,MAAMy/G,GAAsBC,EAAAA,GAAAA,IAAqB,KAC/C,IAAKpJ,EAAe,OAAO,EAE3B,MAAM+Y,GAAS9jH,EAAAA,EAAAA,IAAkB+zG,KACjC,QAAS,YAAahJ,EAAchrG,UAC/BgrG,EAAchrG,QAAQtJ,MAAM0e,UAAUwoB,MAAM02E,GAAWnH,GAAa76F,IAAIgiG,EAAO5/G,UAC7EqvH,EAAO3uG,UAAUwoB,MAAM02E,GAAWnH,GAAa76F,IAAIgiG,EAAO5/G,OAAO,GACvE,CAACs2G,EAAegJ,GAjFD,KAiFwB,GAEpCgQ,GAAmCxP,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBH,IAAU,IAE/GhiE,EAAAA,GAAAA,IAAsBxxC,IAAyB,IAAvBojH,GAAkBpjH,EACnCwqG,GAAiB4Y,GAAmBpvH,KAAOw2G,EAAcx2G,IAI1DwvH,KACF9P,EAAqB,CACnB7gH,SACAC,WACAohB,WAAW,GAEf,GACC,CAACs2F,EAAe33G,EAAQ2gH,EAAS1gH,EAAU0wH,IAE9C,MAAMC,GAA8B9xE,EAAAA,EAAAA,KAAY,KACzC77B,IAELiuE,EAAAA,EAAAA,KAAQ,KACNm0B,GAAQoJ,EAAAA,GAAAA,GAA0BxrG,IAClC,MAAMwgD,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KACxDD,GACFkxC,uBAAsB,MACpB4Z,EAAAA,GAAAA,GAAqB9qD,GAAc,EAAK,GAE5C,GACA,GACD,CAACxgD,EAAOoiG,IAEL6K,GAAmBpxE,EAAAA,EAAAA,KAAY,KACnCkxE,IACAY,GAA6B,GAC5B,CAACZ,EAAeY,IAEbX,GAAqBnxE,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAEz7C,EAAI,SAAE0e,IAAanV,EAAAA,EAAAA,IAAkB+zG,KAExChJ,IAIAt0G,IAASwtH,EAAAA,EAAAA,IAAgBlZ,IAK9ByY,EAAY,CACV/sH,OACA0e,aAGFiuG,IACAY,KAVErI,IAU2B,GAC5B,CAAC6H,EAAazY,EAAegJ,EAAS4H,EAAiByH,EAAeY,IAEnEE,GAAahyE,EAAAA,EAAAA,KAAY,KAC7B,IAAK64D,EAAe,OACpB,MAAM+Y,GAAS9jH,EAAAA,EAAAA,IAAkB+zG,KAC3B52F,EAAS2mG,EAAOrtH,KAAK3D,OAASgxH,OAAStwH,EAE7CiwH,EAAgB,CACdrwH,SAAQC,WAAUoB,OAAMgC,KAAM0mB,GAC9B,GACD,CAAC/pB,EAAQ23G,EAAegJ,EAAS0P,EAAiBpwH,EAAUoB,IAK/D,OAHAykG,EAAAA,GAAAA,GAAkBgrB,GAClB73E,GAAgB63E,GAET,CAACb,EAAoBC,EAAkBzR,EAAuB,EuB2YE0R,CACrExP,GACA0E,GACAjC,EACA4M,GACAzH,GACAvoH,EACAC,EACAsE,EACA0e,EACAsS,GACAtuB,IAII8pH,IAAmBjH,EAAAA,GAAAA,GAAYkG,IAC/BgB,IAAwBlH,EAAAA,GAAAA,GAAYjB,KAC1C1vE,EAAAA,EAAAA,KAAU,IACD,KAEL63E,GAAsB7iG,UAEtB4iG,GAAiB5iG,SAAS,GAE3B,CAACnuB,EAAQC,EAAU8wH,GAAkBC,KAExC,MAAMC,IAAqCnyE,EAAAA,EAAAA,KAAY,KACrD,MAAMoyE,EAAqBhL,GAA8B/3F,QAWvDviB,GAVGslH,EAUc,CACflsH,QAASR,GAAK,2BACdgQ,OAAQ,CACNA,OAAQ,WACRhU,QAAS,CAAEW,GAAIuW,EAAepW,sBAAsB,IAEtD2zE,WAAYzwE,GAAK,SAfF,CACfQ,QAASR,GAAK,0BACdgQ,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEumC,eAAgB,mBAE7BkuC,WAAYzwE,GAAK,iBAYrB0hH,GAA8B/3F,QAAU1mB,QAAQypH,EAAmB,GAClE,CAACx5G,EAAelT,GAAMoH,KAEnBulH,IAAkB5uD,EAAAA,GAAAA,IAAgB,IAClC6gD,GAAkB3E,GACbqD,GAAgBsP,MAGrB5H,EAAAA,IAAiCT,IAAyB3zB,GAAkBurB,OAAc+F,GAI1FlD,EACK1B,GAAgBuP,SAGlBvP,GAAgBwP,KAPdxP,GAAgByP,QAQxB,CACDxI,GAAsB3F,EAAgBzC,GAAS+F,GAAgBtxB,EAAcqpB,GAAwB+E,IAEjGgO,IAAyBhO,GAG7BznD,kBAAmB01D,GAAoB,kBACvCx1D,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuB8sD,KAAiBiI,KAAoBrP,GAAgBwP,MAAQE,KAExFha,GACEyL,EACAuL,GACArH,GACA/D,GACCt9F,IAAyBk7C,EAC1BiwD,IAGF,MAAMS,IAAsB5yE,EAAAA,EAAAA,KAAY,KAClCskE,GACF8M,IACF,GACC,CAAC9M,EAAgB8M,KAEdyB,IAAqB7yE,EAAAA,EAAAA,KAAY,CAACz7C,EAAcuuH,KACpD,MAAMC,EAAYD,EAAoBpN,EA1bf,KA2bvB,GAAInhH,GAAM3D,OAASmyH,EAAW,CAC5B,MAAMC,EAAczuH,EAAK3D,OAASmyH,EAYlC,OAXAzoG,GAAW,CACT9V,KAAM,CACJtO,QAAS,4CACT+sH,WAAY,CACV,sBAAuBD,EAAYtqH,WACnC,aAAcsqH,EAAc,EAAI,IAAM,IAExCv+G,aAAa,MAIV,CACT,CACA,OAAO,CAAI,GACV,CAACixG,EAAcp7F,KAEZ4oG,IAAgBlzE,EAAAA,EAAAA,KAAY,KAChC,GAAIkrE,KAAal6E,GAAS,CACxB,MAAM2zB,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KAEtDuuD,GAAavlH,EAAAA,EAAAA,MACbwlH,EAA0BzM,GAA2Bt3F,SACtDlhB,KAAKI,MAAM4kH,EAAaxM,GAA2Bt3F,SAClDgkG,EAAyBnI,GAASoI,cAAgBpI,GAASoI,aAAeH,EAEhF,GACGC,GAA2BA,EAA0BlI,GAASqI,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBnI,GAASoI,aAAgBH,EACzBjI,GAASqI,QAAUH,EAWvB,OAVA9oG,GAAW,CACT9V,KAAM,CACJtO,QAASR,GAAK,gBAAgBo/E,EAAAA,GAAAA,IAAoB0uC,IAClDC,YAAY,EACZh/G,aAAa,KAIjBkwD,GAAcvnC,QAEP,CACT,CACF,CACA,OAAO,CAAI,GACV,CAAC4T,GAAStrC,GAAM4kB,GAAY4gG,KAEzBwI,IAAkB1zE,EAAAA,EAAAA,KAAYhjC,IAY9B,IAXJ6F,YAAa8wG,EAAiB,eAC9BC,EAAiBr9G,GAAmBF,eAAc,YAClDw9G,EAAct9G,GAAmBD,kBAAiB,SAClD2O,EAAQ,YACR7C,GAODpF,EACC,GAAwB,yBAApBub,EACF,OAGF,MAAM,KAAEh0B,EAAI,SAAE0e,IAAanV,EAAAA,EAAAA,IAAkB+zG,OACxCt9G,GAASovH,EAAkB/yH,SAG3BiyH,GAAmBtuH,GAAM,IACzB2uH,OAELxzG,GAAY,CACVnb,OACA0e,WACAb,cACA6C,WACA6uG,8BAA8B,EAC9BjxG,YAAamwF,GAAyB2gB,EAAmBC,GACzD7wG,oBAAqB8wG,IAGvBlN,GAA2Bt3F,SAAUzhB,EAAAA,EAAAA,MAErCi4G,GAAW,CAAE3kH,SAAQ0jB,WAAW,IAGhCixF,uBAAsB,KACpBqb,IAAe,IACf,GACD,CACD36G,GAAmBF,eAAgBE,GAAmBD,kBAAmBiiB,EAAiBspF,GAC1FgR,GAAoBK,GAAexzG,GAAammG,GAAY3kH,EAAQgwH,KAGhE6C,IAAwB/zE,EAAAA,EAAAA,KAAY,CACxC4zE,EACAC,EACA5uG,EACA7C,KAEAsxG,GAAgB,CACd7wG,eACA+wG,iBACAC,cACA5uG,WACA7C,eACA,GACD,CAACS,GAAa6wG,KAEXM,IAAah0E,EAAAA,EAAAA,KAAYzlC,iBAAkD,IAA3C0K,EAAQtkB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAUyhB,EAAoBzhB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAC1E,GAAwB,yBAApBi3B,EACF,OAGF,IAAI07F,EAAqBpxG,GAEzB,GAAIonG,GAAsB,CACxB,MAAMiK,QAAenK,KACrB,GAAImK,EAAQ,CACV,MAAM,KAAE77D,EAAI,SAAEyC,EAAQ,SAAE45C,GAAawf,EACrCD,EAAqB,OAAOviB,GA5jBH,8BA8jBvBr5C,EACA,CAAEj3C,MAAO,CAAE05C,WAAU45C,cAEzB,CACF,CAEA,MAAM,KAAEnwG,EAAI,SAAE0e,IAAanV,EAAAA,EAAAA,IAAkB+zG,MAE7C,GAAIoS,EAAmBrzH,OAIrB,YAHA8yH,GAAgB,CACd7wG,YAAaoxG,IAKjB,IAAK1vH,IAAS+xF,EACZ,OAGF,IAAKu8B,GAAmBtuH,GAAO,OAE/B,MAAMogE,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KAE5D,GAAIrgE,EAAM,CACR,IAAK2uH,KAAiB,OAEtBxzG,GAAY,CACVnb,OACA0e,WACAb,cACA6C,WACA6uG,8BAA8B,GAElC,CAEIx9B,GACFhzF,GAAgB,CACd8e,cACA6C,aAIJ0hG,GAA2Bt3F,SAAUzhB,EAAAA,EAAAA,MAErCi4G,GAAW,CAAE3kH,SAAQ0jB,WAAW,IAE5BpE,EAAAA,IAAUmkD,GAAgBA,IAAiBh0D,SAASwoG,eACtD9F,GAA8B1uC,GAIhCkxC,uBAAsB,KACpBqb,IAAe,GAEnB,GAAG,CACD34F,EAAiB1V,GAAaonG,GAAsBpI,GAASvrB,EAAcu8B,GAAoBhN,GAC/F3kH,EAAQ6oH,GAAoB2J,GAAiBR,GAAexzG,GAAapc,GAAiB4tH,KAGtFiD,IAAqBn0E,EAAAA,EAAAA,KAAY,KACT,WAAxBqlE,IAAe9iH,MAInBqhC,GAAc,CACZ1iC,SAAQ6T,IAAKswG,GAActwG,IAAK5T,YAChC,GACD,CAACkkH,GAAezhF,GAAe1iC,EAAQC,IAEpCizH,IAA+Bp0E,EAAAA,EAAAA,KAAY,KAC/CopE,KACAJ,IAAoB,GACnB,CAACI,GAAiBJ,KAEfqL,IAAwBr0E,EAAAA,EAAAA,KAAY,CACxCs9C,EAA4Bl7E,KAE5B,GAAIk7E,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAEj7F,EAAE,QAAEggC,EAAO,SAAEpd,GAAaq4E,EAOlC,YANA2oB,GAAoB,CAClB5jH,KACAggC,UACAjgB,cACA6C,YAGJ,CAEA,MAAM,SAAEA,KAAaqvG,GAAah3B,GAAQ,CAAC,EAE3C,GAAKA,GAAyC,IAAjC/0F,OAAOC,KAAK8rH,GAAU1zH,OAE5B,QAA4BU,IAAxBg8F,EAAKs2B,qBAAqDtyH,IAArBg8F,EAAKu2B,YAA2B,CAC9E,MAAM,eAAED,GAAiB,EAAK,YAAEC,GAAc,GAAUv2B,EACnDy2B,GAAsBH,EAAgBC,EAAa5uG,EAAU7C,EACpE,MACE1C,GAAY,IACP49E,EACHl7E,qBAPG4xG,GAAW/rH,QAAQgd,GAAW7C,EASrC,GACC,CAAC2xG,GAAuBC,GAAY/N,GAAqBvmG,MAE5DmgC,EAAAA,GAAAA,IAAsBpiC,IAAgC,IAA9B82G,GAAyB92G,EAC3Cpa,GAAwBA,IAAyBkxH,GACnDjN,IAAiBllG,IACfiyG,GAAsBhxH,EAAsB+e,EAAY,GAE5D,GACC,CAAC/e,EAAsBgxH,GAAuB/M,MAEjDjtE,EAAAA,EAAAA,KAAU,KACJ0pE,KACFwC,GAAQxC,IACRoC,KACAtQ,uBAAsB,KACpB,MAAMlxC,EAAeh0D,SAAS8/C,eAAe2oD,EAAAA,MAC7CqW,EAAAA,GAAAA,GAAqB9qD,GAAc,EAAK,IAE5C,GACC,CAACo/C,GAAoBoC,GAAwBI,MAEhDlsE,EAAAA,EAAAA,KAAU,KACJ4pE,IAAqBrjH,SACvBy9G,GAAiB4F,IACjBkC,KACF,GACC,CAAC9H,GAAkB4F,GAAqBkC,KAE3C,MAAMqO,IAA0Bx0E,EAAAA,EAAAA,KAAY,CAACj5C,EAAmBw/C,KACzDx/C,EAAM0tH,QAAWztG,GAAyBk7C,EAK/C0tD,GAAiC7oH,EAAOw/C,GAJtC4rE,IAI8C,GAC/C,CAACvC,GAAkC1tD,EAAgBl7C,EAAsBmrG,KAEtEuC,IAAyC10E,EAAAA,EAAAA,KAAaj5C,IAC1DytH,GAAwBztH,EAAOsyG,EAAAA,IAAwB,GACtD,CAACmb,KAEEG,IAAkB30E,EAAAA,EAAAA,KAAY,CAACnxB,EAAe5J,EAAoB2vG,KAClElQ,GAAkBkQ,GACpB7N,KACAO,IAAiBllG,IACf4kG,KACAqN,GAAsB,CAAExlG,MAAK5J,YAAY7C,GACzCyzF,uBAAsB,KACpBqb,IAAc,EAAK,GACnB,MAGJxxG,GAAY,CAAEmP,MAAK5J,aACnB4wF,uBAAsB,KACpBqb,IAAc,EAAK,IAEvB,GACC,CACDxM,EAAgBqC,GAAqBO,GAAiBN,GAA2BqN,GACjFnD,GAAexxG,KAGXyqF,IAAsBnqD,EAAAA,EAAAA,KAAY,SACtC3tC,EACA4S,EACA2vG,GAGG,IAFHC,EAAmBl0H,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACnBmzH,EAAsCnzH,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAEtC+Q,EAAU,IACLA,EACH+/B,qBAAqB,GAGnBsyE,GAAkBkQ,GACpB7N,KACAO,IAAiBllG,IACf4kG,KACAqN,GAAsB,CAAEhiH,UAAS4S,YAAY7C,GAC7CyzF,uBAAsB,KACpBqb,GAAc2D,EAAoB,GAClC,MAGJn1G,GAAY,CAAErN,UAAS4S,WAAU6uG,iCACjCje,uBAAsB,KACpBqb,GAAc2D,EAAoB,IAGxC,GAAG,CACDnQ,EAAgBqC,GAAqBO,GAAiBN,GAA2BqN,GACjFnD,GAAexxG,KAGXo1G,IAAwB90E,EAAAA,EAAAA,KAAY,CACxC+0E,EAA4D9vG,EAAoB2vG,KAEhF,GAAwB,yBAApBr8F,EACF,OAGEmsF,GAAkBkQ,EACpBtN,IAAiBllG,IACfiyG,GAAsB,CACpBhyH,GAAI0yH,EAAa1yH,GACjBggC,QAAS0yF,EAAa1yF,QACtBpd,YACC7C,EAAY,IAGjB6jG,GAAoB,CAClB5jH,GAAI0yH,EAAa1yH,GACjBggC,QAAS0yF,EAAa1yF,QACtBpd,aAIJ,MAAM0/C,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KACxDpkD,EAAAA,IAAUmkD,GAAgBA,IAAiBh0D,SAASwoG,eACtD9F,GAA8B1uC,GAGhCkhD,GAAW,CAAE3kH,SAAQ0jB,WAAW,IAChCixF,uBAAsB,KACpBqb,IAAe,GACf,GACD,CACDhwH,EAAQ2kH,GAAYttF,EAAiB87F,GAAuB/M,GAAiB4J,GAAejL,GAC5FvB,IAGIsQ,IAAyBh1E,EAAAA,EAAAA,KAAY,KACzC6lE,GAAW,CAAE3kH,SAAQ0jB,WAAW,IAChCixF,uBAAsB,KACpBqb,IAAe,GACf,GACD,CAAChwH,EAAQ2kH,GAAYqL,KAElB+D,IAAiBj1E,EAAAA,EAAAA,KAAat5B,IAC9Bg+F,GACF4C,IAAiBllG,IACfiyG,GAAsB,CAAE3tG,QAAQtE,EAAY,IAE9C0jG,OAEApmG,GAAY,CAAEgH,SACdo/F,KACF,GACC,CAACA,GAAgBuO,GAAuB/M,GAAiB5nG,GAAaglG,IAEnEwQ,IAAal1E,EAAAA,EAAAA,KAAam1E,IAC9B,GAAIzQ,EACF4C,IAAiBllG,IACfiyG,GAAsB,IAAKc,EAAgBlwG,UAAU,GAAQ7C,EAAY,SAEtE,GAAI+yG,IAAmB,mBAAoBA,GAAkB,gBAAiBA,GAAiB,CACpG,MAAM,eAAEvB,GAAiB,EAAK,YAAEC,GAAc,GAAUsB,EACnDpB,GAAsBH,EAAgBC,GAAa,EAC1D,MACOG,IAAW,EAClB,GACC,CAACK,GAAuBL,GAAYD,GAAuBzM,GAAiB5C,IAEzE0Q,IAAuBp1E,EAAAA,EAAAA,KAAY,KACvC,MAAM2kB,EAAeh0D,SAAS4pC,cAA8BqqB,EAAAA,KAE5D,IAAKrlB,GAAYolB,IAAiBh0D,SAASwoG,cAIzC,OAHA8P,KACAG,UACAE,KAIF3kD,GAAcvnC,OACdrzB,YAAW,KACTk/G,KACAG,KACAE,IAAgB,GAh1BgB,IAi1BD,GAChC,CAACL,GAAqBG,GAAiBE,GAAgB/pE,IAEpDo5D,IAA4B34D,EAAAA,EAAAA,KAAY,SAACz7C,GAAsD,IAAxCgiD,EAAe5lD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGy4G,EAAAA,IAC7E,MAAM0V,GAAU13D,EAAAA,GAAAA,GAAW7yD,EAAM,CAAC,cAAe,aAAc,YAC5D4C,KAAK,IACL4J,QAAQ,WAAY,KACvB89G,GAA0BC,EAASvoE,EACrC,GAAG,CAACsoE,MAEJx0E,EAAAA,EAAAA,KAAU,KACH0tE,IAELxB,GAAQ,GAAG,GACV,CAACwB,GAAmBxB,GAAS1jG,KAEhC,MAAMwyG,IAA2Cr1E,EAAAA,EAAAA,KAAaz7C,IAC5Do0G,GAA0Bp0G,EAAM80G,EAAAA,IAAwB,GACvD,CAACV,KAEE2c,IAAet1E,EAAAA,EAAAA,KAAY,WAAiC,IAAhCuG,EAAO5lD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGy4G,EAAAA,IAC1C,MAAM2V,EAAY/qH,OAAOgrH,eAEzB,GAAID,EAAUE,WAAY,CACxB,MAAMC,EAAiBH,EAAUI,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgB3oE,GAEzC,YADA51C,SAAS4kH,YAAY,UAAU,EAGnC,CAEAhP,GExkCW,SAA6C1P,GAC1D,MAAM2e,EAAY7kH,SAAS0oD,cAAc,OACzCm8D,EAAUC,gBAAkB,OAC5BD,EAAUx3E,MAAMl5C,SAAW,WAC3B0wH,EAAUx3E,MAAMnoC,KAAO,WACvB2/G,EAAUx3E,MAAMpoC,IAAM,WACtB4/G,EAAUxgE,UAAY6hD,EACtBlmG,SAASg2B,KAAK2qC,YAAYkkD,GAC1B,IAAI3kD,EAAU2kD,EAAUE,UAExB,GAAI7kD,EAAQ6kD,UAEV,KAAO7kD,EAAQ6kD,WACb7kD,EAAUA,EAAQ6kD,UAKtB,MAAMC,EAAa9kD,EAAQU,YAAa3wE,OAClCg1H,EAAQjlH,SAASklH,cACjB9G,EAAY/qH,OAAOgrH,eAGzB4G,EAAME,SAASjlD,EAAS8kD,GACxBC,EAAMG,OAAOllD,EAAS8kD,GACtB5G,EAAUiH,kBACVjH,EAAUkH,SAASL,GACnBjlH,SAAS4kH,YAAY,UAAU,GAE/B,MAAM/uH,EAASgvH,EAAUxgE,UAGzB,OAFArkD,SAASg2B,KAAKuvF,YAAYV,GAEnBhvH,CACT,CFuiCY2vH,CAAoCtU,MAC9C,GAAG,CAACA,GAAS0E,KAEP6P,IAA8Bp2E,EAAAA,EAAAA,KAAY,KAC9Cs1E,GAAajc,EAAAA,IAAwB,GACpC,CAACic,KAEEe,IAA0Br2E,EAAAA,EAAAA,KAAY,KAC1C17C,GAAS,CACPjC,GAAInB,EAAQC,WAAUoB,KAAM,YAAaG,mBAAmB,GAC5D,GACD,CAAC4B,GAAUpD,EAAQC,KAEtBk5C,EAAAA,EAAAA,KAAU,KACJ0nB,GAAsBxiB,GACxB6pE,IACF,GACC,CAACrnD,EAAoBqnD,GAAiB7pE,KAEzClF,EAAAA,EAAAA,KAAU,KACHyoB,IAEDd,EACF4nD,KAEA7/G,YAAW,KACT8/G,IAAa,GAz4Ba,KA24B9B,GACC,CAAC7nD,EAAoB6nD,GAAaD,GAAc9mD,IAEnD,MAAMwzD,KAA6BjE,KAAoBrP,GAAgByP,QAChEpV,IAAmB+G,GAA0BlwG,IAE9CqiH,IAAoBv2E,EAAAA,EAAAA,KAAY,KACpC,OAAQqyE,IACN,KAAKrP,GAAgBwP,KACnBwB,KACA,MACF,KAAKhR,GAAgByP,OACf6D,GACGlS,EAIOlwG,IACVwW,GAAoC,CAAExpB,WAJtC4L,GAAiB,CACf5G,QAASR,GAAK,mCAAoClC,GAAM0N,SAM5D44G,KAEF,MAEF,KAAK9G,GAAgBsP,KACnBnB,KACA,MACF,KAAKnO,GAAgBuP,SACftI,IACFD,KAEF1C,IAAiBllG,IACfiyG,GAAsB,CAAC,EAAGjyG,EAAY,IAIlC,GAET,CACDiwG,GAAiB2B,GAAY7C,GAAoBlH,GAAsB3C,GAAiBgP,GACxFlS,EAAuBt3G,GAAkBpH,GAAMlC,GAAM0N,MAAO44G,GAAqBE,GACjFqK,GAAuBnzH,EAAQwpB,GAAqCxW,KAGhEu9G,IAAoBxrD,EAAAA,GAAAA,GAAYq+C,GAAgB,GAChDkS,GAAwBlS,GAAkBmN,GAE1CgF,GAAuB,IAAItpH,KACjCspH,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAIzpH,KAC7BypH,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQ1E,IACN,KAAKrP,GAAgBsP,KACnByE,GAAsB,sBACtB,MACF,KAAK/T,GAAgByP,OACnBsE,GAAuB1Z,GAEnB,uBADA,sCAIR,MAAMluF,IAAY2uB,EAAAA,GAAAA,GAChB,YACCkkB,GAAsB,QACvB2nD,IAAmB,kBAGfqN,IAAsBh3E,EAAAA,EAAAA,KAAY,KACtCsnE,IAAiBllG,IACfiyG,GAAsB,CAAC,EAAGjyG,EAAY,GACtC,GACD,CAACiyG,GAAuB/M,KAErB2P,IAAmBj3E,EAAAA,EAAAA,KAAY,KACnCk1E,IAAY,GACX,CAACA,KAEEgC,IAAiCl3E,EAAAA,EAAAA,KAAY,CAAC4zE,EAAyBC,KAC3EvM,IAAiBllG,IACfiyG,GAAsB,CAAET,iBAAgBC,eAAezxG,EAAY,GACnE,GACD,CAACiyG,GAAuB/M,KAErB6P,IAA8Bn3E,EAAAA,EAAAA,KAAY,CAAC4zE,EAAyBC,KACxEqB,GAAW,CAAEtB,iBAAgBC,eAAc,GAC1C,CAACqB,KAEEkC,GAAS/E,KAAoBrP,GAAgBsP,KAC/CnB,GACAkB,KAAoBrP,GAAgBuP,SAAWyE,GAC7ChD,GAEAqD,GAAoBj2D,GAAyC,WAAxBikD,IAAe9iH,OAAsB+hH,EAC1EgT,IAAsB7zD,EAAAA,GAAAA,IAAgB,IACnC4zD,KAAsBxV,OAAcoI,IAC1C,CAACoN,GAAmBxV,GAASoI,KAE1BsN,GAAkBn2D,GAAyC,aAAxBikD,IAAe9iH,OAAwB+hH,IAC3D,IAAhBa,IAA0B8E,GAE/B,OACEhvE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWA,IACbkuF,IAAkBv6C,GACjB7nB,EAAAA,GAAAA,cAACymE,GAAQ,CACP3+G,OAAQ4iH,IAAkB6R,GAAAA,EAAAA,KAC1BC,UAAW9R,IAAkB6R,GAAAA,EAAAA,WAA2B5Q,KAAsB4Q,GAAAA,EAAAA,UAC9E34D,OAAQ+mD,EACRpI,aAAca,KAGlBpjE,EAAAA,GAAAA,cAACsmE,GAAe,CACdrgH,OAAQA,EACRC,SAAUA,EACVuxH,sBAAuBA,GACvB7vG,YAAaA,GACbg/F,QAASA,GACT/+C,QAASA,EACTw7C,yBAA0BA,GAC1B0J,uBAAwBA,GACxBC,kBAAmBA,GACnB9D,wBAAyBA,EACzBO,eAAgBA,EAChByD,gBAAiBA,GACjBuP,aAAcP,GACdC,OAAQrD,GACR4D,gBAAiBT,GACjBU,aAAc1P,GACdjI,QAASmI,GACTyP,oBAAqBxP,GACrByP,oBAAqBpD,GACrBqD,eAAgB3B,GAChB4B,cAAe3C,KAEjBp6E,EAAAA,GAAAA,cAACwmE,GAAS,CACR1+G,OAAQkK,EAAUlK,OAClBiK,OAAQC,EAAUD,OAClBirH,kBAAmBjlE,EACnBitD,QAAS6F,GACTsR,OAAQnC,KAETuB,IACCv7E,EAAAA,GAAAA,cAAC2gE,GAAkB,CACjB74G,OAAQymH,GACR1jB,WAAgC,cAApBrgG,EACZi7C,QAASgpE,GACTxjH,QAASswH,KAGbv7E,EAAAA,GAAAA,cAACynE,GAAU,CACT3/G,OAAQsmH,GACR3oE,QAAS6oE,GACTroH,OAAQA,EACRg3H,iBAAkB5vG,GAClBG,cAAeA,GACfzB,qBAAsBA,IAExBi0B,EAAAA,GAAAA,cAACokE,GAAc,CACbt8G,OAAQ8pH,GACRsL,cAAenL,GACfoL,iBAAkBrL,GAClBrsE,QAASosE,KAEX7xE,EAAAA,GAAAA,cAACskE,GAAiB,CAChBx8G,OAAQqrH,GACRiK,aAAcpwH,QAAQi9G,IACtBC,YAAaoJ,GACb1M,QAASA,GACTllE,QAASq4E,GACTt0E,QAAS2tE,KAEXpzE,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,mBACN44C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eAAegxB,IAAKkmE,KAEnCprE,EAAAA,GAAAA,cAACmkE,GAAgB,CACfr8G,OAAQmqH,GACR93G,MAAO+3G,GACPnrF,UAAWorF,GACXE,iBAAkBA,GAClB/rF,SAAU8rF,GACVK,SAAUC,GACV2K,gBAAiBp2D,EACjB2lD,YAAaA,GACb7gG,qBAAsBA,EACtBuxG,eAAgBzD,GAChBp0E,QAAS8sE,KAEXvyE,EAAAA,GAAAA,cAACu9E,GAAuB,CACtBvY,QAAS2S,GACTjT,uBAAwB13G,QAAQ03G,IAA0B2E,KAE5DrpE,EAAAA,GAAAA,cAACw9E,GAAc,CACbv3H,OAAQA,EACRC,SAAUA,EACV0gH,QAASA,GACTnmE,YAAaosE,IAAuBF,KAEtC3sE,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,yBACZkoG,IACCp8E,EAAAA,GAAAA,cAACy9E,GAAa,CACZ31H,OAAQu0H,GACR/yH,KAAM8gH,GAAc9gH,KACpBm3C,WAAYzzC,QAAQgiH,IACpBttE,QAASw3E,KAGZoD,IACCt8E,EAAAA,GAAAA,cAAC4jE,GAAAA,EAAqB,CACpB1vF,WAAW2uB,EAAAA,GAAAA,GAAe,eAAgBirE,IAAwB,aAClEhwG,OAAK,EACL0lD,cAA0Bn9D,IAAhB6jH,EACVnoE,MAAM,cACN8hE,WAAYsV,GACZ5wE,UAAU,6BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,8BAGhB03F,KAAkB/C,IAAcv7F,KAC/B0yB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNL,QAAS0sE,GAAmBE,GAAkB6L,GAC9C5xE,UAAW99C,GAAK,sBAChBypB,WAAW2uB,EAAAA,GAAAA,GAAe,iBAAkB2pE,GAA6Bp4F,SAAW,qBAEpF4rB,EAAAA,GAAAA,cAAC47B,GAAAA,EAAM,CACLxyD,KAAMy/F,GACNtgH,KAAM+kB,GACN60B,KAAK,YAIR2qE,IAAqBF,IAAe7zG,KACrCinC,EAAAA,GAAAA,cAAC09E,GAAAA,EAAgB,CACfz3H,OAAQA,EACRC,SAAUA,EACVo+C,SAAUA,EACVujB,QAASA,EACTomD,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBp1G,gBAAiBA,GACjB6zG,YAAaA,GACb+Q,YAAajE,GACbkE,gBAAiB1uB,GACjB2tB,oBAAqBtD,GACrBuD,eAAgBzC,GAChB0C,cAAerf,GACfsQ,oBAAqBA,GACrBM,gBAAiBA,GACjBzC,mBAAoBA,GACpBnzG,kBAAmBo0G,KAGvB9sE,EAAAA,GAAAA,cAAC69E,GAAAA,EAAY,CACX34E,IAAKmmE,GACLjkH,GAAG,qBACH02H,gBAAiB3f,EAAAA,IACjBl4G,OAAQA,EACRyS,kBAAmBo0G,GACnB5mH,SAAUA,EACVuQ,UAAWk2G,GACX/F,QAASA,GACTj7D,YACEqjE,IAAwBzgF,IA3pCG,IA4pCvB,GACEu+E,GAEAriH,GAAK,kCADJi/G,GAA0Bj/G,GAAK,WAGxCszH,kBAAmBvL,GACnBwL,aAAcn2D,GAAWqhD,IAA4ByD,GACrDsR,oBAAqBtR,GACrBuR,oBAAqB55E,GAAY2pE,GACjCkQ,4BAA6BhO,IAAsByB,IAAwBK,GAC3EmM,SAAU9S,GACV6Q,OAAQA,GACRkC,kBAAmBlQ,KAEpBnE,GAAsBh9G,QAAQklH,KAC7BlyE,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,SAEhBynE,GACCxpE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLsoG,OAAK,EACLlyF,UAAU,mBACV6tB,MAAM,cACNL,QAAS05E,GACT7yE,UAAU,2BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,mBAGhBlnB,QAAQw7G,KAA0BwG,KAAyB3F,GAC1DrpE,EAAAA,GAAAA,cAAC4jE,GAAAA,EAAqB,CACpB1vF,UAAWy5F,GAAoB,YAAc,GAC7C7vG,OAAK,EACLikC,MAAM,cACN8hE,WAAY+J,GACZrlE,UAAU,6BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,sBAGhB86F,IAAwBhiH,QAAQiiH,KAC/BjvE,EAAAA,GAAAA,cAAA,QAAM9rB,UAAU,oBACboqG,EAAAA,GAAAA,IAA0BrP,GAAoBG,GAAmBh7F,UAGtE4rB,EAAAA,GAAAA,cAACu+E,GAAU,CACTt4H,OAAQA,EACRC,SAAUA,EACVi8G,iBAAkB6M,KAAyB3F,EAC3CjH,eAAgBA,GAChBC,eAAgBA,GAChB1pG,cAAeA,GACfC,cAAeA,GACfC,iBAAkBA,GAClBC,cAAeA,GACfypG,aAAca,GACdZ,aAAct9E,GACd2R,YAAa4yE,EACbnH,WAAYA,GACZvlE,SAAUstE,GACV5kF,MAAOA,KAERz4B,QAAQw7G,IACPxoE,EAAAA,GAAAA,cAACw+E,GAAe,CACd9xH,UAAW87G,EACX1gH,OAAQ6lH,GACRloE,QAASooE,KAGZ3D,GACClqE,EAAAA,GAAAA,cAACumE,GAAc,CACbz+G,OAAQgmH,GACR5D,YAAaA,EACbzkE,QAASuoE,KAGbhuE,EAAAA,GAAAA,cAACy+E,GAAAA,EAAkB,CACjBx4H,OAAQA,EACR6B,OAAQ2oH,GACRoM,oBAAqBlM,GACrBxF,qBAAsBA,GACtB1lE,QAASirE,KAEX1wE,EAAAA,GAAAA,cAACqkE,GAAc,CACbp+G,OAAQA,EACRC,SAAUA,EACV4B,OAAQ+oH,GACR+M,gBAAiB1uB,GACjBzpD,QAASqrE,KAEX9wE,EAAAA,GAAAA,cAAC0+E,GAAAA,EAAY,CACX52H,OAAQqoH,GACR98F,OAAQg9F,GACRr4G,aAAcs4G,GACdvF,eAAgBA,GAChBI,qBAAsBA,GACtB4R,cAAexM,GACfsM,oBAAqBtM,GACrB9qE,QAAS2qE,OAIdpB,IACChvE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,SACN7tB,UAAU,SACVwtB,QAASotE,GACTvmE,UAAU,0BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAGjB8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLgD,IAAKiqE,GACLrxG,OAAK,EACLikC,MAAM,YACN7tB,WAAW2uB,EAAAA,GAAAA,GAAeu0E,IAAkBvvD,GAAW,YAAamnD,IAAwB,aAC5FxrD,SAAU63D,GACVsD,oBAAkB,EAClBp2E,UAAW99C,GAAKqxH,IAChBp6E,QAAS45E,GACTn4D,cACEi0D,KAAoBrP,GAAgBwP,MAAQE,GAAwBv1D,QAAoB77D,GAG1F25C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,cACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,wBACb8rB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,gBAEdujG,IACCz3E,EAAAA,GAAAA,cAAC4+E,GAAAA,EAAc,CACb92H,OAAQ4vH,GACR+E,aAAex1D,OAAoC5gE,EAAnB21H,GAChC6C,eAAiBpV,OAAuCpjH,EAAtB01H,GAClCt2E,QAAS0c,GACT/O,oBAAqBgP,GACrBi7D,gBAAiBp2D,IAGpBqlD,GACG,KGj/CV,IAAe3sE,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,SAAEnpC,GAAampC,EACfk/E,GAAeh/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBtpC,GAAU,GAG/E,OAAOqoH,EAAe9+E,EAAAA,GAAAA,cAAC8+E,EAAiBl/E,QAAYv5C,CAAS,ICG/D,IAAes5C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,SAAEnpC,GAAampC,EACfm/E,GAAuBj/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBtpC,GAGrF,OAAOsoH,EAAuB/+E,EAAAA,GAAAA,cAAC++E,EAAyBn/E,QAAYv5C,CAAS,ICG/E,IAAes5C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,OAAE93C,GAAW83C,EACbo/E,GAAwBl/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0Bj4C,GAGvF,OAAOk3H,EAAwBh/E,EAAAA,GAAAA,cAACg/E,EAA0Bp/E,QAAYv5C,CAAS,ICGjF,IAAes5C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAE93C,GAAW83C,EACbq/E,GAAcn/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBj4C,GAGnE,OAAOm3H,EAAcj/E,EAAAA,GAAAA,cAACi/E,EAAgBr/E,QAAYv5C,CAAS,ICK7D,IAAes5C,EAAAA,EAAAA,KAVuCC,IACpD,MAAM,uBAAErQ,GAA2BqQ,EAC7Bs/E,GAA4Bp/E,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BxQ,GAI/C,OAAO2vF,EAA4Bl/E,EAAAA,GAAAA,cAACk/E,EAA8Bt/E,QAAYv5C,CAAS,ICCzF,IAAes5C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE93C,GAAW83C,EACbu/E,GAAmBr/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBj4C,GAG7E,OAAOq3H,EAAmBn/E,EAAAA,GAAAA,cAACm/E,EAAqBv/E,QAAYv5C,CAAS,ICIvE,IAAes5C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE93C,GAAW83C,EACbw/E,GAAmBt/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBj4C,GAG7E,OAAOs3H,EAAmBp/E,EAAAA,GAAAA,cAACo/E,EAAqBx/E,QAAYv5C,CAAS,ICGvE,IAAes5C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE93C,GAAW83C,EACby/E,GAAuBv/E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBj4C,GAGrF,OAAOu3H,EAAuBr/E,EAAAA,GAAAA,cAACq/E,EAAyBz/E,QAAYv5C,CAAS,IC4H/E,SAASi5H,GAAQzuD,GACf,MAAqB,SAAdA,EAAK0uD,MAAmB1uD,EAAKvpE,MAAQ0e,EAAAA,IAAAA,IAAkC6qD,EAAKvpE,KACrF,CAEA,MAAMk4H,GAA8B,IAAMp1H,EAAAA,IA4d1C,IAAeu1C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAA+B,IAA7B,SAAEkxC,GAAUlxC,EACnB,MAAMqyB,GAAQugB,EAAAA,EAAAA,IAAYxgD,IAExByX,UAAWwiH,EAAqBC,WAAYC,EAAgB,gBAAEvqB,EAAe,aAAEwqB,GAC7Ep6H,EAAOwV,SAAS6kH,OAAOp6F,IAAU,CAAC,GAEhC,aACJ3uB,EAAY,kBAAED,EAAiB,wBAAE64B,EAAuB,YACxD97B,EAAW,iBAAE65B,EAAgB,aAAE95B,EAAY,YAAEtF,EAAW,4BAAEq+C,EAA2B,qBACrF34C,IACEjN,EAAAA,EAAAA,IAAetB,GACbkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,IAC5C8O,OAAO,QAAEqgC,GAAS,aAAEvX,GAAiB53B,EAEvC44C,EAAoB,CACxB3Y,QACAk6F,mBACAvqB,kBACAwqB,eACA/oH,oBACAiwD,oBAAoBp4D,EAAAA,EAAAA,IAAyBlJ,EAAQ8+C,GACrDm7E,sBACAK,qBAAsB9yH,SAAQ+qB,EAAAA,EAAAA,IAAwBvyB,IACtDuhE,oBAAoBC,EAAAA,EAAAA,IAAqBxhE,GACzCu6H,kBAAmB/yH,QAAQ4G,GAC3BosH,uBAAwBhzH,QAAQ2G,GAChCssH,uBAAwBxyF,GAAkB3lC,OAC1Co4H,2BAA4BlzH,QAAQ+G,GACpCgH,eAAgBvV,EAAOwV,SAASC,MAAMF,eACtCosD,qBAAsBj0D,KAAKC,IAAI,EAAG2D,EAAanR,OAAS,GACxD+pC,0BACAtS,gBAGF,IAAK11B,IAAuBitC,EAAQpD,OAClC,OAAO6M,EAGT,MAAM,OAAEn4C,EAAM,SAAEC,EAAUoB,KAAMkD,GAAoB9C,EAC9Cy5B,GAAYC,EAAAA,EAAAA,IAASn7B,GACrBsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B28B,GAAMqD,EAAAA,EAAAA,IAAczgC,EAAQS,GAC5BuzC,GAAYC,EAAAA,EAAAA,IAAgBj0C,EAAQS,EAAQC,IAC1CD,OAAQ+2B,EAAatwB,UAAWuwB,GAAmB5uB,EAErDT,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAC9CyhE,EAAa36D,QAAQY,GAAYwuB,iBACjCo0E,EAAUjoG,IAAQ43H,EAAAA,EAAAA,IAAiB53H,EAAMrC,EAAUyhE,GACnDy4D,GAAkB55D,EAAAA,EAAAA,IAA0BhhE,EAAQS,GACpDo6H,EAA0C,WAApB71H,EACtB81H,EAA6C,cAApB91H,EACzB07D,EAAmC,WAApB17D,GAAgCtE,IAAamB,EAAAA,GAC5D0wD,EAAY/qD,QAAQzE,IAAQm+D,EAAAA,EAAAA,IAAcn+D,IAC1Ck+D,EAAez5D,QACnBzE,GAAQ29D,IAAiBnO,IAAa4O,EAAAA,EAAAA,IAAiBp+D,KAAUA,EAAKkrC,cAAgBlrC,EAAK0xB,cAEvFsmG,EAAmBvzH,QAAQzE,GAAMkrC,aAAelrC,EAAKi4H,cACrD55D,EAAwB55D,QAAQzE,GAAMkrC,aAAelrC,EAAKs+D,eAC1DR,EAAgBr5D,QAAQ41B,IAAO0jC,EAAAA,EAAAA,IAAoB9gE,EAAQo9B,EAAIx7B,KAC/Dm/D,GAAeF,GAAiB+5D,EAChCK,EAAqBzzH,QAAQzE,IAAQ4yF,EAAAA,EAAAA,IAAY5yF,KAAUA,EAAKglB,UAAY6P,GAC5ElwB,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClDw6H,IAAyBn4H,GAAME,SACjCvC,IAAamB,EAAAA,KAAmB6F,GAAiB3E,EAAK8V,SAAS0+E,EAAAA,MAAmBhwD,SAEhFk5B,EAAejpC,GAAeC,GAChC/iB,EAAAA,EAAAA,IAAkB1U,EAAQw3B,EAAaC,QACvC52B,EAEJ,MAAO,IACF+3C,EACHn4C,SACAC,WACAsE,kBACAjC,OACA2E,eACAi0B,YACAw/F,sBAAuB3zH,QAAQzE,GAAMyS,UACrCw1F,SAAU6vB,KACH93H,GAAQioG,KACT4vB,KACCG,GAAoBh4H,GAAMkrC,eAC3BitF,EACNL,sBACAC,yBACAM,wBAAyBr4H,GAAMq4H,wBAC/BC,oBAAqBt4H,GAAMs4H,oBAC3BC,UACG56H,IAAamB,EAAAA,KAAmBkB,GAAME,SACpCuE,SAASqzH,GAAuB7mF,GAAW7zC,QAEhDo7H,eAAgB/zH,QAAQi5D,GACxB2C,oBAAqBpvB,EAAYA,EAAU7zC,OAAS,EACpD+mD,8BACAqL,YACA0O,eACAF,cACAF,gBACAk6D,mBACA35D,wBACA65D,qBACAjnF,YACD,GAvGe8J,EA1d4B19C,IA0C1C,IA1C2C,OAC/CK,EAAM,SACNC,EAAQ,gBACRsE,EAAe,SACf85C,EAAQ,KACR/7C,EAAI,aACJ2E,EAAY,UACZi0B,EAAS,oBACTk/F,EAAmB,QACnB7vB,EAAO,wBACPowB,EAAuB,oBACvBC,EAAmB,UACnBC,EAAS,eACTC,EAAc,oBACdn4D,EAAmB,iBACnB+2D,EAAgB,MAChBl6F,EAAK,gBACL2vE,EAAe,aACfwqB,EAAY,kBACZ/oH,EAAiB,mBACjBiwD,EAAkB,oBAClB24D,EAAmB,qBACnBK,EAAoB,mBACpB/4D,EAAkB,kBAClBg5D,EAAiB,uBACjBC,EAAsB,uBACtBC,EAAsB,2BACtBC,EAA0B,eAC1BnlH,EAAc,4BACd2xC,EAA2B,qBAC3Bya,EAAoB,UACpBpP,EAAS,sBACT4oE,EAAqB,aACrBl6D,EAAY,YACZF,EAAW,cACXF,EAAa,wBACb32B,EAAuB,iBACvB6wF,EAAgB,sBAChB35D,EAAqB,mBACrB65D,EAAkB,aAClBrjG,EAAY,UACZoc,GACD5zC,EACC,MAAM,SACJyD,EAAQ,iBACR6+D,EAAgB,iBAChB84D,EAAgB,SAChBC,EAAQ,iBACR//F,GAAgB,qBAChB37B,GAAoB,sBACpB2C,GAAqB,YACrBg5H,GAAW,eACXz9F,GAAc,WACd09F,GAAU,iBACVtvH,GAAgB,aAChBkoC,KACEx7B,EAAAA,EAAAA,OAEI1D,MAAO0zB,KAAgBy6B,EAAAA,GAAAA,MACzB,SAAEV,KAAa/jB,EAAAA,EAAAA,MAEf95C,IAAOk3C,EAAAA,GAAAA,MACN+oE,GAAe0W,KAAoBxgF,EAAAA,EAAAA,IAAS27E,GAAAA,EAAAA,OAC5C8E,GAAYC,KAAiB1gF,EAAAA,EAAAA,OAC7B2gF,GAAcC,KAAmB5gF,EAAAA,EAAAA,OACjC6gF,GAAkBC,KAAuB9gF,EAAAA,EAAAA,KAAS,GAEnD+gF,GAAuBr9E,GAAYw7E,EACnC8B,GAAyBt9E,EAAWk7E,QAA8Bn5H,EAClEkqG,GAAWuwB,IACfvyF,GAAcu7B,EAAAA,KAEZhD,GAAsBv4B,GAAcE,EAAAA,KACjCF,GAAcy7B,EAAAA,KAEjBz7B,IAAeI,EAAAA,KACZJ,GAAcs7B,EAAAA,KACdk3D,GAIDc,IAAkBC,EAAAA,GAAAA,GAAuB77H,EAAQ27H,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuB57H,EAAU07H,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBt3H,EAAiBo3H,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuBr7D,EAAcm7D,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuBv7D,EAAaq7D,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBz7D,EAAeu7D,IAC/DQ,IAAmBN,EAAAA,GAAAA,GAAuBtxB,EAASoxB,MACnDO,KAA2BD,KAAyBD,IAAyBh8H,IAAWo8H,EAAAA,IACxFC,IAAoBR,EAAAA,GAAAA,GAAuBvxB,GAAUqxB,IACrDW,IAAsBT,EAAAA,GAAAA,GAAuBT,GAAYO,KAA2B37H,IAAWo8H,EAAAA,IAC/FG,IAAqBV,EAAAA,GAAAA,GAAuB/pE,EAAW6pE,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuBvB,EAAkBqB,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuBl7D,EAAuBg7D,IAE/E72D,IAAoBC,EAAAA,GAAAA,GAAY7D,GAEhCrU,QACkBzsD,IAAtB0kE,IAAmCA,GAAoB5D,EAAuB4D,QAAoB1kE,GAG9F,QAAEwhE,GAAO,cAAE86D,GAAa,gBAAEC,IAgelC,SACEC,EACA17D,EACA4D,EACA9kE,EACAq+C,GAEA,MAAOujB,EAASi7D,IAAcliF,EAAAA,EAAAA,KAAU0D,GAClCktC,GAAcC,EAAAA,GAAAA,KAEdsxC,OAA8C18H,IAAtB0kE,GAAmCA,IAAsB5D,EA+BvF,OA9BI47D,IACEF,EACFC,GAAW,GAEXtxC,MAIJx7B,EAAAA,GAAAA,IAAc,KACP6sE,GACHC,GAAW,EACb,GACC,CAACD,KAEJl+E,EAAAA,GAAAA,IAAW,KACJkjB,GACHi7D,GAAW,EACb,GACCtD,IAYI,CACL33D,QAASA,IAAYk7D,EACrBJ,cAAeE,EAZjB,SAAuB1rH,GACE,cAAnBA,EAAE6rH,cAAgC7rH,EAAEwhE,SAAWxhE,EAAEuiE,eACnDopD,EAAW91H,QAAQ/G,GAEvB,OAQkDI,EAChDu8H,gBAAiBC,EAPnB,WACEC,GAAW,EACb,OAKsDz8H,EAExD,CA9gBsD48H,EACjDv2E,GAA+B3xC,IAAmBmoH,EAAAA,IACnD/7D,EACA4D,GACA9kE,EACAq+C,IAGFlF,EAAAA,EAAAA,KAAU,IACDn5C,GACH8jD,EAAAA,GAAAA,IAAsB,KACtB1gD,EAAS,CAAEjC,QAAIf,GAAY,SAE3BA,GACH,CAACJ,EAAQoD,KAEZ2sD,EAAAA,GAAAA,IAAc,KACZorE,GAAiB7E,GAAAA,EAAAA,MACjBiF,QAAgBn7H,EAAU,GACzB,CAACJ,KAGJm5C,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE+jF,GAAmBp6H,OAC3B,IAAKo6H,EACH,OAGF,MAAM3+B,EAAeA,KACf2+B,EAAeroH,SAAWpF,SAASsgE,gBAAgB4uB,aACrDlvF,SAASg2B,KAAKwd,UAAU/gB,IAAI,oBAE5BzyB,SAASg2B,KAAKwd,UAAU+N,OAAO,mBACjC,EAKF,OAFAksE,EAAeniF,iBAAiB,SAAUwjD,GAEnC,KACL2+B,EAAeliF,oBAAoB,SAAUujD,EAAa,CAC3D,GACA,KAEHplD,EAAAA,EAAAA,KAAU,KACJje,GACF8/F,EAAS,CAAE7rH,OAAQnP,GACrB,GACC,CAACA,EAAQk7B,EAAW8/F,KAEvB7hF,EAAAA,EAAAA,KAAU,MACHuhF,GAAyBvjG,GAC5B8D,GAAiB,CAAEj7B,OAAQA,GAC7B,GACC,CAACA,EAAQk7B,EAAWw/F,EAAuBvjG,EAAc8D,MAE5Dke,EAAAA,EAAAA,KAAU,KACJn5C,GAAUw6H,GAAsB54D,IAClC9tB,GAAa,CAAE9zC,UACjB,GACC,CAACw6H,EAAoBx6H,EAAQ4hE,GAAS9tB,KAEzC,MAAMqpF,IAAkBr+E,EAAAA,EAAAA,KAAa5tC,IACnC,MAAM,MAAEgmG,GAAUhmG,EAAEksH,cAAgB,CAAC,EAC/BC,EAAkBnmB,GAASA,EAAMx3G,OAAS,GAAKE,MAAMwe,KAAK84F,GAG7DnyG,QAAQ6lE,GAAuB,kBAAdA,EAAKvpE,OAEtBk1F,MAAM8iC,IAET8B,GAAiBkC,EAAkB/G,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,SAAuB,GACnF,IAEGgH,IAAqBx+E,EAAAA,EAAAA,KAAY,KACrCq8E,GAAiB7E,GAAAA,EAAAA,KAAmB,GACnC,IAEGiH,IAAuBz+E,EAAAA,EAAAA,KAAY,KACvC28E,IAAoB,EAAK,GACxB,IAEG+B,IAAkB1+E,EAAAA,EAAAA,KAAY,KAClC28E,IAAoB,EAAM,GACzB,IAEGgC,IAAyB3+E,EAAAA,EAAAA,KAAY,KACzCi8E,EAAiB,CAAE/6H,OAAQA,EAASC,SAAUA,IAC9Cu9H,KACAv7D,GAAkB,GACjB,CAAC84D,EAAkB/6H,EAAQC,EAAUu9H,GAAiBv7D,IAEnDy7D,IAAoB5+E,EAAAA,EAAAA,KAAY,KACpC17C,EAAS,CAAEjC,GAAInB,GAAS,GACvB,CAACoD,EAAUpD,IAER29H,IAAuB7+E,EAAAA,EAAAA,KAAY,KACvCm8E,GAAY,CAAEj7H,OAAQA,IAClBy8H,IACF7wH,GAAiB,CACf5G,QAAqBR,GAAZstD,EAAiB,sCAA8C,sCAE5E,GACC,CAACmpE,GAAaj7H,EAAQy8H,GAAgC7wH,GAAkBkmD,EAAWttD,KAEhFo5H,IAAiB9+E,EAAAA,EAAAA,KAAY,KACjCthB,GAAe,CAAEC,QAAS,UAAW,GACpC,CAACD,KAEEqgG,IAAmB/+E,EAAAA,EAAAA,KAAY,KACnCo8E,GAAW,CAAEl7H,OAAQA,GAAU,GAC9B,CAACA,EAAQk7H,KAEN4C,GC5VoBC,EAACv+F,EAAiBw+F,KAC5C,MAAOp3F,EAAOq3F,IAAYtjF,EAAAA,EAAAA,IAASqjF,GAqBnC,OAnBA7kF,EAAAA,EAAAA,KAAU,KACH6kF,IAIDA,EAAap1E,WAAW,KAC1Bq1E,EAASD,GAETE,GAAS9nH,MAAM+nH,EAAAA,IAAsB3+F,EAAO0+F,GAASE,KAAKxnE,MACvDvgD,MAAM8gD,IACL,MAAMtjD,EAAM2U,IAAIquC,gBAAgBM,IAChCw5C,EAAAA,GAAAA,IAAa98F,GACVwC,MAAK,KACJ4nH,EAAU,OAAMpqH,KAAO,GACvB,IAEV,GACC,CAACmqH,EAAcx+F,IAEXw+F,EAAep3F,OAAQxmC,CAAS,EDsUT29H,CAAoBv+F,EAAOk6F,IAEnD,sBACJ2E,GAAqB,qBACrBt8D,GAAoB,wBACpBF,GAAuB,mBACvBC,GAAkB,2BAClB4oC,IEnVW,SAA0B1qG,EAAiBC,EAAmBszC,GAC3E,MAAOsuB,EAAyBy8D,IAA2BhZ,EAAAA,GAAAA,GAAkC,CAAC,IACvF5a,EAA4B6zB,IAA8BjZ,EAAAA,GAAAA,KAC3DkZ,GAAuB9gF,EAAAA,EAAAA,OACtBokB,EAAoB28D,IAAsBnZ,EAAAA,GAAAA,KAE3C5uE,EAAM12C,EAAU,GAAEA,KAAUC,SAAaG,EAoI/C,OAjIA+4C,EAAAA,EAAAA,KAAU,KACRolF,OAA2Bn+H,GAC3Bo+H,EAAqBrwG,aAAU/tB,EAC/Bq+H,OAAmBr+H,EAAU,GAC5B,CACDJ,EAAQs+H,EAAyBC,EAA4BE,EAAoBx+H,KAGnFk5C,EAAAA,EAAAA,KAAU,KACR,IAAKzC,EAAK,OACV,MAAM4rB,EAAqBT,IAA0BnrB,GAC/CgoF,EAAenrF,GAAW7zC,QAAU,EACtC4iE,GAAsBo8D,GACxBJ,EAAwB,IACnBz8D,IACH,CAACnrB,GAAMzpC,KAAKC,IAAI,EAAGwxH,EAAe,IAEtC,GACC,CAAC78D,EAAyBnrB,EAAKnD,GAAW7zC,OAAQ4+H,IA+G9C,CACLD,uBA9G4Bv/E,EAAAA,EAAAA,KAAYn/C,IAEH,IAFI,uBACzC8lG,EAAyB,GAAE,0BAAEluB,EAA4B,GAAE,WAAEluC,EAAU,YAAEgkE,EAAW,UAAE71B,GACtD73E,EAChC,IAAKK,IAAWC,IAAay2C,EAAK,OAElC,MAAMn3C,GAASuJ,EAAAA,EAAAA,MAIf,IAF4ByqC,GAAW7zC,SAEV6zC,EAAW,OAExC,MAAMivB,EAAqBV,IAC3B,GAAIU,IAAuB6qC,EAAa,CACtC,MAAMsxB,EAAiBprF,EAAU1vC,QAAQ2+D,GACzC87D,EAAwB,IACnBz8D,IACH,CAACnrB,GAAMioF,IAETF,OAAmBr+H,EACrB,CAEIitG,IACFkxB,OAA2Bn+H,GAC3Bq+H,OAAmBr+H,IAGrB,MAAMw+H,EAA0Bl0B,IAE1Bm0B,EAA2BL,EAAqBrwG,QAItD,GAAIqpD,GACmC,IAAlCiuB,EAAuB/lG,QAAqD,IAArC63E,EAA0B73E,SAChEm/H,GAA0B70H,SAASutE,EAA0B,IACjE,OAGF,MAAMunD,GAAuBnpH,EAAAA,EAAAA,KAC1BkpH,GAA0B95H,QAAQ5D,IAAQo2E,EAA0BvtE,SAAS7I,MAAQ,IACnFwb,OAAO8oF,IAGZ+4B,EAAqBrwG,QAAU2wG,EAE/B,MAAMC,GAAmBz+G,EAAAA,EAAAA,IAAuB/gB,EAAQS,GAExD,IAAK8+H,EAAqBp/H,QAAU83E,GAAaunD,IAAqBxrF,EAAUvpC,SAAS+0H,GAAmB,CAC1G,MAAMC,EAA4BzrF,EAAUroC,MAAM/J,GAAOA,EAAK49H,IAC9D,GAAIC,EAA2B,CAC7B,MAAMz3H,EAAWgsC,EAAU1vC,QAAQm7H,GACnCV,EAAwB,IACnBz8D,IACH,CAACnrB,GAAMnvC,GAEX,CACF,CAEA,GAAIq3H,GAA2BpnD,EAC7B,OAGF,MAAMxqE,EAAQC,KAAKC,OAAO4xH,GACpBG,EAAa1rF,EAAUjhC,WAAWnR,GAAOA,IAAO6L,IAChDkyH,EAAQ71F,EAAa,EAAI,EACzB9hC,EAAWu3H,EAAqBp/H,OAASu/H,EAC7CJ,GAA0Bn/H,QACtBssE,EAAAA,GAAAA,IAAMz4B,EAAU1vC,QAAQg7H,EAAyB,IAAMK,EAAO,EAAG3rF,EAAU7zC,OAAS,GACpF,EAGN4+H,EAAwB,IACnBz8D,IACH,CAACnrB,GAAMnvC,GACP,GACD,CACDvH,EAAQC,EAAUy2C,EAAKnD,EAAWuuB,EAAoB4oC,EAA4B4zB,EAClFz8D,EAAyB48D,EAAoBF,IAkC7Cx8D,sBA/B2BjjB,EAAAA,EAAAA,KAAar4C,IACxC,IAAKzG,IAAWC,IAAay2C,GAAOorB,IAAsB,OAAO,EAEjE,MAAMviE,GAASuJ,EAAAA,EAAAA,MACf,IAAKyqC,GAAW7zC,OAAQ,OAAO,EAE/B,MAAMqe,EAAQw1B,EAAU1vC,QAAQ4C,GAC1Bk4H,GAAiBQ,EAAAA,GAAAA,GAAc5rF,EAAU7zC,OAAQqe,EAAQ,GAC/DwgH,GAA2B,GAE3B,MAAMnhH,GAAYC,EAAAA,EAAAA,IAAgB9d,EAAQS,EAAQC,GAIlD,OAHwBmd,GAAWpT,SAASvD,KACvC8W,EAAAA,EAAAA,IAA8Bhe,EAAQS,EAAQC,EAAUwG,IAG3D63H,EAAwB,IACnBz8D,IACH,CAACnrB,GAAMioF,KAEF,IAEPF,EAAmBlrF,EAAUorF,KACtB,EACT,GACC,CACD3+H,EAAQ6hE,EAAyBC,EAAoBprB,EAAKnD,EAAW+qF,EACrEC,EAA4BE,EAAoBx+H,IAMhD4hE,0BACAC,qBACA4oC,6BAEJ,CFmMM00B,CAAiBp/H,EAAQC,EAAUszC,GAEjCtlB,IAAY2uB,EAAAA,GAAAA,GAChBy/E,IAAqB,mBACrBgD,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAc1iF,EAAAA,GAAAA,GGlXO,uBAAsH,uBHqX/I88E,GGrXgE,uBHsXhEvqB,GGtXuG,uBHuXvGuqB,GAAoBF,GGvX4J,uBHwXhL34D,GGxXyN,wBH2XrN0+D,IAA6B3iF,EAAAA,GAAAA,GACjC,sBACCkkB,GAAsB,SAGnB0+D,IAAkCC,EAAAA,EAAAA,IACtCj7H,GAAMm2H,EAAyBC,GAE3B8E,IAA2BC,EAAAA,EAAAA,IAA4Bn7H,GAAMlC,EAAMrC,EAAU8G,QAAQE,IAErF24H,GAA6BJ,IAAmCE,IAGhE,oBACJG,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBzjF,EAAAA,EAAAA,KACF,IvJjYW,SAAyCnU,EAAqBiiE,GAC3E,MAAM41B,EAAc73F,GAAeu7B,EAAAA,IAC/B97B,GAAAA,GACA,EAAIA,GAAAA,GACFq4F,EAmCR,SAA6B93F,GAC3B,GAAIA,EAAcE,EAAAA,IAA0C,CAC1D,MAAMl4B,EAAkBrD,KAAKw7B,IAC3Bx7B,KAAKC,IAAkB,IAAdo7B,EAAoBJ,IAC7BD,IAGIo4F,EAAmBpzH,KAAKw7B,IACd,IAAdH,EACAL,IAGF,OAAOh7B,KAAKw7B,IACVH,EAAch4B,EAAkB+vH,EAChCr4F,GAEJ,CAEA,GAAIM,EAAcI,EAAAA,IAAyC,CACzD,MAAMp4B,EAAkBrD,KAAKw7B,IAC3Bx7B,KAAKC,IAAkB,GAAdo7B,EAAmBJ,IAC5BD,IAGF,OAAOh7B,KAAKw7B,IACVH,EAAch4B,EACd03B,GAEJ,CAEA,OAAIM,EAAcN,GACTA,GAGFM,CACT,CAtE2Bg4F,CAAoBh4F,GACvCi4F,EAAkBj4F,GAAeu7B,EAAAA,IACnC,MAAQ97B,GAAAA,GACR,EAAIA,GAAAA,GAEFy4F,EAAgBj2B,EAClB61B,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAen4F,EAAcu7B,EAAAA,IAC/B52D,KAAKw7B,IAAI23F,EAAmBD,EAAar4F,IACzCs4F,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,sBACAC,qBACAC,mBAXyBx1B,EACtBg2B,EAAkB,EAAKT,EACxB,EAUFE,kBARwBz1B,EACrBg2B,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EAAet4F,GAiBtC+3F,2BAhBiC/3F,GAAqBs4F,EAkB1D,CuJ4VUC,CAAgCp4F,GAAa6zF,KACnD,CAACA,GAAkB7zF,KAGfq4F,IAAkB/jF,EAAAA,GAAAA,GACtB,wBACCu/E,IAAoB,cACrBA,IAAoBb,KAAiBx6D,GAAsB,eAG7DvY,EAAAA,GAAAA,GAAe,CACb/3C,SAAUswD,EACVtY,OAAQvmD,MAGVsmD,EAAAA,GAAAA,GAAe,CACb/3C,SAAUkrH,GACVlzE,OAAQlpD,KAGV,MAAMshI,GAAsB75H,SACzBqzH,IAAwB+B,KAAqBD,KAA2BD,KACrED,IAAyB4D,IAEzBiB,GAA6B95H,QACjCm1H,IAA0BF,IAAyBS,IAAkCR,IAClF7B,GAEC3qB,GAAiB1oG,QAAQ65H,IAAuB9/D,GAAsBs5D,GAE5E,OACErgF,EAAAA,GAAAA,cAAA,OACE54C,GAAG,eACH8sB,UAAWA,GACXk3B,gBAAiBu3E,GACjB5/E,MAAQ,sCACqB+iF,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNrG,oDAEfxqB,IAA8B,SAAV3vE,EAAmBshG,EAAAA,IAAsBC,EAAAA,gBAEnEtlF,QAAU4mB,IAAYzxD,EAAqB8sH,QAAoBt9H,GAE/D25C,EAAAA,GAAAA,cAAA,OACE9rB,UAAWqxG,GACXxiF,MAAOghF,GAAyB,wBAAuBA,UAA0B19H,IAEnF25C,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,0BACPy6H,IAAmBE,IAClB/hF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBAAkB+yG,YAAa7E,GAAmBgB,QAAkB/8H,GACjF25C,EAAAA,GAAAA,cAACknF,GAAY,CACXjhI,OAAQ47H,GACR37H,SAAU67H,GACVv3H,gBAAiBw3H,GACjBn6D,QAASA,GACTvjB,SAAUA,EACVwjB,wBAAyBA,GACzBC,mBAAoBA,GACpBC,qBAAsBA,KAExBhoB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAM8Z,EAA8B,OAAS3xC,IAAmB+1B,EAAAA,IAAsB,QAAU,OAChGmR,UAAWklB,EACXtU,eAAa,EACbC,oBAAqBA,GACrBq0E,OAAQvE,IAER5iF,EAAAA,GAAAA,cAAConF,GAAW,CACVzqF,IAAM,GAAEklF,MAAmBE,MAAqBC,KAChD/7H,OAAQ47H,GACR37H,SAAU67H,GACVz6H,KAAM06H,GACNxxB,QAAS4xB,GACT7xB,SAAU+xB,GACVx3B,YAAaw2B,GACbv2B,cAAey2B,GACf35D,QAASA,GACT4oC,gBAAiBq2B,GACjBp2B,cAAe1jG,SAAS2yH,IAAqBvqB,GAC7C/3B,2BAA4BinD,GAC5B3zB,2BAA4BA,KAE9B3wD,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW0yG,IACbxE,IACCpiF,EAAAA,GAAAA,cAACqnF,GAAQ,CACPphI,OAAQ47H,GACR37H,SAAU67H,GACVv3H,gBAAiBw3H,GACjBtX,cAAeA,GACfC,WAAY4Y,GACZ17D,QAASA,GACTvjB,SAAUA,IAGb+7E,GACCrgF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wCAAwC0tB,IAAKn3C,GAAKo3C,MAAQ,WAAQx7C,GAC/E25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL6Q,OAAK,EACLjR,MAAM,YACN7tB,UAAU,mBACVwtB,QAAS8hF,IAETxjF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eACb8rB,EAAAA,GAAAA,cAAA,YAAOv1C,GAAK,uBAAwBm+D,EAAqB,QAI9Di+D,IACC7mF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAWsxG,IACdxlF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,4BACb8rB,EAAAA,GAAAA,cAAA,YACG6lF,MAKRvhF,IACK29E,IAA0BQ,KAA8BC,KAC5D1iF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wCAAwC0tB,IAAKn3C,GAAKo3C,MAAQ,WAAQx7C,GAC/E25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL6Q,OAAK,EACL7N,QAAM,EACNjxB,UAAU,wBACVwtB,QAASkiF,IAERn5H,GAAK+3H,GAAqB,qBAAuB,sBAIvDl+E,GAAYo+E,IACX1iF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wCAAwC0tB,IAAKn3C,GAAKo3C,MAAQ,WAAQx7C,GAC/E25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL6Q,OAAK,EACL7N,QAAM,EACNjxB,UAAU,wBACVwtB,QAASkiF,IAERn5H,GAAK,wBAIX65C,GAAY49E,IACXliF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wCAAwC0tB,IAAKn3C,GAAKo3C,MAAQ,WAAQx7C,GAC/E25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL6Q,OAAK,EACL7N,QAAM,EACNjxB,UAAU,wBACVwtB,QAASmiF,IAERp5H,GAAK,cAIX65C,GAAY69E,IACXniF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wCAAwC0tB,IAAKn3C,GAAKo3C,MAAQ,WAAQx7C,GAC/E25C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL6Q,OAAK,EACL7N,QAAM,EACNjxB,UAAU,wBACVwtB,QAASoiF,IAERr5H,GAAK,gBAIZu1C,EAAAA,GAAAA,cAAC++E,GAAoB,CACnBv0H,gBAAiBw3H,GACjBvrH,SAAUswD,EACVypC,QAAS4xB,KAEXpiF,EAAAA,GAAAA,cAACi/E,GAAW,CAACn3H,OAAQi4H,IACrB//E,EAAAA,GAAAA,cAACm/E,GAAgB,CAACr3H,OAAQk4H,IAC1BhgF,EAAAA,GAAAA,cAACq/E,GAAoB,CAACv3H,OAAQo4H,MAIlClgF,EAAAA,GAAAA,cAACsnF,GAAqB,CACpBn3E,QAASoyE,GACT/xB,QAAS4xB,GACT1sB,eAAgBA,MAGnBpxD,GAAYtE,EAAAA,GAAAA,cAAC8+E,GAAY,CAACroH,SAAUzJ,QAAQ20H,OAGhD17H,GACC+5C,EAAAA,GAAAA,cAACg/E,GAAqB,CACpBl3H,OAAQ25H,GACRx7H,OAAQA,EACR2iE,oBAAqBA,EACrBnjB,QAASg+E,GACT8D,QAAS7D,KAGb1jF,EAAAA,GAAAA,cAAA,OAAK0uD,eAAa,GACfh/D,GAAyB3kC,KAAI,CAACwkC,EAAwBtrB,IACrD+7B,EAAAA,GAAAA,cAACk/E,GAAyB,CACxBsI,cAAevjH,EACf04B,IAAKpN,EAAuBnoC,GAC5BmoC,uBAAwBA,OAI9ByQ,EAAAA,GAAAA,cAACo/E,GAAgB,CAACt3H,OAAQm4H,IACtB,KI1hBJwH,GAA4B,IAAMr9H,EAAAA,IAClCs4B,IAAwBvsB,EAAAA,EAAAA,KAAUuL,GAAOA,KAAM,KAAK,GAAO,IAE5DgmH,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,iCAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,CAAa,EAAbA,IAAa,IAoClB,MAuaA,IAAe/nF,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAEW,IAFT,OACPnN,EAAM,UAAE0hI,EAAS,aAAEC,EAAY,SAAE1hI,GAClCkN,EACC,MAAMzL,GAAWb,EAAAA,EAAAA,IAAetB,IACxBkB,MAAOmhI,IAAuB9vG,EAAAA,EAAAA,IAAwBvyB,IAAW,CAAC,GAClEkB,MAAOohI,IAAuBC,EAAAA,EAAAA,IAA2BviI,IAAW,CAAC,GACrEkB,MAAOshI,IAAmBC,EAAAA,EAAAA,IAAuBziI,IAAW,CAAC,EAC/D+C,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EAC7C+iB,EAAOu+G,GAAa1hI,IAAUm7B,EAAAA,EAAAA,IAASn7B,IAAUojB,EAAAA,EAAAA,IAAW7jB,EAAQS,QAAUI,EAC9E0xD,EAAYxvD,IAAQm+D,EAAAA,EAAAA,IAAcn+D,GAClCy0E,EAAgBz0E,GAAME,SAAWuE,QAAQ9G,GAAYA,IAAamB,EAAAA,IAClE6jB,EAAQ8xD,EAAgBz0E,EAAK8V,SAASnY,QAAaG,EACnD6hI,EAAelrD,GAAiB9xD,IAASi9G,EAAAA,EAAAA,IAAkB5/H,EAAM2iB,GACjEk+E,EAAQhgF,IAAQuB,EAAAA,EAAAA,IAAUvB,GAE1Bg8C,EAAgBh8C,IAAQg/G,EAAAA,EAAAA,IAAiBh/G,GACzCi/G,EAAYr7H,SACf46H,GACED,IACCviE,GACD78D,KACC2+D,EAAAA,EAAAA,IAAqB1hE,EAAQ+C,EAAKnB,OAElCg6B,EAAAA,EAAAA,IAAS74B,EAAKnB,OAAS4oH,EAAAA,EAAAA,IAAYznH,IAASA,EAAK6nG,aAAe7nG,EAAKkrC,cAErE60F,EAAkBt7H,QAAQ/G,GAAU0B,EAAS6O,WAAWzF,SAAS9K,IAAS4yB,eAC1E0vG,GAAqBvrD,GAAiBz0E,GAAMglB,UAAUg7G,kBACtDzuG,EAAoB7zB,EACtB0B,EAAS6O,WAAWzF,SAAS9K,IAAS6yB,YAAYF,YAASvyB,EAE/D,MAAO,CACLgiI,YACAjjE,gBACAmjE,oBACAxwE,YACAqxC,QACApsB,gBACAkrD,eACA9yH,OAAQgU,GAAMhiB,GACdygI,qBACAC,qBACAE,iBACAM,kBACAxuG,oBACA4yB,4BAA6B/kD,EAAS+kD,4BACvC,GA9CepJ,EAva2B19C,IAiCzC,IAAA4iI,EAAA,IAjC0C,OAC9CviI,EAAM,SACNC,EAAQ,aACRuiI,EAAY,UACZd,EAAS,SACTe,EAAQ,aACRd,EAAY,aACZe,EAAY,oBACZC,EAAmB,gBACnBC,EAAe,YACfC,EAAW,cACXC,EAAa,gBACbC,EAAe,eACfC,EAAc,oBACdC,EAAmB,aACnBC,EAAY,iBACZC,EAAgB,cAChBhkE,EAAa,OACbhwD,EAAM,UACNizH,EAAS,UACTtwE,EAAS,QACTtS,EAAO,eACPqS,EAAc,mBACd+vE,EAAkB,mBAClBC,EAAkB,eAClBE,EAAc,gBACdM,EAAe,kBACfC,EAAiB,kBACjBzuG,EAAiB,4BACjB4yB,EAA2B,MAC3B08C,EAAK,cACLpsB,EAAa,aACbkrD,GACDtiI,EACC,MAAM,wBACJyjI,EAAuB,sBACvBC,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,iBACvBC,EAAgB,oBAChBz+B,EAAmB,qBACnB9mC,EAAoB,iBACpBwlE,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACEtrH,EAAAA,EAAAA,OAEGurH,EAAoBC,EAAkBC,IAAqBjmF,EAAAA,GAAAA,MAC5D,SAAEO,IAAaC,EAAAA,EAAAA,MAEf0lF,GAAwBllF,EAAAA,EAAAA,KAAY,KACxC4kF,EAAyB,CAAE1jI,OAAQA,EAAS2yB,OAAQkB,IACpDg+B,EAAeoyE,EAAAA,GAAAA,WAA6B,GAC3C,CAACjkI,EAAQ6zB,EAAmBg+B,EAAgB6xE,IAEzCQ,IAA0BplF,EAAAA,EAAAA,KAAY,KAC1C6kF,EAAyB,CAAE3jI,OAAQA,EAAS2P,KAAMkkB,EAAmBlkB,OACrEkiD,EAAeoyE,EAAAA,GAAAA,SACfF,GAAmB,GAClB,CAAC/jI,EAAQ+jI,EAAmBlwG,EAAmB8vG,EAA0B9xE,IAEtEsyE,IAAiCrlF,EAAAA,EAAAA,KAAar+C,IAClD2iI,EAAwB,CAAE3iI,UAEtBA,EAAMf,QACR+8B,GAAsB8mG,EACxB,GACC,CAACA,EAAyBH,IAEvBgB,IAAiCtlF,EAAAA,EAAAA,KAAar+C,IAClD4iI,EAAsB,CAAE5iI,SAAQ,GAC/B,CAAC4iI,IAEEgB,IAA6BvlF,EAAAA,EAAAA,KAAar+C,IAC9C6iI,EAAkB,CAAE7iI,SAAQ,GAC3B,CAAC6iI,IAEE/jE,IAAmBzgB,EAAAA,EAAAA,KAAY,KACnCmf,EAAqB,CAAE9uD,UAAS,GAC/B,CAAC8uD,EAAsB9uD,IAEpBm1H,IAAkBxlF,EAAAA,EAAAA,KAAY,KAC7B9+C,GAAWC,GAChB2jI,EAAmB,CAAE5jI,SAAQ8V,QAAS7V,GAAW,GAChD,CAACD,EAAQ4jI,EAAoB3jI,IAE1BskI,IAAyBzlF,EAAAA,EAAAA,KAAY,KACzC0kF,GAAkB,GACjB,CAACA,IAEEgB,IAAyB1lF,EAAAA,EAAAA,KAAY,KACzC2kF,GAAkB,GACjB,CAACA,KAEG5iF,GAAsB4jF,KAA2B9pF,EAAAA,EAAAA,KAAU6nF,IAElErpF,EAAAA,EAAAA,KAAU,KACRtwC,YAAW,KACT47H,IAAyBjC,EAAa,GACrChB,GAA0B,GAC5B,CAACgB,IAEJ,MAAMh+H,IAAOk3C,EAAAA,GAAAA,KACPgpF,GAAahD,EACjBwB,IAAiByB,EAAAA,GAAAA,QACflD,GAAcmD,QACZ1B,IAAiByB,EAAAA,GAAAA,YACnBlD,GAAcoD,YACZ3B,IAAiByB,EAAAA,GAAAA,WACnBlD,GAAcqD,YACX,EACHrC,EACFhB,GAAcsD,OACZjC,EACFrB,GAAcuD,YACZpC,EACFnB,GAAcwD,cACZpC,EACFpB,GAAcyD,UACZjC,EACFxB,GAAc0D,cACZxD,EACFwB,IAAqBc,EAAAA,GAAAA,QACnBxC,GAAc2D,cACZjC,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAc4D,sBACZlC,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6D,iBACZnC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAc8D,yBACZpC,IAAqBc,EAAAA,GAAAA,iBACvBxC,GAAc+D,uBACZrC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcgE,yBACZtC,IAAqBc,EAAAA,GAAAA,kBACvBxC,GAAciE,wBACZvC,IAAqBc,EAAAA,GAAAA,oBACvBxC,GAAckE,0BACZxC,IAAqBc,EAAAA,GAAAA,2BACvBxC,GAAcmE,iCACZzC,IAAqBc,EAAAA,GAAAA,qBACvBxC,GAAcoE,2BACZ1C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcqE,yBACZ3C,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAcsE,uBACZ5C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcuE,0BACZ7C,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAcwE,mBACZ9C,IAAqBc,EAAAA,GAAAA,QACvBxC,GAAcyE,cACZ/C,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc0E,iBACZhD,IAAqBc,EAAAA,GAAAA,eACvBxC,GAAc2E,qBACZjD,IAAqBc,EAAAA,GAAAA,UACvBxC,GAAc4E,gBACZlD,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6E,iBACZnD,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAc8E,wBACZnmI,EACFsiI,EACFjB,GAAc+E,WACZ7D,EACFlB,GAAcgF,kBACZ1D,EACFtB,GAAciF,YACZ1D,EACFvB,GAAckF,eACZvmI,EAEEwmI,GAAwD,QAArCrE,GAAGn+D,EAAAA,GAAAA,GAAiBsgE,IAAY,UAAK,IAAAnC,EAAAA,GAAK,EAoN7DsE,GACJxoF,GACGqmF,KAAejD,GAAcoD,aAC7BH,KAAejD,GAAcqD,YAC7BJ,KAAejD,GAAc0D,eAC7BT,KAAejD,GAAcgF,mBAC7B9E,EAGCmF,IAAkBlqF,EAAAA,GAAAA,GACtB,sBACAiqF,IAAgB,cACfhmF,IAAwB4F,IAAgC,iBAG3D,OACE1M,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,eACb8rB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLhuB,UAAU,eACVpW,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLT,QAAS+D,EACT8C,UAA0B99C,GAAfqiI,GAAoB,cAAsB,iBAErD9sF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAW64G,MAElB/sF,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAOkU,IAAwB4F,EAA+B,OAAS,aACvEzK,UAAW4qF,IA/NjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKnF,GAAcuD,YACjB,OAAOjrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,gBACnB,KAAKi9H,GAAcsD,OACjB,OACEhrF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACqL,GAAAA,EAAW,CACVE,yBAAyB,cACzB1e,MAAOg7F,EACP/7E,SAAUs+E,KAEZpqF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLqkC,KAAK,UACLJ,MAAM,cAENL,QAASA,IAAMspD,EAAoB,CAAEhxF,YAAYozD,EAAAA,GAAAA,IAAcl7D,KAAKC,SACpEo2C,UAAU,2BAEVvI,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,oBAIrB,KAAKwzG,GAAc0D,cACjB,OAAOprF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAKstD,EAAY,wBAA0B,oBACzD,KAAK2vE,GAAc2D,cACjB,OAAOrrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,SACnB,KAAKi9H,GAAc4D,sBACjB,OAAOtrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAKstD,EAAY,oBAAsB,oBACrD,KAAK2vE,GAAc6D,iBACjB,OAAOvrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,eACnB,KAAKi9H,GAAcgE,yBACjB,OAAO1rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,0BACnB,KAAKi9H,GAAcqE,yBACjB,OAAO/rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,wBACnB,KAAKi9H,GAAcsE,uBACjB,OAAOhsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,oBACnB,KAAKi9H,GAAcuE,0BACjB,OAAOjsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,eACnB,KAAKi9H,GAAc+D,uBACjB,OAAOzrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,uBACnB,KAAKi9H,GAAciE,wBACjB,OAAO3rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,iBACnB,KAAKi9H,GAAckE,0BACjB,OAAO5rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,wBACnB,KAAKi9H,GAAcmE,iCACjB,OAAO7rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,wBACnB,KAAKi9H,GAAcoE,2BACjB,OAAO9rF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,qBACnB,KAAKi9H,GAAcyE,cACjB,OAAOnsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,2BACnB,KAAKi9H,GAAc0E,iBACjB,OAAOpsF,EAAAA,GAAAA,cAAA,UAAuBv1C,GAAlB69H,EAAuB,WAAmB,YACxD,KAAKZ,GAAc6E,iBACjB,OACEvsF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,eACVu1C,EAAAA,GAAAA,cAAA,WAAS9rB,UAAU,SAChB4F,IAAsBA,EAAkBd,WACvCgnB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLoG,UAAW99C,GAAK,QAChBi3C,QAASuoF,GAETjqF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAGhB4F,GAAqBA,EAAkBd,WACtCgnB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,SACNI,KAAK,UACLoG,UAAW99C,GAAK,UAChBi3C,QAASqoF,GAET/pF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,iBAEf8rB,EAAAA,GAAAA,cAACub,GAAAA,EAAa,CACZzzD,OAAQgiI,EACRrkF,QAASukF,EACT/zH,MAAOxL,GAAK,cACZnB,KAAMmB,GAAK,kBACXq7D,sBAAoB,EACpBtK,aAAc/wD,GAAK,UACnBgxD,eAAgB0uE,QAO9B,KAAKzC,GAAc8E,mBACjB,OAAOxsF,EAAAA,GAAAA,cAAA,UAAiBv1C,GAAZstD,EAAiB,oBAA4B,mBAC3D,KAAK2vE,GAAc2E,qBACjB,OAAOrsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,oCACnB,KAAKi9H,GAAcwD,cACjB,OACElrF,EAAAA,GAAAA,cAACqL,GAAAA,EAAW,CACVxe,MAAOi7F,EACPn8E,YAAalhD,GAAK,sBAClBuiI,iBAAe,EACflhF,SAAUu+E,KAGhB,KAAK3C,GAAcyD,UACjB,OACEnrF,EAAAA,GAAAA,cAACqL,GAAAA,EAAW,CACVxe,MAAOm7F,EACPr8E,YAAalhD,GAAK,mBAClBuiI,iBAAe,EACflhF,SAAUw+E,KAGhB,KAAK5C,GAAc+E,WACjB,OAAOzsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAKstD,EAAY,qBAAuB,qBACtD,KAAK2vE,GAAcgF,kBACjB,OAAO1sF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,uBACnB,KAAKi9H,GAAcoD,YACjB,OAAO9qF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,gBACnB,KAAKi9H,GAAc8D,yBACjB,OAAOxrF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,uBACnB,KAAKi9H,GAAcqD,WACnB,KAAKrD,GAAcwE,mBACjB,OAAOlsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,iBACnB,KAAKi9H,GAAc4E,gBACjB,OAAOtsF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,cACnB,KAAKi9H,GAAciF,YACjB,OAAO3sF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,aACnB,KAAKi9H,GAAckF,UACjB,OAAO5sF,EAAAA,GAAAA,cAAA,UAAKv1C,GAAK,cACnB,QACE,OACEu1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UA3JCv1C,GADLuyE,EACU,gBAGVjlB,EACU,oBAGV3iD,EACUg0F,EAAQ,qBAAuB,sBAGjC,oBAkJJppD,EAAAA,GAAAA,cAAA,WAAS9rB,UAAU,SAChBkxC,GACCplB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLoG,UAAW99C,GAAK,cAChBi3C,QAAS8jB,IAETxlB,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,mBAGhBm0G,IAAcrrD,GACbh9B,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLoG,UAAW99C,GAAK,QAChBi3C,QAAS8oF,IAETxqF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAGhBg0G,GACCloF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLoG,UAAW99C,GAAK,aAChBi3C,QAAS6oF,IAETvqF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,eAGhBq0G,GACCvoF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLpkC,OAAK,EACLikC,MAAM,cACNI,KAAK,UACLoG,UAAW99C,GAAK,cAChBi3C,QAAS+oF,IAETzqF,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,kBAO7B,CAiCO+4G,IAEC,K,6BC1ZV,SAASC,GACPC,EACAC,EACAhwG,EACAiwG,GAEA,MAAOzgI,EAAa0gI,IAAWC,EAAAA,GAAAA,GAC7BnwG,EAAegwG,OAAiB/mI,EAChCgnI,OACAhnI,EACAmnI,EAAAA,IAKF,MAAO,CAAC5gI,EAAa0gI,KAFJ1gI,IAAgBygI,GAAWzgI,EAAY,KAAOygI,EAAQ,IAGzE,CAEA,SAASI,GACPC,EACAP,EACAC,EACAhwG,EACAzyB,EACAktB,EACA9b,GAEA,MAAM4xH,GAAgBhqF,EAAAA,EAAAA,OAEtBqS,EAAAA,GAAAA,IAAc,KACZ23E,EAAcv5G,aAAU/tB,CAAS,GAChC,CAAC0V,KAEJi6C,EAAAA,GAAAA,IAAc,KACRm3E,IAAsBO,GAAsB/iI,GAAgBktB,IAC9D81G,EAAcv5G,SAAUw5G,EAAAA,EAAAA,IACtBjjI,EACAktB,EACA61G,GAEJ,GACC,CAAC/iI,EAAcktB,EAAUs1G,EAAmBO,IAE/C,MAAO9gI,EAAa0gI,IAAWC,EAAAA,GAAAA,GAC7BnwG,EAAegwG,OAAiB/mI,EAChCsnI,EAAcv5G,aACd/tB,EACuB,UAAvBqnI,EAAiC12G,EAAAA,IAAqBgB,EAAAA,KAKxD,MAAO,CAACprB,EAAa0gI,KAFJ1gI,IAAgB+gI,EAAcv5G,SAAWxnB,EAAY,KAAO+gI,EAAcv5G,QAAQ,IAGrG,CCxKA,MAGMy5G,IAAwBp9G,EAAAA,EAAAA,KAAU/O,GAAOA,KAAM,KAAK,GAE1D,IAAIosH,IAA8B,E,gHCyFlC,MAAMC,GAAO,CACX,CAAEzmI,KAAM,QAAS2O,MAAO,mBACxB,CAAE3O,KAAM,YAAa2O,MAAO,mBAC5B,CAAE3O,KAAM,QAAS2O,MAAO,mBACxB,CAAE3O,KAAM,QAAS2O,MAAO,oBA2Z1B,SAAS+3H,GAAgCC,GACvC,MAAO,CAEJ,gDAA+CA,wBAE/C,4DAA2DA,yBAC5D/hI,KAAK,KACT,CAEA,UAAeyzC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAMgd,KAAgD,IAA9C,OAAEvc,EAAM,QAAE8V,EAAO,SAAEuoC,GAAU9hC,EACpC,MAAMja,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B6zC,GAAejvC,EAAAA,EAAAA,IAAmBrF,EAAQS,IACxCiyB,YAAag2G,EAAe,cAAE95H,IAAkB+iB,EAAAA,EAAAA,IAAyB3xB,IAAW,CAAC,GACvF,SAAEqyB,GAAczjB,GAAiB85H,GAAmB95H,EAAc85H,IAAqB,CAAC,GAEtFrrH,KAAMq5D,EAAWt8C,aAAcF,GAAqBl6B,EAAO6c,OAC3DQ,KAAM+iC,GAAcpgD,EAAO8O,MAE7B49B,EAAU3pC,IAAQ4yF,EAAAA,EAAAA,IAAY5yF,GAC9BwvD,EAAYxvD,IAAQm+D,EAAAA,EAAAA,IAAcn+D,GAClC4lI,GAAiBpyH,IAAYm2B,GAAY6lB,IAAai4D,EAAAA,EAAAA,IAAYznH,IAClEotC,EAAUptC,GAAMglB,UAAUooB,QAC1BM,EAAmB1tC,GAAMglB,UAAU0oB,iBACnCm4F,EAAmBD,GAAiB5lI,IACpCA,EAAK8lI,aAAgB9lI,EAAKglB,WAAahlB,EAAKglB,SAAS+gH,gBACrDC,EAAgBJ,GAAiB5lI,KACjCimI,EAAAA,EAAAA,IAAiBjmI,EAAM,kBAAmBkmI,EAAAA,EAAAA,IAAkBlmI,EAAM,gBAAkBA,EAAK6nG,WACzFs+B,EAAmBP,GAAiB5lI,KAASimI,EAAAA,EAAAA,IAAiBjmI,EAAM,aAAeA,EAAK6nG,WACxF1a,GAAoBC,EAAAA,EAAAA,IAAwBnwF,EAAQS,GAE1D,IAAI0oI,EACAC,EACAxlH,EAOJ,OANIgY,EAAAA,EAAAA,IAASn7B,KACX2oI,EAAiB3oI,EACjBmjB,GAAOC,EAAAA,EAAAA,IAAW7jB,EAAQopI,GAC1BD,EAAoBvlH,IAASA,EAAKqX,UAAW9V,EAAAA,EAAAA,IAAUvB,IAGlD,CACLqc,OAAOugB,EAAAA,EAAAA,IAAYxgD,GACnBuyD,YACA62E,iBACA90F,eACAjiB,WACAq2G,kBACAS,oBACAR,gBACAC,mBACAG,gBACAG,mBACA/wH,cAAenY,EAAOmY,cACtBmpD,oBAAoBp4D,EAAAA,EAAAA,IAAyBlJ,EAAQ8+C,GACrDl+B,aAAc7d,GAAM6d,aACpBgX,aAAc53B,EAAO43B,aACrBs4D,oBACAxZ,YACAx8C,mBACAkmB,YACAy3C,gBAAiB90F,GAAMmvE,eACnBy2D,GAAiBx4F,GAAW,CAAEA,UAASM,uBACvC04F,GAAqBvlH,GAAQ,CAAEylH,cAAezlH,EAAKsX,aAAajxB,KACrE,GAtDe6zC,EA9ZuB19C,IA4BrC,IA5BsC,OAC1CK,EAAM,QACN8V,EAAO,aACPotH,EAAY,qBACZ2F,EAAoB,MACpBrpG,EAAK,UACLsyB,EAAS,eACT62E,EAAc,cACdjxH,EAAa,aACbm8B,EAAY,SACZjiB,EAAQ,gBACRq2G,EAAe,kBACfS,EAAiB,cACjBR,EAAa,iBACbC,EAAgB,cAChBG,EAAa,iBACbG,EAAgB,cAChBG,EAAa,QACbl5F,EAAO,iBACPM,EAAgB,UAChBimC,EAAS,iBACTx8C,EAAgB,UAChBkmB,EAAS,mBACTkhB,EAAkB,aAClB1gD,EAAY,aACZgX,EAAY,kBACZs4D,EAAiB,gBACjB2H,GACDz3F,EACC,MAAM,wBACJmpI,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,SACf5lI,EAAQ,yBACR6lI,EAAwB,gBACxBz0D,EAAe,gBACfinB,EAAe,aACf1zF,EAAY,kBACZysB,EAAiB,6BACjB00G,IACE5wH,EAAAA,EAAAA,MAGE+5C,GAAe3U,EAAAA,EAAAA,IAAuB,MAEtC0J,GAAgB1J,EAAAA,EAAAA,IAAuB,MACvCl5C,GAAOk3C,EAAAA,GAAAA,MACNiO,EAAWw/E,IAAgBxuF,EAAAA,EAAAA,IAAS,IACpCyuF,EAAgBC,IAAqB1uF,EAAAA,EAAAA,MAEtC+O,GAAOjN,EAAAA,EAAAA,KAAQ,IAAO,IACtByrF,EAAgB,CAAC,CACnB7mI,KAAM,UAAW2O,MAAO8hD,EAAY,qBAAuB,iBACxD,MACFg2E,MAGEhyH,EAA0D,GAAhD,CAAC,CAAEzU,KAAM,QAAS2O,MAAO,uBACpC04H,EAAoB,CAAC,CAAErnI,KAAM,cAAe2O,MAAO,qBAAwB,KAC7E,CAAC04H,EAAmBR,EAAep2E,EAAWh8C,IAE5CwzH,EAAqB3/E,EAAYD,EAAKhqD,OAAS,EAAIgqD,EAAKhqD,OAAS,EAAIiqD,EACrE4/E,GAAU7/E,EAAK4/E,GAAoBjoI,MAElC2mI,GAAYrhI,GAAa0gI,GAASmC,IFpK5B,SACbT,EACAC,EACAS,EACAF,EACAtB,EACApkB,EACA+kB,EACA3yD,EACAx8C,EACAkmB,EACAj7C,EACAktB,EACAuF,EACArhB,GAEA,MAAMkyH,EAAyB,YAAZuB,GAA0BtB,EAA4BA,EAAVsB,EAEzDG,GAAYjtF,EAAAA,EAAAA,KAAQ,KACxB,GAAKonE,GAAqB5tC,GAAcx8C,EAIxC,OAAOkwG,EAAAA,EAAAA,IACL9lB,EAAiB/+G,KAAInF,IAAA,IAAC,OAAEwP,GAAQxP,EAAA,OAAKwP,CAAM,IAC3C8mE,EACAx8C,EACD,GACA,CAACoqF,EAAkB5tC,EAAWx8C,IAE3BhI,GAAUgrB,EAAAA,EAAAA,KAAQ,KACtB,GAAKmsF,GAAkBjpF,EAIvB,OAAOiqF,EAAAA,EAAAA,IAAYhB,EAAejpF,GAAW,EAAK,GACjD,CAACA,EAAWipF,KAERiB,EAAmBC,EAAgBC,GAA2B9C,GACnEe,EAAYe,EAAiB5xG,EAAcuyG,IAGtCM,EAAkBC,EAAcC,GAAyB1C,GAC9D,QAASQ,EAAYyB,EAAgBtyG,EAAczyB,EAAcktB,EAAU9b,IAGtEq0H,EAAqBC,EAAkBC,GAA6B7C,GACzE,YAAaQ,EAAYyB,EAAgBtyG,EAAczyB,EAAcktB,EAAU9b,IAG1Ew0H,EAAiBC,EAAcC,GAAyBhD,GAC7D,QAASQ,EAAYyB,EAAgBtyG,EAAczyB,EAAcktB,EAAU9b,IAGtE20H,EAAkBC,EAAcC,GAAyBnD,GAC9D,QAASQ,EAAYyB,EAAgBtyG,EAAczyB,EAAcktB,EAAU9b,IAGtE80H,EAAkBC,EAAeC,GAA0BtD,GAChE,QAASQ,EAAYyB,EAAgBtyG,EAAczyB,EAAcktB,EAAU9b,IAGtEi1H,EAAuBC,EAAoBC,GAA+BhE,GAC/Ee,EAAYgB,EAAiB7xG,EAAc1F,GAG7C,IAAI9qB,EACA0gI,EACAmC,GAAgB,EAEpB,OAAQxB,GACN,IAAK,UACHrhI,EAAckjI,EACdxC,EAAUyC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHpjI,EAAcokI,EACd1D,EAAU2D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACHtkI,EAAcqjI,EACd3C,EAAU4C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACHvjI,EAAcwjI,EACd9C,EAAU+C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACH1jI,EAAc2jI,EACdjD,EAAUkD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACH7jI,EAAc8jI,EACdpD,EAAUqD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACHhkI,EAAcikI,EACdvD,EAAUwD,EACVrB,EAAgBsB,EAIpB,MAAO,CAAC9C,EAAYrhI,EAAa0gI,EAASmC,EAC5C,CEuD4D0B,CACxDnC,EACAC,EACAC,EACAM,GACAtB,EACAv4F,EACAk5F,EACA3yD,EACAx8C,EACAkmB,EACA9L,EACAjiB,EACAuF,EACArhB,GAEIq1H,GAA4B,YAAfnD,KAA8BE,GAAgC,UAAfF,GAC5DhsF,GAAY0N,EAAKp3C,WAAUnF,IAAA,IAAC,KAAE9L,GAAM8L,EAAA,OAAK9L,IAAS2mI,EAAU,KAE5D,aAAE56B,IDpLK,SACb/6C,EACAk3E,EACArG,EACA2F,IAGAlqF,EAAAA,GAAAA,IAAsBh/C,IAAmB,IAAjByrI,GAAYzrI,EAClC,GAAIyrI,GAAeA,IAAgB7B,EAAS,CAC1C,MAAMt2D,EAAY5gB,EAAalkC,QACzBk9G,EAASp4D,EAAU55B,cAA8B,YACnD45B,EAAU+rB,UAAYqsC,EAAOp+B,YAC/B47B,EAAiC,YAAZU,EAAwB5E,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvEkD,IAA8B,GAC9B/2D,EAAAA,GAAAA,GAAiBmC,EAAWo4D,EAAQ,aAASjrI,OAAWA,OAAWA,EArB/C,KAsBpByI,YAAW,KACTg/H,IAA8B,CAAK,GAtBN,KAyBnC,IACC,CAAC0B,EAASV,EAAsBx2E,KAGnC1T,EAAAA,GAAAA,IAAsBxxC,IAAwB,IAAtBm+H,GAAiBn+H,EACvC,GAAI+1H,IAAiByB,EAAAA,GAAAA,SAAwBzB,IAAiBoI,EAC5D,OAGF,MAAMr4D,EAAY5gB,EAAalkC,QAC/B,IAAK8kD,EACH,OAGF,MAAMs4D,EAAYt4D,EAAU55B,cAA8B,aACrDkyF,GAAaA,EAAUt+B,UAAYh6B,EAAU+rB,YAIlD6oC,IAA8B,GAC9B/2D,EAAAA,GAAAA,GACEmC,EACAA,EAAUzf,kBACV,aACApzD,EACyB,EAAzB6yE,EAAU6rB,cAGZj2F,YAAW,KACTg/H,IAA8B,CAAK,GAtDF,KAyDnCgB,EAAqB3F,GAAa,GACjC,CAACA,EAAc7wE,EAAcw2E,IAEhC,MAAM2C,GAAwB1sF,EAAAA,EAAAA,KAAY,KACxC,MAAMm0B,EAAY5gB,EAAalkC,QAC/B,IAAK8kD,EACH,OAGF,MAAMs4D,EAAYt4D,EAAU55B,cAA8B,YAC1D,IAAKkyF,EACH,OAGF,IAAIpzF,EAAsBwsF,EAAAA,GAAAA,QACtB1xD,EAAU+rB,WAAausC,EAAUt+B,YACnC90D,EAAoB,YAAZoxF,EACJ5E,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGNkE,EAAqB1wF,EAAM,GAC1B,CAACka,EAAcw2E,EAAsBU,IAoBxC,OAjBApwF,EAAAA,EAAAA,KAAU,KACJ0uF,IAIJ2D,GAAuB,GACtB,CAACA,EAAuBjC,IAWpB,CAAEn8B,cARYtuD,EAAAA,EAAAA,KAAY,KAC3B+oF,IAIJD,GAAsB4D,EAAsB,GAC3C,CAACA,IAGN,CCsF2BC,CAAgBp5E,EAAc21E,GAAY9E,EAAc2F,IAE3E,mBAAE6C,GAAkB,qBAAEC,ICnMf,SACbt5E,GAEA,IADAu5E,EAAoBnsI,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,sCAsCvB,OAnCA05C,EAAAA,EAAAA,KAAU,KACR,SAAS0yF,IACP,MAAM54D,EAAY5gB,EAAalkC,QACzB29G,EAAe74D,EAAU55B,cAA8BuyF,GACvDP,EAASp4D,EAAU55B,cAA8B,YACnDyyF,GAAgBT,IAClBS,EAAahvF,MAAMivF,UAAe94D,EAAU6rB,aAAeusC,EAAOvsC,aAAlC,KAEpC,CAMA,OAJA+sC,IAEA/oI,OAAOi4C,iBAAiB,SAAU8wF,GAAc,GAEzC,KACL/oI,OAAOk4C,oBAAoB,SAAU6wF,GAAc,EAAM,CAC1D,GACA,CAACx5E,EAAcu5E,IAkBX,CAAEF,oBAfkB5sF,EAAAA,EAAAA,KAAY,KACrC,MAAMm0B,EAAY5gB,EAAalkC,QAC/B,GAAkC,WAA9B8kD,EAAUn2B,MAAMkvF,UAAwB,CAC1C,MAAMC,EAAiBh5D,EAAUzhB,YAAcyhB,EAAUi5D,YACzDj5D,EAAUn2B,MAAMkvF,UAAY,SAC5B/4D,EAAUn2B,MAAMqvF,YAAe,GAAEF,KACnC,IACC,CAAC55E,IAQyBs5E,sBANA7sF,EAAAA,EAAAA,KAAY,KACvC,MAAMm0B,EAAY5gB,EAAalkC,QAC/B8kD,EAAUn2B,MAAMkvF,UAAY,SAC5B/4D,EAAUn2B,MAAMqvF,YAAc,GAAG,GAChC,CAAC95E,IAGN,CD0JuD+5E,CAAmB/5E,IAEjE2pB,GAAaqwD,IErMCC,MACrB,MAAOtwD,EAAauwD,IAAkB5xF,EAAAA,EAAAA,IAAS,GAM/C,MAAO,CAACqhC,GAJkBl9B,EAAAA,EAAAA,KAAY,KACpCytF,GAAgBp+G,GAAYA,EAAU,GAAE,GACvC,IAEoC,EF8LCm+G,IAEhC7oC,QAAS+oC,KAAgC9oC,EAAAA,GAAAA,IAAwB,CACvEC,QAAStxC,EACTizC,WA7F0B,MAgGtBmnC,IAAuB3tF,EAAAA,EAAAA,KAAY,KACvC6sF,KACAU,IAAkB,GACjB,CAACV,GAAsBU,KAEpBK,IAA4B5tF,EAAAA,EAAAA,KAAY,KAC5CoqF,EAA6B,CAAEzlI,uBAAwBkpI,EAAAA,GAAAA,YAAoC,GAC1F,CAACzD,KAGJ/vF,EAAAA,EAAAA,KAAU,KACR2vF,EAAwB,CAAE7nI,UAAWsoI,IAA6B,GACjE,CAACT,EAAyBS,GAASzzH,IAEtC,MAAM2e,GAAYk0G,GAAkB3oI,GAEpCm5C,EAAAA,EAAAA,KAAU,KACJhiB,GACF3C,EAAkB,CAAEC,cACtB,GACC,CAACD,EAAmBC,GAAW0C,IAElC,MAAMy1G,IAAoB9tF,EAAAA,EAAAA,KAAalmC,IACrC47D,EAAgB,CACdx0E,OAAQy0B,GACRx0B,SAAUmB,EAAAA,GACVwX,UACA5Q,OAAQ0tE,EAAAA,GAAAA,aACR,GACD,CAACjhD,GAAW+/C,IAETq4D,IAAkB/tF,EAAAA,EAAAA,KAAar4C,IACnCg1F,EAAgB,CAAEz7F,OAAQy0B,GAAWhuB,aAAY,GAChD,CAACguB,GAAWgnE,IAETqxC,IAAoBhuF,EAAAA,EAAAA,KAAa39C,IACrCiC,EAAS,CAAEjC,MAAK,GACf,CAACiC,IAEE2pI,IAAqBjuF,EAAAA,EAAAA,KAAar4C,IACtCsB,EAAa,CAAE/H,OAAQy0B,GAAWhuB,aAAY,GAC7C,CAACguB,GAAW1sB,IAETilI,IAAgCluF,EAAAA,EAAAA,KAAY,KAChDuqF,OAAkBjpI,EAAU,GAC3B,IAiCH,IAAI6sI,IA/BJtuF,EAAAA,GAAAA,IAAsB7iC,IAAyB,IAAvBoxH,GAAkBpxH,EACxC,GAAkB,IAAd6tC,GAAmBujF,IAAsBhF,EAC3C,OAGF,MAAMiF,EAAexjF,GAAau+E,EAAgB,GAAK,GAEvDiB,EAAal8H,KAAKw7B,IAAI0kG,EAAczjF,EAAKhqD,OAAS,GAAG,GACpD,CAACwoI,EAAev+E,EAAWD,KAE9BvQ,EAAAA,EAAAA,KAAU,KACR,GAAKiO,EAAcj5B,SAAYtiB,EAAAA,GAI/B,OAAOq8C,EAAAA,GAAAA,IAAcd,EAAcj5B,QAAS,CAC1Cg6B,wBAAyB,WACzBC,QAAUA,CAACl3C,EAAGhH,IACRA,IAAcm+C,GAAAA,GAAAA,MAChB8gF,EAAal8H,KAAKw7B,IAAI6gG,EAAqB,EAAG5/E,EAAKhqD,OAAS,KACrD,GACEwK,IAAcm+C,GAAAA,GAAAA,QACvB8gF,EAAal8H,KAAKC,IAAI,EAAGo8H,EAAqB,KACvC,IAKX,GACD,CAACA,EAAoB5/E,EAAKhqD,SAIzByrI,GACF8B,GAAkBpsE,EAA2C,EAlLrC,IAoLdl6D,KACVsmI,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmB14E,EAAAA,GAAAA,GAAkB,CAAC30D,EAAQ8V,EAASkyH,GAAYsB,GAAqB2D,IAgK9F,OACElzF,EAAAA,GAAAA,cAACuzF,GAAAA,EAAc,CACbruF,IAAKoT,EACLpkC,UAAU,wBACVs/G,aAAcxF,GAAgCC,IAC9C9wB,MAAOm2B,GAAmB1mI,QAAcvG,EACxC47E,YAAaA,GACbwxD,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAfrF,GAA2BT,EAAAA,GAAgBx2G,EAAAA,IAAsB,EAEvG48G,sBAAoB,EACpBC,YAAU,EACVC,WAAYxG,GACZt4B,SAAU3B,KAERo8B,IAyCR,SAA2BxpI,EAAgB2oI,EAAoC/mE,GAC7E,OACE7nB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,gBACb8rB,EAAAA,GAAAA,cAAC+zF,GAAAA,EAAW,CAAC3+H,OAAQw5H,GAAkB3oI,EAAQ+tI,aAAcnsE,IAC7D7nB,EAAAA,GAAAA,cAACi0F,GAAAA,EAAS,CAAC9nF,aAAcyiF,GAAkB3oI,IAGjD,CAhDyBiuI,CAAkBjuI,EAAQ2oI,EAAgB9nE,GAAsBwsE,KACjFltH,GACA45B,EAAAA,GAAAA,cAAA,OACE9rB,UAAU,gBAEV8rB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTkD,IAAKmI,EACLza,KAAMnoC,EAAKo3C,MAAQ,sBAAwB,kBAC3CI,UAAWA,GACX8N,YAAaJ,EAAKhqD,OAClBwuI,qBAAmB,EACnBjgH,UAAU,0BACVkgH,QAASzC,GACTxK,OAAQuL,IAhLlB,WACE,IAAK9lI,KAAgB0mI,KAAqBx5F,EAAc,CACtD,MAAMu6F,EAAYjD,KAAekC,GAC3BgB,EAA2BtnI,QAAuB,YAAfihI,IAA4BG,GAErE,OACEpuF,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,uBACXmgH,IAAcC,GAA4Bt0F,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,MACnDwyF,GAA4Bt0F,EAAAA,GAAAA,cAACu0F,GAAAA,EAAY,CAACjrI,KAAK,8CAGtD,CAEA,IAAKsD,GAAYjH,OAAQ,CACvB,IAAI2D,EAEJ,OAAQ2kI,IACN,IAAK,UACH3kI,EAAO8kI,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACH9kI,EAAOmB,EAAK,oBACZ,MACF,IAAK,YACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,yBACZ,MACF,QACEnB,EAAOmB,EAAK,0BAGhB,OACEu1C,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,sBACb8rB,EAAAA,GAAAA,cAACu0F,GAAAA,EAAY,CAACjrI,KAAMA,IAG1B,CAEA,OACE02C,EAAAA,GAAAA,cAAA,OACE9rB,UAAY,WAAU+5G,UACtBrsF,IAAKn3C,EAAKo3C,OAAwB,UAAfosF,GAAyB,WAAQ5nI,EACpDqoG,eAAa,GAEG,UAAfu/B,GACErhI,GAA0B7B,KAAK3D,GAAO0yC,EAAa1yC,IAClD44C,EAAAA,GAAAA,cAACw0F,GAAAA,EAAK,CACJ73F,IAAKv1C,EACL6D,QAAS6uC,EAAa1yC,GACtBswE,YAAa2lB,GAAmBvjD,EAAa1yC,GAAIswE,YACjD6I,oBAAqBkyD,GACrB/wF,QAASmxF,OAGI,cAAf5E,GACDrhI,GAA0B7B,KAAK3D,GAAO0yC,EAAa1yC,IAClD44C,EAAAA,GAAAA,cAACsoD,GAAAA,EAAQ,CACP3rD,IAAKv1C,EACL6D,QAAS6uC,EAAa1yC,GACtBqtI,UAAQ,EACRC,SAAO,EACPxgH,UAAU,cACVwxD,cAAegQ,EAAkBzlF,SAAS7I,GAC1Cm5E,oBAAqBkyD,GACrBkC,YAAa3B,OAGA,UAAf/E,GACDrhI,GAA0B7B,KAAK3D,GAAO0yC,EAAa1yC,IAClD44C,EAAAA,GAAAA,cAAC40F,GAAAA,EAAO,CACNj4F,IAAKv1C,EACL6D,QAAS6uC,EAAa1yC,GACtBswE,YAAa2lB,GAAmBvjD,EAAa1yC,GAAIswE,YACjD6I,oBAAqBkyD,GACrBoC,eAAgB7B,OAGH,UAAf/E,GACDrhI,GAA0B7B,KAAK3D,GAAO0yC,EAAa1yC,IAClD44C,EAAAA,GAAAA,cAACqjC,GAAAA,GAAK,CACJ1mC,IAAKv1C,EACLq+B,MAAOA,EACPx6B,QAAS6uC,EAAa1yC,GACtB6G,OAAQ85F,EAAAA,GAAAA,YACRr1F,KAAMonC,EAAa1yC,GAAIsL,KACvB0qB,aAAcA,EACdlJ,UAAU,cACV+zE,OAAQ6qC,GACR6B,YAAa3B,GACb5hI,aAAcisF,IAAoBvjD,EAAa1yC,GAAIswE,YACnDgO,cAAegQ,EAAkBzlF,SAAS7I,OAG7B,UAAf6mI,GACDrhI,GAA0B7B,KAAK3D,GAAO0yC,EAAa1yC,IAClD44C,EAAAA,GAAAA,cAACqjC,GAAAA,GAAK,CACJ1mC,IAAKv1C,EACLq+B,MAAOA,EACPx6B,QAAS6uC,EAAa1yC,GACtB43E,aAAa81D,EAAAA,GAAAA,GAAcrqI,EAAMqvC,EAAa1yC,GAAKw+C,EAAWs2B,GAC9DjuE,OAAQ85F,EAAAA,GAAAA,YACRr1F,KAAMonC,EAAa1yC,GAAIsL,KACvB0qB,aAAcA,EACdlJ,UAAU,cACV+zE,OAAQ6qC,GACR6B,YAAa3B,GACb5hI,aAAcisF,IAAoBvjD,EAAa1yC,GAAIswE,YACnDgO,cAAegQ,EAAkBzlF,SAAS7I,OAG7B,YAAf6mI,GACDrhI,GAA0B7B,KAAI,CAAC3D,EAAI6c,KAClC+7B,SAAAA,GAAAA,cAAC+0F,GAAAA,EAAQ,CACPp4F,IAAKv1C,EACLogI,cAAevjH,EACfiQ,UAAU,6CAEVwtB,QAASA,IAAMqxF,GAAkB3rI,GACjC4tI,gBAxIoBC,EAwImB7tI,EAvI1C6tI,IAAat3H,GAAkB+wH,EAA+B,CAAC,CACpEz4H,MAAOxL,EAAK,iCACZggD,KAAM,OACNyqF,QAASA,KACP5F,EAAkB2F,EAAS,SAJ0B5uI,IAyI/C25C,EAAAA,GAAAA,cAAC0rB,GAAAA,EAAe,CAACt2D,OAAQhO,EAAI+tI,YAAal/F,IAAmB7uC,GAAKguI,eAAa,KA1I3F,IAAgCH,CA4IvB,IACgB,gBAAfhH,GACDrhI,GAA0B7B,KAAI,CAAC3D,EAAI6c,IAClC+7B,EAAAA,GAAAA,cAAC+0F,GAAAA,EAAQ,CACPp4F,IAAKv1C,EACLogI,cAAevjH,EACfiQ,UAAU,6CAEVwtB,QAASA,IAAMr4C,EAAS,CAAEjC,QAE1B44C,EAAAA,GAAAA,cAACksB,GAAAA,EAAa,CAACjmE,OAAQmB,YAGzBf,EAGV,CAgCW0iG,IAEH/oD,EAAAA,GAAAA,cAAC0P,GAAAA,EAAO,CAAC2lF,KAAG,EAACzlF,UAAW2/E,EAAoB5/E,KAAMA,EAAME,YAAau/E,KAIxEb,GACCvuF,EAAAA,GAAAA,cAACs1F,GAAAA,EAAoB,CACnBnlF,QAAwB,YAAf89E,GACTvsF,QAASixF,GACTpqF,UAAW99C,EAAK,0BAEhBu1C,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,0BAGhBw6G,GACC1uF,EAAAA,GAAAA,cAACu1F,GAAAA,EAAiB,CAChBztI,OAAQkF,QAAQqiI,GAChBj6H,OAAQi6H,EACR5pF,QAASwtF,KAGE,KGzerB,IAAetzF,EAAAA,EAAAA,KAPyBC,IACtC,MAAM41F,GAAc11F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOy1F,EAAcx1F,EAAAA,GAAAA,cAACw1F,EAAgB51F,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICK/D,IAAetQ,EAAAA,EAAAA,KAPwBC,IACrC,MAAM61F,GAAa31F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO01F,EAAaz1F,EAAAA,GAAAA,cAACy1F,EAAe71F,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICE7D,GAPuCrQ,IACrC,MAAM6sF,GAAa3sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO0sF,EAAazsF,EAAAA,GAAAA,cAACysF,EAAe7sF,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ECG7D,GAP8CrQ,IAC5C,MAAM8sF,GAAoB5sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAGzD,OAAO2sF,EAAoB1sF,EAAAA,GAAAA,cAAC0sF,EAAsB9sF,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ECC3E,IAAetQ,EAAAA,EAAAA,KAPgB+1F,KAC7B,MAAMxK,GAAgBprF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOmrF,EAAgBlrF,EAAAA,GAAAA,cAACkrF,EAAa,MAAMlrF,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICGxD,IAAetQ,EAAAA,EAAAA,KAPYg2F,KACzB,MAAMxK,GAAYrrF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOorF,EAAYnrF,EAAAA,GAAAA,cAACmrF,EAAS,MAAMnrF,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICEhD,IAAetQ,EAAAA,EAAAA,KANci2F,KAC3B,MAAM3K,GAAcnrF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAOkrF,EAAcjrF,EAAAA,GAAAA,cAACirF,EAAW,MAAMjrF,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,I,gBCoCpD,MAwGA,IAAetQ,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAA6B,IAA3B,OAAEnN,GAAQmN,EACjB,MAAM7K,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IACxB0xB,QAASk+G,GAAoBrwI,EAAOu6B,aAAe,CAAC,GACpDld,KAAM+iC,GAAcpgD,EAAO8O,OAC7B,uBAAE5K,IAA2B5C,EAAAA,EAAAA,IAAetB,IAC5C,cAAEmY,GAAkBnY,EACpBuyD,EAAYxvD,IAAQm+D,EAAAA,EAAAA,IAAcn+D,IAGtC7B,MAAOi/C,EAAW,eAClBtxC,EAAc,cACda,EAAa,aACbC,IACErO,EAAAA,EAAAA,IAAetB,GAAQ87B,WAE3B,MAAO,CACLy2B,YACApiB,QAASptC,GAAMglB,UAAUooB,QACzBh4B,gBACAioC,YACAiwF,kBACAlwF,cACAmwF,YAAazhI,EACbmL,UAAW9V,IAA2BkpI,EAAAA,GAAAA,QACtC19H,gBACAC,eACD,GA3BemuC,EAxG8B19C,IAc5C,IAd6C,UACjDmyD,EAAS,QACTpiB,EAAO,WACPogG,EAAU,cACVp4H,EAAa,UACbioC,EAAS,gBACTiwF,EAAe,UACfr2H,EAAS,YACTmmC,EAAW,YACXmwF,EAAW,aACX3gI,EAAY,cACZD,EAAa,QACbuwC,EAAO,SACPhvC,GACD7Q,EACC,MAAM,mBAAEowI,IAAuBz3H,EAAAA,EAAAA,MAEzB9T,GAAOk3C,EAAAA,GAAAA,MACNs0F,EAAmBC,IAAwBt1F,EAAAA,EAAAA,IAAmB,IAE/Du1F,GADwBnrE,EAAAA,GAAAA,GAAYirE,KACcA,GAExDznF,EAAAA,GAAAA,GAAe,CACb/3C,WACAg4C,OAAQhJ,IAGV,MAAMkqF,GAAYjtF,EAAAA,EAAAA,KAAQ,IACjB/M,EAAUA,EAAQ5qC,KAAKqrI,GAAWA,EAAOhhI,SAAU,IACzD,CAACugC,IAEE0gG,GAAqBtxF,EAAAA,EAAAA,KAAar+C,IACtCsvI,EAAmB,CAAEtvI,SAAQ,GAC5B,CAACsvI,IAEEM,GAAe5zF,EAAAA,EAAAA,KAAQ,KAE3B,MAAMw5B,GAAYntE,EAAAA,EAAAA,MAAYsT,MAAMQ,KAC9B0zH,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiB35D,EAAWv2B,GAAe,GAE1G,OAAOkqF,EAAAA,EAAAA,KACLj0H,EAAAA,EAAAA,IAAO,IACF26H,KACCphI,GAAgB,MAChBD,GAAiB,KACpBlK,QAAQoK,IACT,MAAMgU,EAAO8yD,EAAU9mE,GAOvB,OACGu6H,EAAU1/H,SAASmF,IACjBA,IAAWuI,KACTyL,KAASuB,EAAAA,EAAAA,IAAUvB,KAAW2uC,GAAa3uC,EAAKqtH,oBAAqB,IAG9E7wF,EACD,GACA,CACDiwF,EAAiBjwF,EAAWD,EAAaxwC,EAAcD,EAAeyI,EAAegyH,EAAW53E,IAG5F2+E,GAAiB3xF,EAAAA,EAAAA,KAAY,KAC7BkxF,EAAkBtwI,SACpBqwI,EAAmB,CAAEtvI,MAAO,KAC5BqvI,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACE/1F,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,kBACb8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,wBACb8rB,EAAAA,GAAAA,cAAC22F,GAAAA,EAAM,CACLtJ,QAASiJ,EACTM,YAAaX,EACbY,YAAalxF,EACbmxF,kBAAmBrsI,EAAK,yBACxBssI,cAAc,4BACdv3H,UAAWs2H,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,gBAAiBf,IAGnBn2F,EAAAA,GAAAA,cAACs1F,GAAAA,EAAoB,CACnBnlF,QAASnjD,QAAQipI,EAAkBtwI,QACnC69D,SAAUhkD,EACV+oC,UAAW99C,EAAK,yBAChBi3C,QAASg1F,GAERl3H,EACCwgC,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UAEf/B,EAAAA,GAAAA,cAAA,KAAG9rB,UAAU,uBAIf,KCnIV,IAAeyrB,EAAAA,EAAAA,KAPyBC,IACtC,MAAM+sF,GAAc7sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO4sF,EAAc3sF,EAAAA,GAAAA,cAAC2sF,EAAgB/sF,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,ICG/D,IAAetQ,EAAAA,EAAAA,KAPuBC,IACpC,MAAMgtF,GAAY9sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAO6sF,EAAY5sF,EAAAA,GAAAA,cAAC4sF,EAAchtF,GAAYI,EAAAA,GAAAA,cAACiQ,GAAAA,EAAO,KAAG,IC0CrDknF,GAAqB,IAAM/sI,EAAAA,IAC3BgtI,GAAqB9pI,OAAOC,KAAK8pI,EAAAA,IAAoB1xI,OAAS,EAC9D2xI,GAA2BhqI,OAAOC,KAAK28H,EAAAA,IAAmBvkI,OAAS,EAEzE,SAAS4xI,KACP,MAAMC,EAAc9hI,SAAS4pC,cAAc,mCACvCk4F,GACFA,EAAYr1G,MAEhB,CAEA,MA8SA,IAAewd,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAMuc,KAA+B,IAA7B,SAAEuiC,GAAUviC,EACnB,MAAM,OAAE9b,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC5DiyI,GAAuBC,EAAAA,EAAAA,IAA2BlyI,IAClD,WAAEgR,EAAU,4BAAEk2C,IAAgC5lD,EAAAA,EAAAA,IAAetB,GAC7DmyI,EAAuB1xI,EAASuQ,EAAWzF,SAAS9K,IAAS0Q,gBAAatQ,EAE1E22E,GADU/2E,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,IAASwC,aAAUpC,IAC9B2G,QAAQ9G,GAAYA,IAAamB,EAAAA,IAElE,MAAO,CACLsjI,YAAYiN,EAAAA,EAAAA,IAA4BpyI,EAAQ8+C,GAChDr+C,SACAC,WACA82E,gBACA66D,eAAgB7qI,QAAQ/G,GAAUwxI,GAClC/qF,8BACAirF,uBACD,GAjBer0F,EA9S2B19C,IASzC,IAAA4iI,EAAA,IAT0C,WAC9CmC,EAAU,OACV1kI,EAAM,SACNC,EAAQ,SACRo+C,EAAQ,cACR04B,EAAa,eACb66D,EAAc,4BACdnrF,EAA2B,qBAC3BirF,GACD/xI,EACC,MAAM,eACJkyI,EAAc,iBACdrO,EAAgB,qBAChBlkI,EAAoB,sBACpB+jI,EAAqB,kBACrBC,EAAiB,iBACjBwO,EAAgB,eAChBC,EAAc,6BACd7I,EAA4B,yBAC5BxF,EAAwB,iBACxBD,EAAgB,wBAChBuO,EAAuB,oBACvBC,EAAmB,4BACnBC,EAA2B,sBAC3BC,EAAqB,oBACrBC,IACE95H,EAAAA,EAAAA,OAEI1D,MAAO0zB,IAAgBy6B,EAAAA,GAAAA,MACxBmgE,EAAcmP,IAAmB13F,EAAAA,EAAAA,IAAuBgqF,EAAAA,GAAAA,UACxDxB,EAAkBmP,IAAuB33F,EAAAA,EAAAA,IAA4BspF,EAAAA,GAAAA,UACrEsO,EAAsBC,IAA2B73F,EAAAA,EAAAA,OACjD83F,EAAyBC,IAA8B/3F,EAAAA,EAAAA,MACxDg4F,EAAiBzP,IAAiByB,EAAAA,GAAAA,QAElC9iI,OAAwBzB,IAAfskI,EACThD,EAAYgD,IAAe0M,EAAAA,GAAAA,SAC3B3O,EAAWiC,IAAe0M,EAAAA,GAAAA,OAC1BzP,EAAe+C,IAAe0M,EAAAA,GAAAA,WAC9B1O,EAAegC,IAAe0M,EAAAA,GAAAA,WAC9BzO,EAAsB+B,IAAe0M,EAAAA,GAAAA,kBACrCxO,EAAkB8B,IAAe0M,EAAAA,GAAAA,cACjCvO,EAAc6B,IAAe0M,EAAAA,GAAAA,UAC7BtO,EAAgB4B,IAAe0M,EAAAA,GAAAA,YAC/BnO,EAAsByB,IAAe0M,EAAAA,GAAAA,cACrCrO,EAAkB2B,IAAe0M,EAAAA,GAAAA,YACjCpO,EAAiB0B,IAAe0M,EAAAA,GAAAA,UAChCwB,EAAetqG,GAAeE,EAAAA,KAE7BqY,EAAsB4jF,IAA2B9pF,EAAAA,EAAAA,KAAU94C,GAE5D+kI,GAAyE,QAAtDrE,GAAGn+D,EAAAA,GAAAA,GAAiBsgE,GAAY,GAAOkN,UAAe,IAAArP,EAAAA,GAAK,EAE9EhmG,IAAQuiB,EAAAA,EAAAA,KAAY,WAA2B,IAA1B+zF,IAAcpzI,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,GACvC,OAAQilI,GACN,KAAK0M,EAAAA,GAAAA,cACHlI,EAA6B,CAAEzlI,uBAAwBkpI,EAAAA,GAAAA,SACvD,MACF,KAAKyE,EAAAA,GAAAA,SACH,GAAIuB,GAAkBE,EAAgB,CACpCR,EAAgB1N,EAAAA,GAAAA,SAChB,KACF,CACAkN,EAAe,CAAExhI,OAAO,GAAS,CAAEyiI,gBAAgB,IACnD,MACF,KAAK1B,EAAAA,GAAAA,WACH,OAAQjO,GACN,KAAKc,EAAAA,GAAAA,QACHT,IACA,MACF,KAAKS,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHqO,EAAoBrO,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHqO,EAAoBrO,EAAAA,GAAAA,kBACpBuO,OAAwBpyI,GACxBsyI,OAA2BtyI,GAC3B,MACF,KAAK6jI,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHqO,EAAoBrO,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHqO,EAAoBrO,EAAAA,GAAAA,SACpBgO,EAAoB,CAAEjyI,OAAQA,EAAS2yB,YAAQvyB,IAC/CsjI,EAAyB,CAAE1jI,OAAQA,EAAS2yB,YAAQvyB,IAIxD,MAEF,KAAKgxI,EAAAA,GAAAA,kBACHY,IACA,MACF,KAAKZ,EAAAA,GAAAA,WACH3N,IACA,MACF,KAAK2N,EAAAA,GAAAA,OACHE,KACAhyI,IACA,MAEF,KAAK8xI,EAAAA,GAAAA,cACHE,KACAjO,EAAsB,CAAE5iI,WAAOL,IAC/B,MACF,KAAKgxI,EAAAA,GAAAA,UACHE,KACAhO,EAAkB,CAAE7iI,WAAOL,IAC3B,MAEF,KAAKgxI,EAAAA,GAAAA,YACHU,IACA,MACF,KAAKV,EAAAA,GAAAA,YACHe,IACA,MACF,KAAKf,EAAAA,GAAAA,UACHgB,IAGN,GAAG,CACD1N,EAAYiO,EAAgBd,EAAgBC,EAAkB5I,EAC9D/F,EAAkBK,EAAkBlkI,EAAsB+jI,EAAuBC,EACjFI,EAA0B1jI,EAAQiyI,EAAqBxO,EAAkBuO,EACzEG,EAAuBC,IAGnBW,IAAyBj0F,EAAAA,EAAAA,KAAY,CAACkwF,EAAUgE,KACpDR,EAAwBxD,GACxB0D,EAA2BM,EAAW,GACrC,IAEGC,IAA6Bn0F,EAAAA,EAAAA,KAAa4qF,IAC9CqI,EAAe,CAAE/xI,OAAQA,EAAS0pI,aAAY,GAC7C,CAACqI,EAAgB/xI,IA2CpB,SAAS8iG,GAActyF,GACrB,IAA6B,IAAzBo2H,GAIJ,OAAQA,IACN,KAAKwK,EAAAA,GAAAA,cACH,OACEr3F,EAAAA,GAAAA,cAACm5F,GAAc,CACbx8F,IAAK12C,EACLA,OAAQA,EACRwQ,SAAU3O,GAAU2O,EACpBs/H,WAAYmD,GACZzzF,QAASjjB,KAGf,KAAK60G,EAAAA,GAAAA,SACH,OACEr3F,EAAAA,GAAAA,cAAC6qF,GAAO,CACNluF,IAAK12C,EACLA,OAAQA,EACR8V,QAASihE,EAAgB92E,OAAWG,EACpC8iI,aAAcA,EACd7kF,SAAUA,EACVwqF,qBAAsBwJ,IAG5B,KAAKjB,EAAAA,GAAAA,OACH,OAAOr3F,EAAAA,GAAAA,cAACw1F,GAAW,CAACvvI,OAAQA,EAASC,SAAUA,EAAWu/C,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IAChG,KAAK4gI,EAAAA,GAAAA,WACH,OACEr3F,EAAAA,GAAAA,cAACy1F,GAAU,CACT94F,IAAK12C,EACLA,OAAQA,EACR4xD,cAAeuxE,EACfsP,wBAAyBA,EACzBF,qBAAsBA,EACtB/hI,SAAU3O,GAAU2O,EACpBqhD,eAAgBygF,EAChBa,mBAAoBJ,GACpBvzF,QAASjjB,KAIf,KAAK60G,EAAAA,GAAAA,WACH,OAAOr3F,EAAAA,GAAAA,cAACysF,GAAU,CAACxmI,OAAQA,IAC7B,KAAKoxI,EAAAA,GAAAA,kBACH,OAAOr3F,EAAAA,GAAAA,cAAC0sF,GAAiB,CAACzmI,OAAQA,EAASwQ,SAAU3O,GAAU2O,IACjE,KAAK4gI,EAAAA,GAAAA,cACH,OAAOr3F,EAAAA,GAAAA,cAACkrF,GAAa,CAACzlF,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IAC5D,KAAK4gI,EAAAA,GAAAA,UACH,OAAOr3F,EAAAA,GAAAA,cAACmrF,GAAS,CAAC1lF,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IACxD,KAAK4gI,EAAAA,GAAAA,YACH,OAAOr3F,EAAAA,GAAAA,cAACirF,GAAW,CAACxlF,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IAC1D,KAAK4gI,EAAAA,GAAAA,YACH,OAAOr3F,EAAAA,GAAAA,cAAC2sF,GAAW,CAAClnF,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IAC1D,KAAK4gI,EAAAA,GAAAA,UACH,OAAOr3F,EAAAA,GAAAA,cAAC4sF,GAAS,CAACnnF,QAASjjB,GAAO/rB,SAAU3O,GAAU2O,IAI5D,CAEA,OAxGA2oC,EAAAA,EAAAA,KAAU,IAAOt3C,GAASiiD,EAAAA,GAAAA,GAAsBvnB,SAASn8B,GAAY,CAACyB,EAAQ06B,MAE9E4c,EAAAA,EAAAA,KAAU,KACRtwC,YAAW,KACT47H,GAAyB5iI,EAAO,GAC/BqvI,GAAmB,GACrB,CAACrvI,KAEJs3C,EAAAA,EAAAA,KAAU,KACJu4F,IACFY,EAAoBZ,GACpBQ,OAA4B9xI,GAC9B,GACC,CAACsxI,EAAsBQ,KAG1B/4F,EAAAA,EAAAA,KAAU,KACJt3C,GAAU+wI,GACZr2G,IACF,GAEC,CAACq2G,IAGJ1qE,IAA4B/6D,IAAkB,IAAhBq5G,GAAWr5G,EACnCq5G,IAAexmH,IACjBqyI,EAAgB1N,EAAAA,GAAAA,SAChB2N,EAAoBrO,EAAAA,GAAAA,SACtB,GACC,CAACjkI,KAEJuoD,EAAAA,GAAAA,GAAe,CACb/3C,SAAUohI,IACRlN,IAAe0M,EAAAA,GAAAA,UACZ1M,IAAe0M,EAAAA,GAAAA,YACf1M,IAAe0M,EAAAA,GAAAA,eACf1M,IAAe0M,EAAAA,GAAAA,aACf1M,IAAe0M,EAAAA,GAAAA,WACpB5oF,OAAQA,IAAMjsB,IAAM,KAmEpBwd,EAAAA,GAAAA,cAAA,OACE54C,GAAG,sBACH8sB,UAAY2jH,OAA+BxxI,EAAd,aAE5BwyI,GACC74F,EAAAA,GAAAA,cAAA,OAAK9rB,UAAU,mBAAmBwtB,QAASlf,KAE7Cwd,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,eACN44C,EAAAA,GAAAA,cAACq5F,GAAW,CACVpzI,OAAQA,EACRC,SAAUA,EACVuiI,aAAc3gI,EACd6/H,UAAWA,EACXe,SAAUA,EACVd,aAAcA,EACde,aAAcA,EACdC,oBAAqBA,EACrBC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,eAAgBA,EAChBC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClB3jF,QAASjjB,GACTs1B,eAAgBygF,IAElBv4F,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTpP,KAAOkU,GAAwB4F,EAA+B,OAAS,YACvEqD,YAAaqnF,GAAqBE,GAClCr1F,UAAW2lF,EAAewP,GAAqBhO,EAAmByD,GAClEh6E,eAAa,EACbC,oBACE+5E,KAAwBwK,EAAAA,GAAAA,kBACpBA,EAAAA,GAAAA,gBAAgChxI,GAGrC0iG,KAGD,KC3VV,IAAeppD,EAAAA,EAAAA,KANwB/5C,IAAgB,IAAf,OAAEkC,GAAQlC,EAChD,MAAM0zI,GAAcx5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBj4C,GAEnE,OAAOwxI,EAAct5F,EAAAA,GAAAA,cAACs5F,EAAW,WAAMjzI,CAAS,ICL5CkzI,GAAkB,GAClBC,GAAiB,IAEvB,IAAIC,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAAS7/H,EAAa48F,GAC5C+iC,GAAiB7tI,KAAK,CAAEkO,MAAK48F,aACxBgjC,KACHA,IAAU,EACV5qI,YAAWwQ,gBAOfA,iBACE,IAAI0L,EAAQ,EACZ,IAAK,MAAM4uH,KAAmBH,GAC5BI,GAAYD,GACZ5uH,IACIA,IAAUuuH,WACNhnH,EAAAA,EAAAA,IAAMinH,IACZxuH,EAAQ,GAGZyuH,GAAmB,EACrB,CAjBYK,GACNJ,IAAU,CAAK,GACdF,IAEP,CAeA,SAASK,GAAWj0I,GAAqC,IAApC,IAAEkU,EAAG,SAAE48F,GAA2B9wG,EACrD,MAAMgQ,EAAOF,SAAS0oD,cAAc,KACpCxoD,EAAKC,KAAOiE,EACZlE,EAAK+jI,SAAWjjC,EAChB,IACE9gG,EAAKmkI,OACP,CAAE,MAAOlgI,GAEPgD,QAAQC,MAAMjD,EAChB,CACF,CCtBA,MAEMmgI,GAAoB,IAAIpzG,IACxBqzG,GAAqB,IAAIrzG,IAqF/B,IAAe+Y,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IAGQ,CACLwL,iBAHsBlK,EAAAA,EAAAA,IAAetB,GAAQwL,gBAAgBD,SAI7DjG,SAHetF,EAAOsF,SAASiG,YAHjBuyC,EAnFoB19C,IAGlC,IAHmC,gBACvCoL,EAAe,SACflG,GACDlF,EACC,MAAM,4BAAEs0I,EAA2B,iBAAEroI,IAAqB0M,EAAAA,EAAAA,MAEpDq0F,GAAeC,EAAAA,GAAAA,GAXQ,KAWgC,GAEvDsnC,GAA0Bp1F,EAAAA,EAAAA,KAAa95C,IAC3CgvI,GAAmB9xG,IAAIl9B,GACvB2nG,GAAa,KACPqnC,GAAmB93F,OACrB+3F,EAA4B,CAAEpvI,SAAUjF,MAAMwe,KAAK41H,MACnDA,GAAmBG,QACrB,GACA,GACD,CAACF,EAA6BtnC,KAEjCxzD,EAAAA,EAAAA,KAAU,KACR,MAAMi7F,EAAiB/sI,OAAOsf,QAAQ5b,GAAiBjG,KAAIqI,IAAA,IAAEnN,EAAQsE,GAAW6I,EAAA,OAC9E7I,EAAWQ,KAAK3D,GAAO0D,EAAS7E,GAAQ4c,KAAKzb,IAAI,IAChDsmG,OAEE2sC,EAAe10I,OAKpB00I,EAAenpI,SAASjG,IACtB,GAAI+uI,GAAkB90H,IAAIja,GACxB,OAEF+uI,GAAkB7xG,IAAIl9B,GACtB,MAAMqvI,GAAe9/E,EAAAA,EAAAA,IAAoBvvD,EAAS,YAClD,IAAKqvI,EAEH,YADAH,EAAwBlvI,GAI1B,MAAM+0D,EAAYhxB,GAAAA,GAA0BsrG,GAE5C,GAAIt6E,EAGF,OAFA25E,GAAS35E,GAAWu6E,EAAAA,EAAAA,IAA0BtvI,SAC9CkvI,EAAwBlvI,GAI1B,MAAM,SACJyK,EAAQ,MAAEqhC,EAAK,MAAE2oB,GACfz0D,EAAQ2H,QAEZ,KADmB8C,GAAYqhC,GAAS2oB,IAAQvd,MAAQ,GACxCq4F,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKxD,OAJA7oI,EAAiB,CACf5G,QAAS,6EAEXkvI,EAAwBlvI,GAI1B,MAAM0vI,GAAc9zD,EAAAA,EAAAA,IAAsB57E,EAAS,YACnD+jC,GAAAA,GAAkBsrG,EAAcK,GAAa,GAAMr+H,MAAM/Q,IACvD,GAAIovI,IAAgB1rG,EAAAA,GAAAA,YAA4B,CAC9C,MAAMn1B,EAAM,IAAI2U,IAAIljB,EAAQxC,OAAO2M,SAASklI,SACtClkC,GAAW6jC,EAAAA,EAAAA,IAA0BtvI,GAC3C6O,EAAI8U,aAAazJ,IAAI,WAAY01H,mBAAmBnkC,IACpD,MAAMokC,EAAiB/xI,OAAOC,KAAK8Q,EAAIrM,YACvCqtI,GAAgB95F,iBAAiB,gBAAgB,KAC/CnvC,EAAiB,CACf5G,QAAS,yEACT,GAEN,MAAWM,GACTouI,GAASpuI,GAAQgvI,EAAAA,EAAAA,IAA0BtvI,IAG7CkvI,EAAwBlvI,EAAQ,GAChC,IApDF+uI,GAAkBI,OAqDlB,GACD,CAACtvI,EAAUkG,EAAiBkpI,EAA6BC,EAAyBtoI,GAErE,K,gBC1FlB,MAsEA,IAAe8tC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAM4N,KAAiC,IAA/B,WAAEsH,GAAYtH,EACrB,MAAM,OAAEnN,GAAWyU,GAAc,CAAC,EAC5BnS,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GAG1C,MAAO,CACLuqG,QAHcxjG,QAAQzE,KAAS43H,EAAAA,EAAAA,IAAiB53H,EAAMlB,EAAAA,IAIvD,GARei8C,EA3DyB19C,IAAwC,IAAvC,WAAE8U,EAAU,UAAEqgI,EAAS,QAAEvqC,GAAS5qG,EAC9E,MAAM,UAAEo1I,EAAS,gBAAElqI,IAAoByN,EAAAA,EAAAA,MACjC9T,GAAOk3C,EAAAA,GAAAA,MACP,IAAE7nC,EAAG,OAAE7T,EAAM,UAAEyG,GAAcgO,GAAc,CAAC,EAC5C5S,EAASkF,QAAQ8M,GAEjBkyG,GAAoBC,EAAAA,GAAAA,GAAqBhmH,IAC/CoqF,EAAAA,GAAAA,IAAY,KACV27B,EAAkB,CAAE1kH,KAAM,eAAgB,GACzCQ,GAAU0oG,EApBmB,SAoBmBnqG,GAEnD,MAAM40I,GAAgBl2F,EAAAA,EAAAA,KAAa2rC,IACjC,IACE,MAAMn3E,EAAOoG,KAAKa,MAAMkwE,EAAMn3E,MACP,gBAAnBA,EAAK2hI,YACPpqI,EAAgB,CAAER,WAAYrK,EAAQsE,WAAY,CAACmC,GAAY6D,aAAa,IAC5EyqI,KAGqB,eAAnBzhI,EAAK2hI,YACPpqI,EAAgB,CAAER,WAAYrK,EAAQsE,WAAY,CAACmC,KACnDsuI,IAEJ,CAAE,MAAO7jI,GACP,IAED,CAAClR,EAAQ+0I,EAAWtuI,EAAWoE,IAE5BqqI,GAAap2F,EAAAA,EAAAA,KAAa2rC,IAC9BA,EAAMhX,cAAcr3C,OAAO,GAC1B,IAOH,OALA+c,EAAAA,EAAAA,KAAU,KACRr2C,OAAOi4C,iBAAiB,UAAWi6F,GAC5B,IAAMlyI,OAAOk4C,oBAAoB,UAAWg6F,KAClD,CAACA,IAGFj7F,EAAAA,GAAAA,cAACo7F,GAAAA,EAAK,CACJlnH,UAAU,YACVpsB,OAAQA,EACR29C,QAASu1F,EACT/kI,MAAO8kI,EACPM,gBAAc,GAEbvzI,GACCk4C,EAAAA,GAAAA,cAAA,UACE9rB,UAAU,aACVglE,OAAQiiD,EACRh4F,IAAKrpC,EACL7D,MAAOxL,EAAK,cACZ6wI,QAAQ,yDACRC,MAAM,eAGJ,KC1EZ,IAAe57F,EAAAA,EAAAA,KAPgB/5C,IAAgB,IAAf,OAAEkC,GAAQlC,EACxC,MAAM41I,GAAgB17F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBj4C,GAGvE,OAAO0zI,EAAgBx7F,EAAAA,GAAAA,cAACw7F,EAAa,WAAMn1I,CAAS,ICGtD,IAAes5C,EAAAA,EAAAA,KAPU/5C,IAAgB,IAAf,OAAEkC,GAAQlC,EAClC,MAAM61I,GAAU37F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAYj4C,GAG3D,OAAO2zI,EAAUz7F,EAAAA,GAAAA,cAACy7F,EAAO,WAAMp1I,CAAS,ICK1C,IAAes5C,EAAAA,EAAAA,KARoCC,IACjD,MAAM,OAAE93C,GAAW83C,EACb87F,GAAyB57F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,0BAA2Bj4C,GAGzF,OAAO4zI,EAAyB17F,EAAAA,GAAAA,cAAC07F,EAA2B97F,QAAYv5C,CAAS,ICInF,IAAes5C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAE9lC,GAAQ8lC,EACV+7F,GAAgB77F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBjmC,GAGvE,OAAO6hI,EAAgB37F,EAAAA,GAAAA,cAAC27F,EAAkB/7F,QAAYv5C,CAAS,ICGjE,IAAes5C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE93C,GAAW83C,EACbg8F,GAAkB97F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBj4C,GAG3E,OAAO8zI,EAAkB57F,EAAAA,GAAAA,cAAC47F,EAAoBh8F,QAAYv5C,CAAS,ICCrE,IAAes5C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,YAAE7B,GAAgB6B,EAClBi8F,GAAY/7F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAchC,GAG/D,OAAO89F,EAAY77F,EAAAA,GAAAA,cAAC67F,EAAcj8F,QAAYv5C,CAAS,ICKzD,IAAes5C,EAAAA,EAAAA,KAP8BC,IAC3C,MAAM,SAAEnpC,GAAampC,EACfk8F,GAAmBh8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBtpC,GAE7E,OAAOqlI,EAAmB97F,EAAAA,GAAAA,cAAC87F,EAAgB,WAAMz1I,CAAS,ICG5D,IAAes5C,EAAAA,EAAAA,KAPuBC,IACpC,MAAM,SAAEnpC,GAAampC,EACfm8F,GAAYj8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAActpC,GAE/D,OAAOslI,EAAY/7F,EAAAA,GAAAA,cAAC+7F,EAAS,WAAM11I,CAAS,I,uOCG9C,MA6BA,IAAes5C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACQ,CACLsR,cAAchQ,EAAAA,EAAAA,IAAetB,GAAQsR,gBAHvBwsC,EA7B8B19C,IAAsB,IAArB,aAAEkR,GAAclR,EACjE,MAAM,SAAEyD,IAAakV,EAAAA,EAAAA,MAEfy9H,EAAYA,KAChB3yI,EAAS,CAAEjC,QAAIf,GAAa,CAAE0yI,gBAAgB,GAAO,EAGjDkD,EAA8C7oI,IAAgC,IAA/B,OAAEnN,EAAM,KAAEqB,EAAI,SAAEpB,GAAUkN,GAC7Eo7C,EAAAA,GAAAA,GAAe,CACb/3C,UAAU,EACVc,MAAM2kI,EAAAA,EAAAA,IAAmBj2I,EAAQqB,EAAMpB,GACvCuoD,OAAQutF,GACR,EAGJ,OACEh8F,EAAAA,GAAAA,cAAA,WACGlpC,GAAc/L,KAAI,CAACiT,EAAaiG,IAC/B+7B,EAAAA,GAAAA,cAACi8F,EACCE,GAAA,CACAx/F,IAAM,GAAE3+B,EAAY/X,UAAU+X,EAAY9X,YAAY8X,EAAY1W,QAAQ2c,KAEtEjG,MAGJ,KCzBV,IAAe2hC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE93C,GAAW83C,EACbw8F,GAAkBt8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBj4C,GAG3E,OAAOs0I,EAAkBp8F,EAAAA,GAAAA,cAACo8F,EAAoBx8F,QAAYv5C,CAAS,ICGrE,IAAes5C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE93C,GAAW83C,EACby8F,GAAqBv8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBj4C,GAGjF,OAAOu0I,EAAqBr8F,EAAAA,GAAAA,cAACq8F,EAAuBz8F,QAAYv5C,CAAS,ICG3E,IAAes5C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAEhY,GAAWgY,EACb08F,GAAcx8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBnY,GAGnE,OAAO00G,EAAct8F,EAAAA,GAAAA,cAACs8F,EAAgB18F,QAAYv5C,CAAS,ICG7D,IAAes5C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAEhd,GAAQgd,EACV28F,GAAgBz8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBnd,GAGvE,OAAO25G,EAAgBv8F,EAAAA,GAAAA,cAACu8F,EAAkB38F,QAAYv5C,CAAS,ICGjE,IAAes5C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,IAAEhd,GAAQgd,EACV48F,GAAwB18F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0Bnd,GAGvF,OAAO45G,EAAwBx8F,EAAAA,GAAAA,cAACw8F,EAA0B58F,QAAYv5C,CAAS,ICZjF,IAAgB,KAAO,wBCwCjBo2I,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAmKhF,IAAe98F,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IAAuB0vC,EAAAA,EAAAA,KAAKpuC,EAAAA,EAAAA,IAAetB,GAAS,CAAC,cADpC89C,EAjKsB19C,IAAkB,IAAjB,SAAEsV,GAAUtV,EAErD,MAAM82I,GAAY/4F,EAAAA,EAAAA,IAA0B,MACtCg5F,GAAch5F,EAAAA,EAAAA,IAAmB,IACjCi5F,GAAkBj5F,EAAAA,EAAAA,KAAO,GACzBnV,GAAaw6B,EAAAA,GAAAA,KACbwoB,GAAcC,EAAAA,GAAAA,MACd,SAAEntC,IAAaC,EAAAA,EAAAA,MAEfs4F,EAAwBv4F,EAAW,GAAK,KACxC,iBACJnpC,EAAgB,IAAER,EAAG,MAAEE,EAAK,KAAED,EAAI,OAAEE,GAClCI,GAAY,CAAC,EAEX4hI,GAAmB/3F,EAAAA,EAAAA,KAAY,SAACiwB,EAAWE,GAA8C,IAAnCrnC,EAAMnoC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGm3I,EACnE,IAAK,IAAI54H,EAAI,EAAGA,EAAI4pB,EAAQ5pB,IAAK,CAC/B,MAAM84H,EAAW94H,EAAI,EACf+4H,EAAM,CACV1uG,EAAG0mC,GAAK+nE,GAAY,GAAM,KAC1B3tG,EAAO,IAAJ8lC,GAEC+nE,EAAU/pI,KAAKya,SAAWqnD,EAAI,IAE9BkoE,EAAW,CACf5uG,EAAGyuG,EAAWE,GAAqB,EAAXA,EACxB7tG,GAHe8lC,EAAI,EAAIhiE,KAAKya,SAAWunD,GAMnCioE,EAAcV,GAAgBvpI,KAAKI,MAAMJ,KAAKya,SAAW8uH,GAAgB92I,SACzEw8C,EAhCkB,GAiCxBw6F,EAAYvoH,QAAQxoB,KAAK,CACvBoxI,MACA76F,OACAJ,MAAOo7F,EACPD,WACAE,QAASj7F,EACTk7F,iBAAkC,GAAhBnqI,KAAKya,SACvB2vH,SAAU,EACVC,YAAarrI,KAAKC,MAClBqrI,WAAY,GAEhB,CACF,GAAG,CAACX,IAEEY,GAAe14F,EAAAA,EAAAA,KAAY,KAC/B,IAAK23F,EAAUtoH,UAAYwoH,EAAgBxoH,QACzC,OAEF,MAAM+pC,EAASu+E,EAAUtoH,QAEnBqqC,EAAMN,EAAOG,WAAW,MAC9B,IAAKG,EACH,OAGF,MAAQ5jD,MAAO6iI,EAAa5iI,OAAQ6iI,GAAiBx/E,EACrDM,EAAIm/E,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrClB,EAAYvoH,QAAQljB,SAAQ,CAACy1F,EAAG1iF,KAC9B,MAAM,IACJ+4H,EAAG,SACHE,EAAQ,KACR/6F,EAAI,MACJJ,EAAK,QACLq7F,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACE72C,EACErzB,GAAQphE,KAAKC,MAAQorI,GAAe,IAEpCO,EAAS,CACbxvG,EAAG0uG,EAAI1uG,EAAI4uG,EAAS5uG,EAAIglC,EACxBlkC,EAAG4tG,EAAI5tG,EAAI8tG,EAAS9tG,EAAIkkC,GAGpByqE,EAAc,CAClBzvG,EAAgB,IAAb4uG,EAAS5uG,EACZc,EAAG8tG,EAAS9tG,GAAY,IAAPkkC,GAGb0qE,EAAa77F,EAAOjvC,KAAKqgE,IAAIrgE,KAAK+qI,IAAIT,EAAaH,IACnDa,EAAc,EAAIV,EAAaH,GAAoBnqI,KAAKi6E,GAAK,KAE7DgxD,EAAgBX,EAAa,EAC7BY,EAAiBlsI,KAAKC,MAG5B,GADqB2rI,EAAO1uG,EAAIuuG,EAAeh3C,EAAExkD,KAG/C,YADA07F,EAAiBjyI,KAAK+6F,GAIxB,MAAM03C,EAAc,IACf13C,EACHq2C,IAAKc,EACLZ,SAAUa,EACVX,QAASY,EACTV,SAAUY,EACVX,YAAaa,EACbZ,WAAYW,GAGdxB,EAAYvoH,QAAQnQ,GAAKo6H,EACzB5/E,EAAIF,UAAYxc,EAChB0c,EAAI6/E,YACJ7/E,EAAI8/E,QACFvB,EAAI1uG,EACJ0uG,EAAI5tG,EACJ+S,EACAi7F,EACAE,EACA,EACA,EAAIpqI,KAAKi6E,IAEX1uB,EAAI+/E,MAAM,IAEZ7B,EAAYvoH,QAAUuoH,EAAYvoH,QAAQppB,QAAQ27F,IAAOk3C,EAAiB5tI,SAAS02F,KAC/Eg2C,EAAYvoH,QAAQzuB,OACtBi1G,sBAAsB6iC,GAEtBb,EAAgBxoH,SAAU,CAC5B,GACC,IAkBH,IAhBA4hC,EAAAA,GAAAA,IAAc5iD,IAAwB,IAChCqrI,GADUC,GAAiBtrI,EAU/B,OARIsrI,IAAqBvjI,IACvB2hI,EAAiBjiI,GAAS2zB,EAAW3zB,MAAOC,GAAU0zB,EAAW1zB,QACjE2jI,EAAc3vI,WAAW0iF,EAvIE,KAwItBorD,EAAgBxoH,UACnBwoH,EAAgBxoH,SAAU,EAC1BwmF,sBAAsB6iC,KAGnB,KACL5tI,aAAa4uI,EAAY,CAC1B,GAEA,CAACtjI,EAAkBq2E,EAAaisD,KAE9BtiI,GAAoBjJ,KAAKC,MAAQgJ,EAnJP,IAoJ7B,OAGF,MAAM4nC,GAAQmgC,EAAAA,GAAAA,GACZl2E,QAAQ2N,IAAS,QAAOA,MACxB3N,QAAQ4N,IAAU,SAAQA,MAC1B5N,QAAQ6N,IAAW,UAASA,MAC5B7N,QAAQ8N,IAAY,WAAUA,OAGhC,OACEklC,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,WAAW8sB,UAAW+uB,GAAAA,KAAaF,MAAOA,GAChD/C,EAAAA,GAAAA,cAAA,UAAQkF,IAAKw3F,EAAWxoH,UAAW+uB,GAAAA,OAAepoC,MAAO2zB,EAAW3zB,MAAOC,OAAQ0zB,EAAW1zB,SAC1F,KCxLV,IAAe6kC,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,QAAEzc,GAAYyc,EACd++F,GAAe7+F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB5c,GAGrE,OAAOw7G,EAAe3+F,EAAAA,GAAAA,cAAC2+F,EAAiB/+F,QAAYv5C,CAAS,ICG/D,IAAes5C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE93C,GAAW83C,EACbg/F,GAAmB9+F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBj4C,GAG7E,OAAO82I,EAAmB5+F,EAAAA,GAAAA,cAAC4+F,EAAqBh/F,QAAYv5C,CAAS,ICEvE,IAAes5C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE93C,GAAW83C,EACbi/F,GAAe/+F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBj4C,GAGrE,OAAO+2I,EAAe7+F,EAAAA,GAAAA,cAAC6+F,EAAiBj/F,QAAYv5C,CAAS,ICG/D,IAAes5C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE93C,GAAW83C,EACbk/F,GAAeh/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBj4C,GAGrE,OAAOg3I,EAAe9+F,EAAAA,GAAAA,cAAC8+F,EAAiBl/F,QAAYv5C,CAAS,ICI/D,IAAes5C,EAAAA,EAAAA,KARsCC,IACnD,MAAM,MAAErkC,GAAUqkC,EACZm/F,GAA2Bj/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,4BAA6BxkC,GAG7F,OAAOwjI,EAA2B/+F,EAAAA,GAAAA,cAAC++F,EAA6Bn/F,QAAYv5C,CAAS,ICGvF,IAAes5C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,qBAAEo/F,GAAyBp/F,EAC3Bq/F,GAAqBn/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBi/F,GAGjF,OAAOC,EAAqBj/F,EAAAA,GAAAA,cAACi/F,EAAuBr/F,QAAYv5C,CAAS,ICE3E,IAAes5C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,kBAAEvtB,GAAsButB,EACxBs/F,GAAuBp/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB1tB,GAGrF,OAAO6sH,EAAuBl/F,EAAAA,GAAAA,cAACk/F,EAAyBt/F,QAAYv5C,CAAS,ICG/E,IAAes5C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,eAAEp2C,GAAmBo2C,EACrBu/F,GAAuBr/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBv2C,GAGrF,OAAO21I,EAAuBn/F,EAAAA,GAAAA,cAACm/F,EAAyBv/F,QAAYv5C,CAAS,ICK/E,IAAes5C,EAAAA,EAAAA,KAVsCC,IACnD,MAAM,yBAAElX,GAA6BkX,EAC/Bw/F,GAA2Bt/F,EAAAA,GAAAA,GAC/BC,GAAAA,GAAAA,MAAe,4BAA6BrX,GAI9C,OAAO02G,EAA2Bp/F,EAAAA,GAAAA,cAACo/F,EAA6Bx/F,QAAYv5C,CAAS,IC6HvF,IAAIg5I,IAAiB,EAErB,MAmWA,IAAe1/F,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC99C,EAAMof,KAA+B,IAA7B,SAAE0/B,GAAU1/B,EACnB,MACE5J,UACEC,OAAO,eACLF,EAAc,SAAE2Z,EAAQ,yBAAE4qH,IAE7B,aACDliH,GACE53B,GAEE,gBACJ+U,EAAe,0BACf8tB,EAAyB,yBACzBK,EAAwB,eACxBl/B,EAAc,QACd25B,EAAO,OACPyE,EAAM,iBACN7tB,EAAgB,0BAChB0B,EAAyB,wBACzBC,EAAuB,4BACvBgxC,EAA2B,WAC3BhyC,EAAU,YACVrM,EAAW,kBACXwI,EAAiB,0BACjBoD,EAAyB,cACzB5B,EAAa,QACbsB,EAAO,WACPtE,EAAU,gBACVopC,EAAe,aACf72C,EAAY,YACZmZ,EAAW,QACXrC,EAAO,kBACPlD,EAAiB,wBACjBvR,IACEnD,EAAAA,EAAAA,IAAetB,IAEXS,OAAQ+2B,EAAatwB,UAAWuwB,GAAmB5uB,EACrD43D,EAAejpC,GAAeC,GAChC/iB,EAAAA,EAAAA,IAAkB1U,EAAQw3B,EAAaC,QACvC52B,EACEk5I,EAAc7kI,IAAcR,EAAAA,EAAAA,IAAkB1U,EAAQkV,EAAWzU,OAAQyU,EAAWhO,WACpFquI,EAAYwE,GAAa3sI,QAAQ2hF,MAAMt+E,MACvCstC,EAAc/9C,EAAOmY,eAAgB0L,EAAAA,EAAAA,IAAW7jB,EAAQA,EAAOmY,oBAAiBtX,GAChF,OAAEJ,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAExD,MAAO,CACL43B,eACAoiH,iBAAkB3oI,EAClB4oI,mBAAoBzyI,QAAQ/G,GAC5By5I,mBAAmBhxI,EAAAA,EAAAA,IAAyBlJ,EAAQ8+C,GACpDq7F,mBAAmBC,EAAAA,EAAAA,IAAwBp6I,GAC3Cq6I,oBAAoBC,EAAAA,EAAAA,IAAyBt6I,GAC7Cu6I,iBAAkB/yI,QAAQqL,EAAc1S,QACxCq6I,WAAYhzI,QAAQ2M,EAAQhU,QAC5BsgE,eACAlsD,mBACAkmI,sBAAuBjzI,QAAQiN,GAC/ByyC,8BACAjxC,4BACAC,0BACAwkI,oBAAoBjlG,EAAAA,EAAAA,IAAyBz1C,GAC7C63C,kBAAmBt8B,EAAcvb,EAAO43C,WAAWC,uBAAoBh3C,EACvE0U,iBACA2Z,WACA4qH,2BACAa,kBAAmBp/H,EAAc/T,QAAQxH,EAAO24C,gBAAa93C,EAC7D6rB,YAAa1sB,EAAO8R,SAASQ,MAAMC,OACnCqoI,oBAAqB56I,EAAOwS,aAAaF,MAAMC,OAC/CsoI,iBAAkBhrI,GAAYD,OAC9BkrI,wBAAyBjrI,GAAYC,gBACrCoF,aACAqgI,YACAwF,yBAA0BvzI,QAAQyxC,GAClClkC,kBACAimI,mBAAoBjmI,IAAmB8O,EAAAA,EAAAA,IAAW7jB,EAAQ+U,EAAgBJ,OAC1EsmI,mBAAoBp4G,GAA2BzF,IAC/C8F,2BACAd,SACA2b,cACApgB,UACApX,sBAAsBC,EAAAA,EAAAA,IAA2BxmB,GACjDk7I,mBAAoB94I,GAAcE,OAClC64I,aAAcnlI,GAAmBD,MACjCmuB,mBAAoBhrB,EAAQgrB,mBAC5Bk3G,mBAAoB5zI,QAAQ0R,EAAQmrB,SACpCm1G,qBAAsB/0I,EACtB8W,cACAvX,iBACD,GAzFe85C,EAnWoB19C,IA4ClC,IA5CmC,aACvCw3B,EAAY,SACZknB,EAAQ,iBACRk7F,EAAgB,mBAChBC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,mBACjBE,EAAkB,iBAClBE,EAAgB,WAChBC,EAAU,aACV/5E,EAAY,kBACZ5oB,EAAiB,iBACjBtjC,EAAgB,sBAChBkmI,EAAqB,4BACrBvzF,EAA2B,aAC3Bi0F,EAAY,0BACZllI,EAAyB,wBACzBC,EAAuB,mBACvBwkI,EAAkB,eAClBnlI,EAAc,SACd2Z,EAAQ,yBACR4qH,EAAwB,YACxBptH,EAAW,oBACXkuH,EAAmB,kBACnBD,EAAiB,iBACjBE,EAAgB,wBAChBC,EAAuB,WACvB5lI,EAAU,UACVqgI,EAAS,yBACTwF,EAAwB,gBACxBhmI,EAAe,mBACfimI,EAAkB,mBAClBC,EAAkB,yBAClB/3G,EAAwB,eACxBl/B,EAAc,OACdo+B,EAAM,YACN2b,EAAW,QACXpgB,EAAO,mBACPu9G,EAAkB,mBAClBh3G,EAAkB,mBAClBk3G,EAAkB,qBAClB70H,EAAoB,qBACpBizH,EAAoB,YACpBj+H,GACDnb,EACC,MAAM,SACJi7I,EAAQ,mBACRC,EAAkB,yBAClBC,GAAwB,2BACxBC,GAA0B,eAC1B9jI,GAAc,iBACd+jI,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtB7kG,GAAe,iBACf8kG,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjBrlG,GAAoB,uBACpBslG,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBnwG,GAAU,cACVowG,GAAa,eACb/+G,GAAc,gBACdg/G,GAAe,iBACf9vH,GAAgB,wBAChB+vH,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,SACf94I,GAAQ,iBACR++D,GAAgB,wBAChBhsB,GAAuB,gBACvBvzC,KACE0V,EAAAA,EAAAA,MAEA3B,EAAAA,MAAUyiI,KACZA,IAAiB,EAEjBxiI,QAAQ+d,IAAI,qBAId+pB,EAAAA,GAAAA,IAAW,MACJy9F,EAAAA,GAAAA,IAAWriG,GAAAA,GAAAA,MAAc,GA9FG,KAiGnC,MAAM,UAAEsiG,KAAc99F,EAAAA,EAAAA,OACtBnF,EAAAA,EAAAA,KAAU,KACHogG,GAAqBC,GAAuB4C,GAGtC7C,GAAoBC,GAAsBn7F,GAEnD8jB,KAHAA,IAIF,GACC,CAACi6E,GAAW7C,EAAkBC,EAAoBn7F,EAAU8jB,MAE/DioB,EAAAA,GAAAA,GAAY8xD,GAAiBphI,EA7GC,SA6GuC1a,GAAW,IAGhF+4C,EAAAA,EAAAA,KAAU,KACJhiB,GAAgBrc,IAClB7D,IAAe,GACfw0B,KACAowG,KACAjB,IACAQ,KACAP,IACAkB,KACAjB,KACAC,KACAE,KACAC,GAAkB,CAAEzsH,SAAU6zF,EAAAA,MAC9BxlF,KACAg/G,KACAT,KACAC,KACAE,KACAU,KACIp2H,GACFqwB,KAEJ,GACC,CACDhf,EAAc0jH,EAAoBK,GAAmBH,GAA4BD,GACjFG,GAAmBhkI,GAAgBmkI,GAAwBS,GAAe/+G,GAAgBg/G,GAC1FT,GAAkBa,GAAiBzwG,GAAYswG,GAAyBT,GACxEE,GAAwBrlG,GAAyBrwB,EAAsBhL,EAAa8/H,KAItFzhG,EAAAA,EAAAA,KAAU,KACJhiB,GAAgBrc,IACd2T,IAAa6zF,EAAAA,KACf44B,GAAkB,CAAEzsH,SAAUA,IAGhC0sH,GAAgB,CAAEkB,SAAU5tH,IAC9B,GACC,CAACA,EAAU0I,EAAcgkH,GAAiBD,GAAmBpgI,KAGhE6jC,EAAAA,GAAAA,IAAsBxxC,IAAwB,IAAtBmvI,GAAiBnvI,GAClCmvI,GAAoBnlH,GAAgBrc,GACvCkR,GAAiB,CACfxiB,IAAKnC,OAAOC,MAAKwB,EAAAA,EAAAA,MAAYiJ,aAAa6K,MAC1CoK,aAAa,GAEjB,GACC,CAACmQ,EAAcrc,EAAakR,MAG/BmtB,EAAAA,EAAAA,KAAU,KACJhiB,GAAgBrc,IACbmR,GAAgBkuH,IACnB5jG,KACAL,MAGEjqB,GAAekuH,GACjBoB,KAEJ,GACC,CACDpkH,EAAclL,EAAasqB,GAAiBL,GAAsBqlG,GAAmBpB,EACrFr/H,KAIFq+B,EAAAA,EAAAA,KAAU,KACJhiB,GAAgB8iH,GAAsBn/H,GACxC8gI,IACF,GACC,CAACzkH,EAAc8iH,EAAoB2B,GAA0B9gI,KAGhEq+B,EAAAA,EAAAA,KAAU,KACJhiB,IAAiBkiH,GACnBoC,IACF,GACC,CAACtkH,EAAckiH,EAA0BoC,MAG5CtiG,EAAAA,EAAAA,KAAU,KACR,MAAMojG,GAA4BC,EAAAA,EAAAA,MAC9BrlH,GAAgBolH,GAA2BE,SAC7CC,EAAAA,GAAAA,IAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,CAACtlH,KAEJwnB,EAAAA,GAAAA,IAAsB7iC,IAAwB,IAAtBwgI,GAAiBxgI,EACvC,MAAM8gI,GAAqBC,EAAAA,EAAAA,MACtBD,IAEAN,GAAoBnlH,GACvB/zB,GAAS,CACPjC,GAAIy7I,EAAmB58I,OACvBC,SAAU28I,EAAmB38I,SAC7BoB,KAAMu7I,EAAmBv7I,MAE7B,GACC,CAAC81B,EAAc/zB,KAElB,MAAM05I,IAAuB7zF,EAAAA,GAAAA,GAC3BswF,OAAkBn5I,GAAW,OAAMA,EAAWqmD,OAA6BrmD,GAAW,GAElF28I,IAA2Br/F,EAAAA,EAAAA,KAAO,GAClC6tC,IAAcC,EAAAA,GAAAA,MAGpBz7B,EAAAA,GAAAA,IAAcxzC,IAA4B,IAA1BygI,GAAqBzgI,EACnC,QAA6Bnc,IAAzB48I,GAAsCzD,IAAqByD,GAA2C,IAAnBloI,EACrF,OAGFioI,GAAyB5uH,SAAU,EAE/BuN,EAAAA,KACFw1D,EAAAA,EAAAA,KAAQ,KACNzhF,SAASg2B,KAAKwd,UAAUC,OAAO,8BAA+Bq2F,EAAiB,IAInF,MAAM0D,GAA4BtuC,EAAAA,GAAAA,OAElCuuC,EAAAA,GAAAA,GAAqBztI,SAAS8/C,eAAe,iBAAkB,KAC7D0tF,IACAF,GAAyB5uH,SAAU,EACnCo9D,IAAa,GACb,GACD,CAACguD,EAAkBzkI,EAAgBy2E,KAEtC,MAAM4xD,IAAwBl0F,EAAAA,GAAAA,GAC5BwwF,OAAmBr5I,GAAW,OAAMA,EAAWqmD,OAA6BrmD,GAAW,GAEnFg9I,IAA4B1/F,EAAAA,EAAAA,KAAO,IAClC2/F,GAAqBC,KAA0B3iG,EAAAA,EAAAA,IAAS8+F,IAG/D1pF,EAAAA,GAAAA,IAActzC,IAA6B,IAA3B8gI,GAAsB9gI,EACpC,QAA8Brc,IAA1Bm9I,GAAuC9D,IAAsB8D,EAC/D,OAGF,GAAuB,IAAnBzoI,EAEF,YADAwoI,GAAuB7D,GAIzB2D,GAA0BjvH,SAAU,EAEpC,MAAM8uH,GAA4BtuC,EAAAA,GAAAA,OAElCuuC,EAAAA,GAAAA,GAAqBztI,SAAS8/C,eAAe,gBAAiB,KAC5D0tF,IACAG,GAA0BjvH,SAAU,EACpCo9D,KACA+xD,GAAuB7D,EAAkB,GACzC,GACD,CAACA,EAAmB3kI,EAAgBy2E,KAEvC,MAAMt9D,IAAY2uB,EAAAA,GAAAA,GAChBkgG,GAAqBU,eAAiB,oBACtCV,GAAqBW,cAAgB,mBACrCV,GAAyB5uH,SAAW,wBACpCgvH,GAAsBK,eAAiB,qBACvCL,GAAsBM,cAAgB,oBACtCL,GAA0BjvH,SAAW,yBACrCkvH,IAAuB,sBACvB52F,GAA+B,8BAG3BqqE,IAAahyE,EAAAA,EAAAA,KAAY,KAC7Bk8F,GAAiB,CAAEhkI,WAAW,GAAO,GACpC,CAACgkI,KAEE3/C,IAAcv8C,EAAAA,EAAAA,KAAY,KAC9Bk8F,GAAiB,CAAEhkI,WAAW,IAEzBvH,SAASO,MAAMhG,SAAS2N,EAAAA,MAC3B/U,KAGF2M,GAAW,EAAM,GAChB,CAACyrI,GAAkBp4I,KAEhB86I,IAA6B5+F,EAAAA,EAAAA,KAAY,KAC7C48F,IAAsB,GACrB,CAACA,KAEEiC,IAAkC7+F,EAAAA,EAAAA,KAAY,KAClD68F,IAAsB,GACrB,CAACA,KAOJ,OAJA71C,EAAAA,GAAAA,GAAkBgrB,GAAYz1B,IAC9BpiD,GAAgB63E,I3LpbH,WAAwD,IAApBt2E,EAAU/6C,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,IAC3D05C,EAAAA,EAAAA,KAAU,KACR,GAAKttC,EAAAA,GAAL,CAIA,IAAI2uC,EAgBJ,OATApB,IAAcy6B,aAAa,UAAWv6B,IAKlCh6B,EAAAA,KAAW0iC,EAAAA,IACbvyC,SAASsrC,iBAAiB,eAAgBvB,IAGrC,KACLJ,IAAcy6B,aAAa,UAAW,yDAClCv0D,EAAAA,KAAW0iC,EAAAA,IACbvyC,SAASurC,oBAAoB,eAAgBxB,GAC/C,EAjBAJ,IAAcy6B,aAAa,UAXE,4EAM/B,CAuBC,GACA,CAACr5B,GACN,C2LwZEojG,CAA2BlE,GAGzB3/F,EAAAA,GAAAA,cAAA,OAAK54C,GAAG,OAAO8sB,UAAWA,IACxB8rB,EAAAA,GAAAA,cAAC8jG,GAAU,MACX9jG,EAAAA,GAAAA,cAAC+jG,GAAY,CAACz/F,SAAUA,IACxBtE,EAAAA,GAAAA,cAACgkG,GAAW,CAAC1/F,SAAUA,IACvBtE,EAAAA,GAAAA,cAACs5F,GAAW,CAACxxI,OAAQ63I,IACrB3/F,EAAAA,GAAAA,cAAC07F,GAAsB,CAAC5zI,OAAQ+3I,IAChC7/F,EAAAA,GAAAA,cAACm/F,GAAoB,CAAC31I,eAAgBA,IACtCw2C,EAAAA,GAAAA,cAACw7F,GAAa,CAAC1zI,OAAQi4I,IACvB//F,EAAAA,GAAAA,cAACy7F,GAAO,CAAC3zI,OAAQk4I,IAChB/5E,GAAgBjmB,EAAAA,GAAAA,cAACusB,GAAW,CAAC5vB,IAAKspB,EAAa7+D,GAAI6D,QAASg7D,EAAc3G,MAAI,IAC/Etf,EAAAA,GAAAA,cAAC27F,GAAa,CAAC7hI,IAAKC,IACpBimC,EAAAA,GAAAA,cAAC2+F,GAAY,CAACx7G,QAASA,EAASogB,YAAaA,IAC7CvD,EAAAA,GAAAA,cAAC47F,GAAe,CAAC9zI,OAAQm4I,IACzBjgG,EAAAA,GAAAA,cAACH,GAAe,CACd/3C,OAAQkF,QAAQyO,GAChBgqC,QAASk+F,GACTM,oBAAqBxoI,IAEvBukC,EAAAA,GAAAA,cAACk/F,GAAoB,CACnB7sH,kBAAmB3W,EACnB+pC,QAASm+F,KAEVvmG,GAAqB2C,EAAAA,GAAAA,cAAC67F,GAAS,CAAC99F,YAAaV,IAC9C2C,EAAAA,GAAAA,cAAC87F,GAAgB,CAACrlI,SAAUzJ,QAAQqwC,GAAqB8iG,KACzDngG,EAAAA,GAAAA,cAACo8F,GAAe,CACdt0I,OAAQkF,QAAQqzI,GAAoBC,GACpClrI,OAAQirI,EACR/qI,gBAAiBgrI,IAEnBtgG,EAAAA,GAAAA,cAACkkG,GAAS,CAACxpI,WAAYA,EAAYqgI,UAAWA,IAC9C/6F,EAAAA,GAAAA,cAACs8F,GAAW,CAAC10G,OAAQA,IACrBoY,EAAAA,GAAAA,cAACmkG,GAAe,MAChBnkG,EAAAA,GAAAA,cAACokG,GAAiB,MAClBpkG,EAAAA,GAAAA,cAAC+7F,GAAS,CAACtlI,SAAU0pI,IACrBngG,EAAAA,GAAAA,cAACqkG,GAAW,CAACpkG,eAAa,IAC1BD,EAAAA,GAAAA,cAACq8F,GAAkB,CAACv0I,OAAQy4I,IAC5BvgG,EAAAA,GAAAA,cAACu8F,GAAa,CAAC35G,IAAK49G,EAAoBl5I,KAAMiT,GAAiBjT,OAC/D04C,EAAAA,GAAAA,cAACw8F,GAAqB,CAAC55G,IAAK69G,IAC5BzgG,EAAAA,GAAAA,cAACo/F,GAAwB,CAAC12G,yBAA0BA,IACpDsX,EAAAA,GAAAA,cAACskG,GAAyB,MACzB5D,GAAsB1gG,EAAAA,GAAAA,cAAC4+F,GAAgB,CAAC92I,OAAQ44I,IACjD1gG,EAAAA,GAAAA,cAAC++F,GAAwB,CAACxjI,MAAOolI,IACjC3gG,EAAAA,GAAAA,cAAC6+F,GAAY,CAAC/2I,OAAQ4hC,EAAoB+b,QAASw8F,KACnDjiG,EAAAA,GAAAA,cAAC8+F,GAAY,CAACh3I,OAAQ84I,EAAoBn7F,QAASy8F,KACnDliG,EAAAA,GAAAA,cAACi/F,GAAkB,CAACD,qBAAsBA,IACtC,K,kEC5cV,MAqHA,IAAer/F,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB99C,IACQ,CACL++I,iBAAkB/+I,EAAOyY,YAHXqlC,EAnH0B19C,IAGxC,IAHyC,SAC7C4+I,EAAQ,iBACRD,GACD3+I,EACC,MAAM,aACJub,EAAY,QACZsjI,EAAO,wBACPrjI,EAAuB,2BACvBsjI,IACEnmI,EAAAA,EAAAA,OAEE,qBACJuC,EAAoB,aACpBQ,EAAY,UACZ9B,GACE+kI,EAEE95I,GAAOk3C,EAAAA,GAAAA,MACNgjG,EAAiBC,IAAsBhkG,EAAAA,EAAAA,IAAiB,KACxDikG,EAAoBC,IAAyBlkG,EAAAA,EAAAA,KAAS,IACtDmkG,EAAqBC,EAAyBC,IAA4BlhG,EAAAA,GAAAA,IAAQ,IACnF,aAAEgL,IAAiBG,EAAAA,GAAAA,GAAkBs1F,IAE3C7/F,EAAAA,GAAAA,GAAW+/F,EAA4BpjI,EAAeA,EAAepP,KAAKC,WAAQ9L,GAElF,MAAM6+I,GAAmBngG,EAAAA,EAAAA,KAAY,KACnC6/F,EAAmB,GAAG,GACrB,IAEGO,GAAepgG,EAAAA,EAAAA,KAAa9mC,SACX5X,IAAjBib,GAKJsjI,EAAmB,KACnB1jI,EAAAA,EAAAA,IAAejD,GAAU3B,KAAK6E,GAAc,KAC1CC,IACAwjI,EAAmBn6I,EAAK,sBAAsB,KAP9Cm6I,EAAmBn6I,EAAK,aAQxB,GACD,CAACA,EAAM6W,KAEV89B,EAAAA,EAAAA,KAAU,UACa/4C,IAAjBib,EACFsjI,EAAmBn6I,EAAK,cACU,IAAzBqW,GACT8jI,EAAmB,GACrB,GACC,CAACtjI,EAAc7W,EAAMqW,IAExB,MAAMskI,GAAuBrgG,EAAAA,EAAAA,KAAY,KACvCkgG,IACAR,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACJ,EAA0BR,IAE9B,GAAK11F,EAoBL,OACE/O,EAAAA,GAAAA,cAAA,OAAK9rB,UC7GmB,wBD8GtB8rB,EAAAA,GAAAA,cAAA,OAAK9rB,UC9GkD,uBD8GvB0tB,IAAKn3C,EAAKo3C,MAAQ,WAAQx7C,GACxD25C,EAAAA,GAAAA,cAACslG,GAAAA,EAAuB,CACtBnjE,OAAQojE,GAAAA,EAAAA,KACRC,WAAYC,GACZtjG,KAnFQ,IAoFRjuB,UCnHiF,yBDsHnF8rB,EAAAA,GAAAA,cAAC0lG,GAAAA,EAAY,CACX/oG,IAAI,gBACJgpG,kBAAgB,EAChBC,8BAA4B,EAC5BpmI,UAAWA,EACX1C,MAAO6nI,EACPh5F,YAAalhD,EAAK,qCAClBo7I,YAAap7I,EAAK,QAClBq7I,WAAYZ,EACZa,kBAAmBlB,EACnBmB,UAAQ,EACRC,2BAA4BnB,EAC5BoB,SAAUf,IApCdnlG,EAAAA,GAAAA,cAAA,OAAK9rB,UC9F8G,wBD+FjH8rB,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACmmG,GAAAA,EAAI,CAACzkG,QAASsjG,GAAyB,WAAe,IAAI,wCAG7DhlG,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,cAAcI,KAAK,OAAO0jB,QAAM,EAACnkB,QAASsjG,GACrDv6I,EAAK,8BAmCZu1C,EAAAA,GAAAA,cAACub,GAAAA,EAAa,CACZzzD,OAAQi9I,EACRt/F,QAASw/F,EACT37I,KAAMmB,EAAK,mBACX+wD,aAAc/wD,EAAK,0BACnBgxD,eAAgB2pF,EAChBt/E,sBAAoB,IAElB,KEzINlpD,EAAAA,KAEFC,QAAQ+d,IAAI,+BAGd,MAAQ3c,UAAU,eAAEC,IAAgB,gBAAEof,KAAoBvuB,EAAAA,EAAAA,MACrDuuB,IAAoBpf,IAAmBkoI,EAAAA,KAC1C7nI,EAAAA,EAAAA,MAAa0C,S","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user.fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isAuthRememberMe?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  isAuthRememberMe,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(isAuthRememberMe ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"char-K\"\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          <Spinner\n            color=\"blue\"\n            className={buildClassName(\n              styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n          <i\n            className={buildClassName(\n              'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slide-vertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slide-vertical-fade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (!pinnedMessage) return;\n\n    if (onFocusPinnedMessage(pinnedMessage.id)) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n    }\n  }, [pinnedMessage, threadId, onFocusPinnedMessage]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  viewportIds?: number[],\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, viewportIds,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage, selectCurrentMessageIds,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  viewportIds?: number[];\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  viewportIds,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.messages[album.messages.length - 1].id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, viewportIds);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        viewportIds: selectCurrentMessageIds(global, chatId, threadId, messageListType),\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' ? ['date', 'id'] : ['id'];\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [\n    updateStickyDates, hasTools, getForceNextPinnedInHeader, onPinnedIntersectionChange, type, chatId, threadId,\n  ]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n        && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={onIntersectionChanged}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  useTimeout(() => {\n    if (!isReady) {\n      setIsReady(true);\n    }\n  }, LAYER_ANIMATION_DURATION_MS);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { getGlobal } from '../../../global';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\n\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(chatId?: string, threadId?: number, pinnedIds?: number[]) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  }, [\n    chatId, threadId, key, pinnedIds, getLoadingPinnedId, getForceNextPinnedInHeader, setCurrentPinnedIndexes,\n    getCurrentPinnedIndexes, setLoadingPinnedId, setForceNextPinnedInHeader,\n  ]);\n\n  const onFocusPinnedMessage = useCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) return false;\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  }, [\n    chatId, getCurrentPinnedIndexes, getLoadingPinnedId, key, pinnedIds, setCurrentPinnedIndexes,\n    setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, animationLevel, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen, animationLevel, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","addCallback","getActions","isLockedUpdated","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","sliceSize","from","to","areSomeLocal","areAllLocal","sendMessage","params","_len3","_ref6","_key3","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","originChannelId","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","_ref7","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isAuthRememberMe","authRememberMe","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","hasArchivedChats","maxFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","LeftMain","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","useLayoutEffectWithPrevDeps","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","SMALL_IMAGE_THRESHOLD","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","selectOutgoingStatus","selectCurrentMessageIds","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","renderContent","CommentButton","InlineButtons","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","boundingClientRect","rootBounds","dataset","bottom","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","hasScrolled","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_QUICK_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","cycleRestrict","usePinnedMessage","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}