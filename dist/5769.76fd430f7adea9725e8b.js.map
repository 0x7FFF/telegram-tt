{"version":3,"file":"5769.76fd430f7adea9725e8b.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { isReactionChosen, isSameReaction } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiTypeReplyTo,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStory,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyUserId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyUserId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.userId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectUserStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadUserStories({ userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n  selectReplyingToId, selectSendAs, selectTabState, selectThreadTopMessageId, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || (isFromSideMenu && (bot?.isInactive || bot?.isDisclaimerNeeded));\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId, url } = payload;\n    actions.openChat({ id: chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules, getStoryKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForUser,\n  addUsers,\n  removeUserStory,\n  toggleUserStoriesHidden,\n  updateLastReadStoryForUser,\n  updateLastViewedStoryForUser,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n  updateUser,\n  updateUserPinnedStory,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!user || !userStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(userStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', {\n    user,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  const story = selectUserStory(global, userId, storyId);\n  if (!user || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForUser(global, userId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { user, storyId });\n  }\n\n  const isUnread = (global.stories.byUserId[userId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    user,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForUser(global, userId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { storyId } = payload;\n\n  const result = await callApi('deleteStory', { storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeUserStory(global, global.currentUserId!, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { storyId, isPinned } = payload;\n\n  const story = selectUserStory(global, global.currentUserId!, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updateUserStory(global, global.currentUserId!, storyId, { isPinned });\n  global = updateUserPinnedStory(global, global.currentUserId!, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updateUserStory(global, global.currentUserId!, storyId, { isPinned: currentIsPinned });\n    global = updateUserPinnedStory(global, global.currentUserId!, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStories', { user });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForUser(global, userId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadUserPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { userId, offsetId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserPinnedStories', { user, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { offsetId } = payload;\n  const currentUserId = global.currentUserId!;\n\n  const result = await callApi('fetchStoriesArchive', { currentUserId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, currentUserId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadUserStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { userId, storyIds } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', { user, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updateUserStory(global, global.currentUserId!, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    userId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    user,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    storyId,\n    privacy,\n  } = payload;\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { userId, isHidden } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('toggleStoriesHidden', { user, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = toggleUserStoriesHidden(global, userId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n  const users = userIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n  if (!users.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { users });\n  if (!result) return;\n\n  const userIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const user = users[i];\n    global = updateUser(global, user.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n    if (maxId !== 0) {\n      userIdsToLoad.push(user.id);\n    }\n  });\n  setGlobal(global);\n\n  userIdsToLoad?.forEach((userId) => actions.loadUserStories({ userId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const story = selectUserStory(global, userId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateUserStory(global, userId, storyId, {\n    sentReaction: reaction,\n  });\n  setGlobal(global);\n\n  const containerId = getStoryKey(userId, storyId);\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    user, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateUserStory(global, userId, storyId, {\n      sentReaction: previousReaction,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  return APP_VERSION_REGEX.test(remoteVersion) && remoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    storyUserId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyUserId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyUserId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForUser, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectTabState,\n  selectUser,\n  selectUserFirstStoryId,\n  selectUserFirstUnreadStoryId,\n  selectUserStories,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const userStories = selectUserStories(global, userId);\n\n  if (storyId && (!userStories || !userStories.byId[storyId])) {\n    const result = await callApi('fetchUserStoriesByIds', { user, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addStoriesForUser(global, userId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId,\n      storyId: storyId || selectUserFirstUnreadStoryId(global, userId) || selectUserFirstStoryId(global, userId),\n      isSingleUser,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    userId: chat.id,\n    storyId,\n    isSingleUser: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByUserIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedUserIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousUserId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousUserId = userId;\n  } else {\n    const previousUserIdIndex = orderedUserIds.indexOf(userId) - 1;\n    if (isSingleUser || previousUserIdIndex < 0) {\n      return undefined;\n    }\n\n    previousUserId = orderedUserIds[previousUserIdIndex];\n    previousStoryIndex = (selectUserStories(global, previousUserId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectUserStories(global, previousUserId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: previousUserId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextUserId: string;\n\n  if (currentStoryIndex < userStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextUserId = userId;\n  } else {\n    const nextUserIdIndex = orderedUserIds.indexOf(userId) + 1;\n    if (isSingleUser || nextUserIdIndex > orderedUserIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextUserId = orderedUserIds[nextUserIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectUserStories(global, nextUserId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: nextUserId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const link = await callApi('fetchStoryLink', { userId, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyUserId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, toggleUserStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const currentUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (currentUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = toggleUserStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForUser,\n  removeBlockedUser,\n  removeUserStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForUser,\n  updateStealthMode,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { selectUserStories, selectUserStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForUser(global, update.userId, { [update.story.id]: update.story });\n      global = updateUsersWithStories(global, { [update.userId]: selectUserStories(global, update.userId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removeUserStory(global, update.userId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForUser(global, update.userId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { userId, storyId, reaction } = update;\n      const story = selectUserStory(global, userId, storyId);\n      if (!story) return global;\n      global = updateUserStory(global, userId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedUserIds: {\n          archived: archivedStories,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_APP, IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTypeStory, ApiUser } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerColorKey,\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiUser | ApiChat;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getPeerColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {isFullStory && (\n            <i className=\"icon icon-story-reply\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPoll, ApiPollAnswer, ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectUserStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  user?: ApiUser;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, user, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      userId: story!.userId,\n      storyId: story!.id,\n      isSingleUser: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.userId, storyData!.id, story);\n\n  function getTitle() {\n    if (user?.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getUserFirstOrLastName(user));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n  const lastReadId = selectUserStories(global, userId)?.lastReadId;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    user: selectUser(global, userId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerColorKey,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n  selectUserStory,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getPeerColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <i className={`icon ${forwardInfo?.hiddenUserName ? 'icon-forward' : 'icon-share-filled'}`} />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectUserStory(global, webPageStoryData.userId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectUserStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStory,\n  ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadUserStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByUserIds = storyDataList.reduce((acc, storyData) => {\n      const { userId, id } = storyData!;\n      if (!acc[userId]) {\n        acc[userId] = [];\n      }\n      acc[userId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByUserIds).forEach(([userId, storyIds]) => {\n      loadUserStoriesByIds({ userId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadUserSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleUser: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.userId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} />\n        )}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStories,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useUserStoriesPolling from '../../hooks/polling/useUserStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadUserPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadUserStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadUserPinnedStories({ userId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ offsetId });\n  }, []);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadUserStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  useUserStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let hasStoriesTab;\n    let resolvedUserId;\n    let user;\n    let storyIds;\n    let archiveStoryIds;\n    let storyByIds;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      const userFullInfo = selectUserFullInfo(global, chatId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n      hasStoriesTab = user && (user.isSelf || (!user.areStoriesHidden && userFullInfo?.hasPinnedStories));\n      const userStories = hasStoriesTab ? selectUserStories(global, user!.id) : undefined;\n      storyIds = userStories?.pinnedIds;\n      storyByIds = userStories?.byId;\n      archiveStoryIds = userStories?.archiveIds;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","userId","storyUserId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectUserStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadUserStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","GAMEE_URL","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","userStories","updateUsersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectUserStories","skippedStoryIds","addStoriesForUser","updateLastViewedStoryForUser","serverTime","byUserId","lastReadId","updateLastReadStoryForUser","removeUserStory","currentIsPinned","updateUserStory","updateUserPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","toggleUserStoriesHidden","userIdsToLoad","maxStoryId","hasStories","previousReaction","sentReaction","getStoryKey","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","trim","test","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","sendAsMessage","isSingleUser","isSingleStory","isArchive","selectUserFirstUnreadStoryId","selectUserFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByUserIds","isShown","orderedUserIds","_userStories$storySou","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousUserId","previousUserIdIndex","previousStoryId","_userStories$storySou2","userStoryIds","nextStoryIndex","nextUserId","nextUserIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","React","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","Settings","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorKey","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","usersById","chatsById","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","MediaSpoiler","thumbDataUri","isVisible","formatMediaDuration","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","noLoop","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadUserStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByUserIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","spoiler","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","info","ChatlistModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadUserSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","hasStoriesTab","resolvedUserId","archiveStoryIds","storyByIds","userFullInfo","hasPinnedStories","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadUserPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadUserStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","useUserStoriesPolling","prevTabType","tabsEl","ProfileState","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Profile","SharedMedia","MemberList","StoryList","Search","StickerSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","filename","encodeURIComponent","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","Notifications","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","removeUpdateErrorListener","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}