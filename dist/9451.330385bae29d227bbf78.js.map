{"version":3,"file":"9451.330385bae29d227bbf78.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.module.scss?df39","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/AppendEntityPicker.module.scss?b380","webpack://telegram-t/./src/components/main/AppendEntityPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.module.scss?a8f0","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.module.scss?0072","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getSelectionAsFormattedText.ts","webpack://telegram-t/./src/components/common/PinMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.module.scss?c38f","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/isSelectionRangeInsideMessage.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiMessage, ApiPeer,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getMessageActionPhoto,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoAvatarMediaHash,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsDownloading,\n  selectIsMessageProtected,\n} from '../../global/selectors';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectTabState, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { ARE_WEBCODECS_SUPPORTED, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: ThreadId;\n  avatarOwner?: ApiPeer;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({ message, forcePlayback: true, isForMediaViewer: true });\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../api/types';\n\nimport { getSenderTitle } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectPeer,\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/date/dateFormat';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: selectPeer(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiPeer;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiPeer | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!]?.id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../global/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../global/types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium } : StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <i className=\"icon icon-eye-closed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-past', styles.icon)} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-future', styles.icon)} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getSenderTitle, getUserFullName } from '../../global/helpers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getSenderTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport {\n  getSenderTitle,\n  isUserId,\n} from '../../../global/helpers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../Icon';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const showMoreButtonRef = useRef<HTMLDivElement>(null);\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransition(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      if (!showMoreButtonRef.current) {\n        return;\n      }\n\n      const button = showMoreButtonRef.current;\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        button.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const lineHeight = parseInt(getComputedStyle(textContainer).lineHeight, 10);\n      const isOverflowing = textContainer.clientHeight > lineHeight * LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport { getStoryKey, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && 'emoticon' in sentReaction\n    ? sentReaction.emoticon === HEART_REACTION.emoticon : false;\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}><Icon name=\"channelviews\" className={styles.viewIcon} />{viewsCount}</span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={'documentId' in sentReaction ? sentReaction.documentId : sentReaction.emoticon}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { getSenderTitle, isChatChannel, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativeTime } from '../../util/date/dateFormat';\nimport download from '../../util/download';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport { IS_SAFARI } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getSenderTitle(lang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.usernames?.length,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransition(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: peerId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getSenderTitle(lang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: lang('StealthModeOn'),\n        message: lang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className={buildClassName('icon icon-more')} aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isOut && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getSenderTitle(lang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getSenderTitle(lang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {lang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {lang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {lang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-closed-outline\" onClick={handleOpenStealthModal}>\n                {lang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('lng_report_story')}</MenuItem>}\n            {isOut && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className={buildClassName('icon icon-close')} aria-hidden />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay story={story} isActive />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getSenderTitle, getStoryMediaHash } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSignal from '../../hooks/useSignal';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePrevious(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | null, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isReportModalOpen={isReportModalOpen}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName, isUserId } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story!.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews!.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <i className={buildClassName(\n          'icon',\n          areReactionsFirst ? 'icon-heart-outline' : 'icon-recent',\n          styles.iconSort,\n        )}\n        />\n        <i className={buildClassName('icon icon-down', styles.iconDown)} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              // eslint-disable-next-line react/no-array-index-key\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePrevious(isOpen);\n  const prevBestImageData = usePrevious(bestImageData);\n  const prevPeerId = usePrevious(peerId);\n  const prevOrigin = usePrevious(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className={buildClassName('icon icon-close')} aria-hidden />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        peerId={peerId!}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const topicsResult = forumId ? chatsById[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById[forumId!], topic.id, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfoById[id]);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: Number(threadId) });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { prepareMapUrl } from '../../../util/map';\nimport { IS_IOS, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"eha3Z6eU\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/date/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        closeWebApp();\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport type { PopupOptions, WebAppInboundEvent } from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst LUMA_THRESHOLD = 128;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [isSettingsButtonVisible, setIsSettingsButtonVisible] = useState(false);\n\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n\n  const [shouldConfirmClosing, setShouldConfirmClosing] = useState(false);\n  const [isCloseModalOpen, openCloseModal, hideCloseModal] = useFlag(false);\n  const [isRemoveModalOpen, openRemoveModal, hideRemoveModal] = useFlag(false);\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequesingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyInfo,\n  } = modal || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyInfo,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(modal!.url);\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (shouldConfirmClosing) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (modal?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: modal.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, modal?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeWebApp();\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      openRemoveModal();\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    const result = await callApi('allowBotSendMessages', { bot: bot! });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot: bot!,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n\n      setShouldConfirmClosing(false);\n      hideCloseModal();\n      hideRemoveModal();\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setIsSettingsButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      setIsSettingsButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      if (eventData.color_key) {\n        const themeParams = extractCurrentThemeParams();\n        const key = eventData.color_key;\n        const newColor = themeParams[key];\n        const color = validateHexColor(newColor) ? newColor : headerColor;\n        setHeaderColor(color);\n      }\n\n      if (eventData.color) {\n        const color = validateHexColor(eventData.color) ? eventData.color : headerColor;\n        setHeaderColor(color);\n      }\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setShouldConfirmClosing(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n      || eventData.buttons.length > 3 || isRequestingPhone || isRequesingWriteAccess\n      || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequesingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n  }\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.moreButton, isMenuOpen && 'active')}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme]);\n\n  function renderHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {isSettingsButtonVisible && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        text={lang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequesingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={lang('lng_bot_allow_write_title')}\n        text={lang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={lang('lng_bot_allow_write_confirm')}\n      />\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={hideCloseModal}\n        title={lang('lng_bot_close_warning_title')}\n        text={lang('lng_bot_close_warning')}\n        confirmHandler={closeWebApp}\n        confirmIsDestructive\n        confirmLabel={lang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={hideRemoveModal}\n        title={lang('BotRemoveFromMenuTitle')}\n        textParts={renderText(lang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { botId } = modal || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  icon: string;\n  isFontIcon?: boolean;\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <i\n          className={buildClassName(styles.fontIcon, `icon icon-${icon}`)}\n          aria-hidden\n          style={`--item-color: rgb(${r},${g},${b})`}\n        />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport Button from '../ui/Button';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, `icon-${floatingBadgeIcon}`, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import React, { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-closed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = 5.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type { ApiPremiumPromo, ApiPremiumSubscriptionOption } from '../../../api/types';\nimport type { ApiLimitTypeForPromo, ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium ? lang('OK') : lang('SubscribeToPremium', formatCurrency(perMonthPrice, currency, lang.code));\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {subscriptionButtonText && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumGiftOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const lang = useLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={lang('GiftDiscount')}\n            > &minus;{discount}%\n            </span>\n          )}\n          {lang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrency(amount, currency, lang.code)} x ${users!}`\n            : lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrency(amount, currency, lang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const stickerSetTitle = useMemo(() => {\n    if (!fromUserStatusSet || !fromUser) return undefined;\n\n    const template = lang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n    const [first, second] = template.split('{link}');\n\n    const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n      <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n    ) : undefined;\n    const link = (\n      <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n        {emoji}{renderText(fromUserStatusSet.title)}\n      </span>\n    );\n    return [renderText(first), link, renderText(second)];\n  }, [fromUser, fromUserStatusSet, lang]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      perMonthPrice,\n      currency,\n      lang.code,\n    );\n  }, [selectedSubscriptionOption, lang.code]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return lang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            {fromUserStatusEmoji ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {fromUserStatusSet ? stickerSetTitle : renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"PMXzSiTT\",\"closeButton\":\"j3gx2vFZ\",\"avatars\":\"yIKcy5ir\",\"center\":\"EIXAUV27\",\"description\":\"TJy4zGvM\",\"premiumFeatures\":\"JqQfM_r9\",\"options\":\"eXU0NjiF\",\"boostIcon\":\"ZsR31o4m\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n} from '../../../api/types';\n\nimport { BOOST_PER_SENT_GIFT } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Modal from '../../ui/Modal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  isCompleted?: boolean;\n  gifts?: ApiPremiumGiftCodeOption[] | undefined;\n  forUserIds?: string[];\n  boostPerSentGift?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isCompleted,\n  gifts,\n  boostPerSentGift = BOOST_PER_SENT_GIFT,\n  forUserIds,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const {\n    openPremiumModal, closeGiftPremiumModal, openInvoice, requestConfetti,\n  } = getActions();\n\n  const lang = useLang();\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n\n  const selectedUserQuantity = forUserIds && forUserIds.length * boostPerSentGift;\n\n  useEffect(() => {\n    if (forUserIds?.length) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [gifts, forUserIds]);\n\n  const giftingUserList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => usersById[userId]).filter(Boolean);\n  }, [forUserIds]);\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === forUserIds?.length);\n  }, [gifts, selectedMonthOption, forUserIds?.length]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === forUserIds?.length);\n  }, [gifts, forUserIds?.length]);\n\n  const fullMonthlyGiftAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const handleSubmit = useLastCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: forUserIds!,\n      currency: selectedGift!.currency,\n      amount: selectedGift!.amount,\n      option: selectedGift!,\n    });\n  });\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isCompleted) {\n      showConfetti();\n    }\n  }, [isCompleted, showConfetti]);\n\n  const userNameList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [forUserIds]);\n\n  function renderGiftTitle() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle',\n        [userNameList, selectedGift?.months]), ['simple_markdown']);\n    }\n\n    return lang('GiftTelegramPremiumTitle');\n  }\n\n  function renderGiftText() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', userNameList),\n        ['simple_markdown']);\n    }\n    return renderText(lang('GiftPremiumUsersGiveAccessManyZero', userNameList), ['simple_markdown']);\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={buildClassName(styles.premiumFeatures, styles.center)}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function renderBoostsPluralText() {\n    const giftParts = renderText(lang('GiftPremiumWillReceiveBoostsPlural', selectedUserQuantity), ['simple_markdown']);\n    return giftParts.map((part) => {\n      if (typeof part === 'string') {\n        return part.split(/(⚡)/g).map((subpart) => {\n          if (subpart === '⚡') {\n            return <Icon name=\"boost\" className={styles.boostIcon} />;\n          }\n          return subpart;\n        });\n      }\n      return part;\n    });\n  }\n\n  function renderSubscriptionGiftOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={gift.months}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyGiftAmount}\n              checked={gift.months === selectedMonthOption}\n              onChange={setSelectedMonthOption}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={styles.avatars}>\n          <AvatarList\n            size=\"large\"\n            peers={giftingUserList}\n          />\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={buildClassName(styles.description, styles.center)}>\n          {renderGiftText()}\n        </p>\n        {!isCompleted && (\n          <>\n            <p className={styles.description}>\n              {renderText(renderBoostsPluralText(), ['simple_markdown', 'emoji'])}\n            </p>\n\n            <div className={styles.options}>\n              {renderSubscriptionGiftOptions()}\n            </div>\n          </>\n        )}\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      {!isCompleted && (\n        <Button withPremiumGradient className={styles.button} isShiny disabled={!selectedGift} onClick={handleSubmit}>\n          {lang(\n            'GiftSubscriptionFor', selectedGift\n            && formatCurrency(selectedGift!.amount, selectedGift.currency, lang.code),\n          )}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    gifts, forUserIds, isCompleted,\n  } = selectTabState(global).giftPremiumModal || {};\n\n  return {\n    isCompleted,\n    gifts,\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    forUserIds,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './Icon';\nimport Picker from './Picker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePrevious(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList\n      .filter((country) => !country.isHidden)\n      .map((country) => country.iso2);\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <Picker\n          className={styles.picker}\n          itemIds={displayedIds}\n          selectedIds={selectedCountryIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          isCountryList\n          countryList={countryList}\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fAO_fMJD\",\"main\":\"vtyWYWNc\",\"filter\":\"OM3FgjkD\",\"title\":\"d3EvpDij\",\"buttons\":\"w2D1Ddo7\",\"picker\":\"dWDj6lW6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUserStatus } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName, isChatChannel, isChatPublic, isChatSuperGroup, isUserBot, sortUserIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Picker from '../common/Picker';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Modal from '../ui/Modal';\n\nimport styles from './AppendEntityPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  chatId?: string;\n  entityType: 'members' | 'channels' | undefined;\n  onSubmit: (value: string[]) => void;\n  selectionLimit: number;\n};\n\ninterface StateProps {\n  chatId?: string;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  channelList?: (ApiChat | undefined)[] | undefined;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  currentUserId?: string | undefined;\n}\n\nconst AppendEntityPickerModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  onClose,\n  members,\n  adminMembersById,\n  userStatusesById,\n  entityType,\n  isChannel,\n  isSuperGroup,\n  onSubmit,\n  currentUserId,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const channelsIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const activeChatIds = getGlobal().chats.listIds.active;\n\n    return activeChatIds!.map((id) => chatsById[id])\n      .filter((chat) => chat && (isChatChannel(chat)\n        || isChatSuperGroup(chat)) && chat.id !== chatId)\n      .map((chat) => chat!.id);\n  }, [chatId]);\n\n  const adminIds = useMemo(() => {\n    return adminMembersById && Object.keys(adminMembersById);\n  }, [adminMembersById]);\n\n  const memberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return adminIds ? userIds.filter((userId) => userId !== currentUserId) : userIds;\n  }, [adminIds, currentUserId, members, userStatusesById]);\n\n  const displayedMembersIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = memberIds ? filterUsersByName(memberIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const displayedChannelIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const foundChannelIds = channelsIds ? filterChatsByName(lang, channelsIds, chatsById, searchQuery) : [];\n\n    return sortChatIds(unique(foundChannelIds).filter((contactId) => {\n      const chat = chatsById[contactId];\n      if (!chat) {\n        return true;\n      }\n\n      return isChannel || isSuperGroup;\n    }),\n    false,\n    selectedIds);\n  }, [channelsIds, lang, searchQuery, selectedIds, isSuperGroup, isChannel]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  const handleSendIdList = useLastCallback(() => {\n    onSubmit(selectedIds);\n    onClose();\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds((prevIds) => unique([...prevIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const handleClose = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleCloseButtonClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang(entityType === 'channels'\n          ? 'RequestPeer.ChooseChannelTitle' : 'BoostingAwardSpecificUsers')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={entityType === 'members' ? displayedMembersIds : displayedChannelIds}\n            selectedIds={selectedIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId={`${entityType}-picker-search`}\n            onSelectedIdsChange={entityType === 'channels'\n              ? handleSelectedChannelIdsChange : handleSelectedMemberIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button size=\"smaller\" onClick={handleSendIdList}>\n            {lang('Save')}\n          </Button>\n        </div>\n      </div>\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { chatId, entityType }): StateProps => {\n  const { statusesById: userStatusesById } = global.users;\n  let isChannel;\n  let isSuperGroup;\n  let members: ApiChatMember[] | undefined;\n  let adminMembersById: Record<string, ApiChatMember> | undefined;\n  let currentUserId: string | undefined;\n\n  if (entityType === 'members') {\n    currentUserId = global.currentUserId;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    if (chatFullInfo) {\n      members = chatFullInfo.members;\n      adminMembersById = chatFullInfo.adminMembersById;\n    }\n  } if (entityType === 'channels') {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (chat) {\n      isChannel = isChatChannel(chat);\n      isSuperGroup = isChatSuperGroup(chat);\n    }\n  }\n\n  return {\n    chatId,\n    members,\n    adminMembersById,\n    userStatusesById,\n    isChannel,\n    isSuperGroup,\n    currentUserId,\n  };\n})(AppendEntityPickerModal));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'random_users' | 'specific_users';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? `${selectedMemberIds.length}` : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(`${name}`)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry, ApiPremiumGiftCodeOption, ApiPrepaidGiveaway, ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport AppendEntityPickerModal from '../AppendEntityPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiveawayUsersRound from '../../../assets/premium/GiveawayUsersRound.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiPrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n};\n\ntype GiveawayAction = 'createRandomlyUsers' | 'createSpecificUsers';\ntype ApiGiveawayType = 'random_users' | 'specific_users';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway,\n  } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isEntityPickerModalOpen, openEntityPickerModal, closeEntityPickerModal] = useFlag();\n  const [entityType, setEntityType] = useState<'members' | 'channels' | undefined>(undefined);\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'BoostingCreateGiveaway',\n    text: 'BoostingWinnersRandomly',\n    value: 'random_users',\n    img: GiftBlueRound,\n    actions: 'createRandomlyUsers',\n    isLink: false,\n  }, {\n    name: 'BoostingAwardSpecificUsers',\n    text: 'BoostingSelectRecipients',\n    value: 'specific_users',\n    img: GiveawayUsersRound,\n    actions: 'createSpecificUsers',\n    isLink: true,\n    onClickAction: () => {\n      openEntityPickerModal();\n      setEntityType('members');\n    },\n  }];\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedUserCount, setSelectedUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountriesIds, setSelectedCountriesIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const isRandomUsers = selectedGiveawayOption === 'random_users';\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountriesIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n\n  const selectedGift = useMemo(() => {\n    return gifts!.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === (selectedUserIds?.length ? selectedUserIds?.length : selectedUserCount));\n  }, [gifts, selectedUserIds, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    const uniqueUserCounts = new Set(gifts?.map((gift) => gift.users));\n    return Array.from(uniqueUserCounts).sort((a, b) => a - b);\n  }, [gifts]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedMonthOption(prepaidGiveaway ? prepaidGiveaway.months : gifts?.[0].months);\n    }\n  }, [gifts, isOpen, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (prepaidGiveaway) {\n      setSelectedUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openInvoice({\n        type: 'giftcode',\n        boostChannelId: chatId!,\n        userIds: selectedUserIds,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    } else {\n      openInvoice({\n        type: 'giveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountriesIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    }\n\n    closeGiveawayModal();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    launchPrepaidGiveaway({\n      chatId: chatId!,\n      giveawayId: dataPrepaidGiveaway!.id,\n      paymentPurpose: {\n        additionalChannelIds: selectedChannelIds,\n        countries: selectedCountriesIds,\n        prizeDescription,\n        areWinnersVisible: shouldShowWinners,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n      },\n    });\n\n    closeConfirmModal();\n    closeGiveawayModal();\n  });\n\n  const handleUserCountChange = useLastCallback((newValue) => {\n    setSelectedUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  const handleAdd = useLastCallback(() => {\n    openEntityPickerModal();\n    setEntityType('channels');\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountriesIds(value);\n  });\n\n  const handleSetIdsListChange = useLastCallback((value: string[]) => {\n    return entityType === 'members'\n      ? (value?.length ? setSelectedUserIds(value) : setGiveawayOption('random_users'))\n      : setSelectedChannelIds(value);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiveawayModal();\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  if (!gifts) return undefined;\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount!}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {dataPrepaidGiveaway ? (\n          <div className={styles.status}>\n            <div>\n              <img className={styles.prepaidImg} src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway.months]} alt=\"\" />\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway.quantity)}\n              </h3>\n              <p className={styles.month}>{lang('PrepaidGiveawayMonths', dataPrepaidGiveaway.months)}</p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataPrepaidGiveaway.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isRandomUsers && (\n          <>\n            {!dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingChannelsIncludedGiveaway')}\n              </h2>\n\n              <ListItem\n                inactive\n                className=\"chat-item-clickable contact-list-item\"\n              >\n                <GroupChatInfo\n                  chatId={chatId!}\n                  status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                    : 'BoostingGroupWillReceiveBoost', boostQuantity, 'i')}\n                />\n              </ListItem>\n\n              {selectedChannelIds?.map((channelId) => {\n                return (\n                  <ListItem\n                    ripple\n                    key={channelId}\n                    className=\"chat-item-clickable contact-list-item\"\n                    /* eslint-disable-next-line react/jsx-no-bind */\n                    onClick={() => deleteParticipantsHandler(channelId)}\n                    rightElement={(<Icon name=\"close\" />)}\n                  >\n                    <GroupChatInfo\n                      chatId={channelId.toString()}\n                    />\n                  </ListItem>\n                );\n              })}\n\n              {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n                <ListItem\n                  icon=\"add\"\n                  ripple\n                  onClick={handleAdd}\n                  className={styles.addButton}\n                  iconClassName={styles.addChannel}\n                >\n                  {lang('BoostingAddChannelOrGroup')}\n                </ListItem>\n              )}\n            </div>\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingEligibleUsers')}\n              </h2>\n\n              {renderSubscribersOptions()}\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n            </div>\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayAdditionalPrizes')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowPrizes}\n                  onChange={handleShouldShowPrizesChange}\n                />\n              </div>\n\n              {shouldShowPrizes && (\n                <div className={styles.prizesSection}>\n                  <h2 className={styles.title}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : selectedUserCount}\n                  </h2>\n                  <InputText\n                    className={styles.prizesInput}\n                    value={prizeDescription}\n                    onChange={handlePrizeDescriptionChange}\n                    label={lang('BoostingGiveawayEnterYourPrize')}\n                  />\n                </div>\n              )}\n            </div>\n\n            {shouldShowPrizes ? (\n              <div className={styles.subscription}>\n                {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                    : [selectedUserCount, prizeDescription, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                    : [selectedUserCount, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown'])}\n              </div>\n            ) : (\n              <div className={styles.subscription}>\n                {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n              </div>\n            )}\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayShowWinners')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowWinners}\n                  onChange={handleShouldShowWinnersChange}\n                />\n              </div>\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n            </div>\n\n            <div className={buildClassName(styles.section, dataPrepaidGiveaway && styles.subscriptionFooter)}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDateWhenGiveawayEnds')}\n              </h2>\n\n              <Button\n                ariaLabel={lang('BoostGift.DateEnds')}\n                className={buildClassName(styles.dateButton, 'expire-limit')}\n                isText\n                onClick={openCalendar}\n              >\n                <h3 className={styles.title}>\n                  {lang('BoostGift.DateEnds')}\n                </h3>\n                {formatDateTimeToString(customExpireDate, lang.code)}\n              </Button>\n            </div>\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button className={styles.button} onClick={dataPrepaidGiveaway ? openConfirmModal : handleClick}>\n              {lang('BoostingStartGiveaway')}\n              <div className={styles.quantity}>\n                <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n                  <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                  <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : boostQuantity}\n                  </div>\n                </div>\n              </div>\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <AppendEntityPickerModal\n        key={entityType}\n        isOpen={isEntityPickerModalOpen}\n        onClose={closeEntityPickerModal}\n        entityType={entityType}\n        chatId={chatId}\n        onSubmit={handleSetIdsListChange}\n        selectionLimit={entityType === 'members' ? userSelectionLimit : GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n  };\n})(GiveawayModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKwZp5xA\",\"main\":\"bo8ICYep\",\"filter\":\"HK8ZNKHl\",\"title\":\"LUU19p8W\",\"buttons\":\"CdZFeuxb\",\"picker\":\"JBzw9a0l\",\"avatars\":\"UAhbe3L3\",\"center\":\"JZ7y_T5c\",\"description\":\"OySCJvvR\",\"premiumFeatures\":\"CrYMy2g6\",\"options\":\"IRkNlxtz\",\"button\":\"HIPk0a6e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GIVEAWAY_MAX_ADDITIONAL_CHANNELS } from '../../../config';\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PremiumGiftingModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst PremiumGiftingModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  userIds,\n}) => {\n  const { closePremiumGiftingModal, openGiftPremiumModal, showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = userIds ? filterUsersByName(userIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user) && userId !== currentUserId;\n    }));\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSendIdList = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openGiftPremiumModal({ forUserIds: selectedUserIds });\n\n      closePremiumGiftingModal();\n    }\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > userSelectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', userSelectionLimit),\n      });\n      return;\n    }\n    setSelectedUserIds(newSelectedIds);\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closePremiumGiftingModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang('GiftTelegramPremiumTitle')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closePremiumGiftingModal}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={displayedUserIds}\n            selectedIds={selectedUserIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId=\"users-picker-search\"\n            onSelectedIdsChange={handleSelectedUserIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button withPremiumGradient size=\"smaller\" onClick={handleSendIdList} disabled={!selectedUserIds?.length}>\n            {lang('Continue')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(PremiumGiftingModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <Icon name=\"double-badge\" className={styles.x2} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const hasOnlyStaticThumb = hasStaticThumb && !hasVideoThumb && !hasAnimatedThumb && !thumbCustomEmojiId;\n\n  const shouldFallbackToStatic = hasOnlyStaticThumb || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb);\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTimeOffset } from '../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, !hasCustomColor);\n\n  const {\n    id, isCustomEmoji, hasEffect: isPremium, stickerSetInfo,\n  } = sticker;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuPosition);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n\n  const getLayout = () => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true });\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      openPremiumModal({ initialSection: 'premium_stickers' });\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: sticker,\n      expires: Date.now() / 1000 + duration + getServerTimeOffset(),\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <i className=\"icon icon-lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <i className=\"icon icon-premium\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lu0K9UZP\",\"selected\":\"UF8XKO4C\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport CustomEmoji from './CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport ReactionEmoji from './ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID\n    && !isChatEmojiSet && !isChatStickerSet;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiReaction, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateInFuture } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, chat);\n  }, [chat, lang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, prevBoostedChat);\n  }, [prevBoostedChat, lang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: lang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = lang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = lang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? lang('BoostChannel') : lang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = lang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = lang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = lang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = lang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, lang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {lang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {lang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : lang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(lang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {lang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {lang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={lang('OK')}\n          title={lang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            lang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatDateInFuture(lang, getServerTime(), boost!.cooldownUntil),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={lang('Common.Yes')}\n          title={lang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(lang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"M9b5KmrN\",\"clickable\":\"IzcASdzD\",\"title\":\"_dRihuUh\",\"table\":\"VkcHpgVG\",\"chat-item\":\"imIhcLMN\",\"chatItem\":\"imIhcLMN\",\"logo\":\"Mtx4SWww\",\"centered\":\"xVLGjLub\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport LinkField from '../../common/LinkField';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, openChat, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    closeGiftCodeModal();\n  });\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  function renderContent() {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    return (\n      <>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n        <table className={styles.table}>\n          <tr>\n            <td className={styles.title}>{lang('BoostingFrom')}</td>\n            <td>\n              {fromId ? (\n                <PickerSelectedItem\n                  peerId={fromId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={fromId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingTo')}\n            </td>\n            <td>\n              {info.toId ? (\n                <PickerSelectedItem\n                  peerId={info.toId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={info.toId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingGift')}\n            </td>\n            <td>\n              {lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingReason')}\n            </td>\n            <td className={buildClassName(info.giveawayMessageId && styles.clickable)} onClick={handleOpenGiveaway}>\n              {info.isFromGiveaway && !info.toId ? lang('BoostingIncompleteGiveaway')\n                : lang(info.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingYouWereSelected')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingDate')}\n            </td>\n            <td>\n              {formatDateTimeToString(info.date * 1000, lang.code, true)}\n            </td>\n          </tr>\n        </table>\n        <span className={styles.centered}>\n          {renderText(\n            info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n              : lang('BoostingSendLinkToAnyone'),\n            ['simple_markdown'],\n          )}\n        </span>\n        <Button onClick={handleButtonClick}>\n          {canUse ? lang('BoostingUseLink') : lang('Close')}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      isSlim\n      title={lang('lng_gift_link_title')}\n      contentClassName={styles.content}\n      onClose={closeGiftCodeModal}\n    >\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePrevious(modal) || modal;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"FqyZSYhX\",\"description\":\"DkalJSBt\",\"secondary\":\"xNUKKd8T\",\"separator\":\"kiRrTaj3\",\"topIcon\":\"PKnc2DV2\",\"content\":\"qxOr0JyQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLang from '../../hooks/useLang';\nimport useSelectorSignal from '../../hooks/useSelectorSignal';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport Icon from './Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isRevenueSharing?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  isRevenueSharing,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  const minLevelSignal = useSelectorSignal((global) => global.appConfig?.channelRestrictAdsLevelMin);\n  const minLevelToRestrictAds = useDerivedState(minLevelSignal);\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{lang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={lang('SponsoredMessageAlertLearnMoreUrl')}\n            text={lang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [lang]);\n\n  const revenueSharingAdContent = useMemo(() => {\n    return (\n      <>\n        <div className={styles.topIcon}><Icon name=\"channel\" /></div>\n        <h3 className={styles.title}>{lang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {lang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"lock\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo1Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"revenue-split\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo2Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"nochannel\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo3Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <Separator className={styles.separator} />\n        <h3 className={styles.title}>{renderText(lang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(lang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={lang('PromoteUrl')}\n            text={lang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n  }, [lang, minLevelToRestrictAds]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {isRevenueSharing ? revenueSharingAdContent : regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={onClose}\n      >\n        {lang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 40;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsoredMessage, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsoredMessage({ chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink text={lang('lng_report_sponsored_reported_link')} url={lang('ReportAd.Help_URL')} />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/Icon';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal!.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrency(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrency(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PickerSelectedItem\n        fluid\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/date/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getPrivateChatUserId, isUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyExceptions,\n  selectNotifySettings, selectUser,\n} from '../../../global/selectors';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"large\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"large\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountChatIds?: string[];\n  accountUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountChatIds,\n  accountUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterChatsByName(lang, filteredChatIds, chatsById, searchQuery, currentUserId);\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    const localPeerIds = unique([\n      ...localContactIds,\n      ...localChatIds,\n    ]);\n\n    const accountPeerIds = unique([\n      ...(accountChatIds ?? []),\n      ...(accountUserIds ?? []),\n    ].filter((accountPeerId) => !localPeerIds.includes(accountPeerId)));\n\n    return [\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds),\n    ];\n  }, [searchQuery, lang, currentUserId, contactIds, accountChatIds, accountUserIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const ids = unique([...globalChatIds, ...globalUserIds]);\n    const filteredIds = ids.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalChatIds, globalUserIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate && !isChannelList) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              peerId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: accountChatIds, userIds: accountUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountChatIds,\n      accountUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/date/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.ChannelList, title: 'ChannelsTab' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(2), // Skip ChatList and ChannelList, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = chatId ? CHAT_TABS : TABS;\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport Checkbox from '../../../ui/Checkbox';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            peerId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\n\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport Loading from '../../../ui/Loading';\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport LinkField from '../../../common/LinkField';\nimport Picker from '../../../common/Picker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? lang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedSelectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n};\n\nfunction PrivacyLockedOption({ label }: OwnProps) {\n  const lang = useLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={styles.contactsAndPremiumOptionTitle}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_and_premium_option-title\":\"TGUdGos3\",\"contactsAndPremiumOptionTitle\":\"TGUdGos3\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { selectIsCurrentUserPremium, selectNewNoncontactPeersRequirePremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  shouldNewNonContactPeersRequirePremium,\n  isCurrentUserPremium,\n  onReset,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings } = getActions();\n  const lang = useLang();\n\n  const canChange = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChange ? (\n          lang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption label={lang('PrivacyMessagesContactsAndPremium')} />\n        ),\n        hidden: !canChange,\n      },\n    ];\n  }, [lang, canChange]);\n\n  const handleChange = useLastCallback((privacy: string) => {\n    updateGlobalPrivacySettings({ shouldNewNonContactPeersRequirePremium: privacy === 'contacts_and_premium' });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={shouldNewNonContactPeersRequirePremium ? 'contacts_and_premium' : 'everybody'}\n        />\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Privacy.Messages.SectionFooter')}\n        </p>\n      </div>\n      {!canChange && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition, unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\",\"checkbox\":\"obmoCKjY\",\"languages\":\"BccnzXwC\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/username';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti({})}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('GeneralSettings.StatusBarItem')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{lang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{lang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{lang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiLanguage } from '../../../api/types';\nimport type { ISettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n}) => {\n  const {\n    loadProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openPremiumGiftingModal,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumGiftingModal()}\n          >\n            {lang('GiftPremiumGifting')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('TelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('PrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('lng_settings_ask_ok')}\n        title={lang('AskAQuestion')}\n        text={lang('lng_settings_ask_sure')}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedUsers();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, []);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility, shouldAllowPremium } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    if (shouldAllowPremium) {\n      return lang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBio)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBirthday)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyVoiceMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldNewNonContactPeersRequirePremium\n                ? lang('PrivacyMessagesContactsAndPremium')\n                : lang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle, shouldNewNonContactPeersRequirePremium,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n  }\n\n  return undefined;\n}\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onScreenSelect,\n  onReset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        onScreenSelect={onScreenSelect}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {secondaryScreen && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n          onScreenSelect={onScreenSelect}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  onScreenSelect,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n}) {\n  const { setPrivacyVisibility } = getActions();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PContacts')} />\n        ) : (\n          lang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PNobody')} />\n        ) : (\n          lang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [lang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? lang('PrivacyPhoneInfo') : lang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return lang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return lang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return lang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const prepareSubtitle = useLastCallback((userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean) => {\n    const userIdsCount = userIds?.length || 0;\n    const chatIdsCount = chatIds?.length || 0;\n\n    if (!userIdsCount && !chatIdsCount) {\n      return shouldAllowPremium ? lang('PrivacyPremium') : lang('EditAdminAddUsers');\n    } else if (shouldAllowPremium) {\n      return lang('ContactsAndPremium');\n    }\n\n    const userCountString = userIdsCount > 0 ? lang('Users', userIdsCount) : undefined;\n    const chatCountString = chatIdsCount > 0 ? lang('Chats', chatIdsCount) : undefined;\n\n    return [userCountString, chatCountString].filter(Boolean).join(', ');\n  });\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(privacy?.allowUserIds, privacy?.allowChatIds, privacy?.shouldAllowPremium);\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(allowedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(deniedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings, CustomPeerType } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterChatsByName, isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    return [settings.shouldAllowPremium ? CUSTOM_PEER_PREMIUM.type : undefined].filter(Boolean);\n  }, [settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return chatId !== currentUserId && chatId !== SERVICE_NOTIFICATIONS_USER_ID && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterChatsByName(lang, chatIds, chatsById, searchQuery);\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedCategoryTypes, newSelectedContactIds, onScreenSelect, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        categories={withPremiumCategory ? PREMIUM_CATEGORY : undefined}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { filterUsersByName, isUserBot } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiFormattedText } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\nconst ALLOWED_QUOTE_ENTITIES = new Set([\n  ApiMessageEntityTypes.Bold,\n  ApiMessageEntityTypes.Italic,\n  ApiMessageEntityTypes.Underline,\n  ApiMessageEntityTypes.Strike,\n  ApiMessageEntityTypes.Spoiler,\n  ApiMessageEntityTypes.CustomEmoji,\n]);\n\nexport function getSelectionAsFormattedText(range: Range) {\n  const html = getSelectionAsHtml(range);\n  const formattedText = parseHtmlAsFormattedText(html, false, true);\n\n  return stripEntitiesForQuote(formattedText);\n}\n\nfunction getSelectionAsHtml(range: Range) {\n  const clonedSelection = range.cloneContents();\n  div.appendChild(clonedSelection);\n\n  const html = wrapHtmlWithMarkupTags(range, div.innerHTML);\n  div.innerHTML = '';\n\n  return html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/&nbsp;/gi, ' ') // Convert nbsp's to spaces\n    .replace(/\\u00a0/gi, ' ');\n}\n\nfunction stripEntitiesForQuote(text: ApiFormattedText): ApiFormattedText {\n  if (!text.entities) return text;\n\n  const entities = text.entities.filter((entity) => ALLOWED_QUOTE_ENTITIES.has(entity.type as ApiMessageEntityTypes));\n  return { ...text, entities: entities.length ? entities : undefined };\n}\n\nfunction wrapHtmlWithMarkupTags(range: Range, html: string) {\n  const container = range.commonAncestorContainer;\n  if (container.nodeType === Node.ELEMENT_NODE && (container as Element).classList.contains('text-content')) {\n    return html;\n  }\n  let currentElement = range.commonAncestorContainer.parentElement;\n  while (currentElement && !currentElement.classList.contains('text-content')) {\n    const tag = currentElement.tagName.toLowerCase();\n    const entityType = currentElement.dataset.entityType;\n    html = `<${tag} ${entityType ? `data-entity-type=\"${entityType}\"` : ''}>${html}</${tag}>`;\n    currentElement = currentElement.parentElement;\n  }\n\n  return html;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PinMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PinMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PinMessageModal = useModuleLoader(Bundles.Extra, 'PinMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PinMessageModal ? <PinMessageModal {...props} /> : undefined;\n};\n\nexport default PinMessageModalAsync;\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageHtmlId,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { IS_SAFARI } from '../../../../util/windowEnvironment';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED && !IS_SAFARI;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n      && checkMessageHasSelection(message)\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: onCopyLink,\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\nfunction checkMessageHasSelection(message: ApiMessage): boolean {\n  const selection = window.getSelection();\n  const selectionParentNode = (selection?.anchorNode?.parentNode as HTMLElement);\n  const selectedMessageElement = selectionParentNode?.closest<HTMLDivElement>('.Message.message-list-item');\n  return getMessageHtmlId(message.id) === selectedMessageElement?.id;\n}\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"lhinieg0\",\"get\":\"wysoV1T4\",\"skeleton\":\"gPqaUijR\",\"transition\":\"Yg6u_MIn\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Transition from '../../ui/Transition';\n\nimport styles from './ReadTimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  menuSeparatorSize: 'thin' | 'thick';\n  closeContextMenu: NoneToVoidFunction;\n};\n\nfunction ReadTimeMenuItem({\n  message, shouldRenderShowWhen, canLoadReadDate, closeContextMenu, menuSeparatorSize,\n}: OwnProps) {\n  const { openPrivacySettingsNoticeModal } = getActions();\n  const lang = useLang();\n  const { readDate } = message;\n  const shouldRenderSkeleton = canLoadReadDate && !readDate && !shouldRenderShowWhen;\n\n  const handleOpenModal = () => {\n    closeContextMenu();\n    openPrivacySettingsNoticeModal({ chatId: message.chatId, isReadDate: true });\n  };\n\n  return (\n    <>\n      <MenuSeparator size={menuSeparatorSize} />\n      <MenuItem icon=\"message-read\" className={styles.item}>\n        <Transition name=\"fade\" activeKey={shouldRenderSkeleton ? 1 : 2} className={styles.transition}>\n          {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : (\n            <>\n              {Boolean(readDate) && lang('PmReadAt', formatDateAtTime(lang, readDate * 1000))}\n              {!readDate && shouldRenderShowWhen && (\n                <div>\n                  {lang('PmRead')}\n                  <span className={styles.get} onClick={handleOpenModal}>\n                    {lang('PmReadShowWhen')}\n                  </span>\n                </div>\n              )}\n            </>\n          )}\n        </Transition>\n      </MenuItem>\n    </>\n  );\n}\n\nexport default memo(ReadTimeMenuItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport ReactionSelector from './reactions/ReactionSelector';\nimport ReadTimeMenuItem from './ReadTimeMenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canQuote?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: ApiPeer[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  isInSavedMessages?: boolean;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onSponsoredReport?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canQuote,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  isInSavedMessages,\n  shouldRenderShowWhen,\n  canLoadReadDate,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onSponsoredReport,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          defaultTagReactions={defaultTagReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        dir={lang.isRtl ? 'rtl' : undefined}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && (\n          <MenuItem icon=\"reply\" onClick={onReply}>\n            {lang(canQuote ? 'lng_context_quote_and_reply' : 'Reply')}\n          </MenuItem>\n        )}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem\n            key={option.label}\n            icon={option.icon}\n            onClick={option.handler}\n            withPreventDefaultOnMouseDown\n          >{lang(option.label)}\n          </MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator size=\"thick\" />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && (\n          <MenuItem icon=\"info\" onClick={onAboutAds}>\n            {lang(message.canReport ? 'AboutRevenueSharingAds' : 'SponsoredMessageInfo')}\n          </MenuItem>\n        )}\n        {isSponsoredMessage && message.canReport && (\n          <MenuItem icon=\"hand-stop\" onClick={onSponsoredReport}>\n            {lang('ReportAd')}\n          </MenuItem>\n        )}\n        {isSponsoredMessage && onSponsoredHide && (\n          <>\n            <MenuSeparator />\n            <MenuItem icon=\"close-circle\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n          </>\n        )}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <>\n            <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n            <MenuItem\n              icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n              onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n              disabled={!canShowReactionsCount && !seenByDatesCount}\n            >\n              <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n                <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {canShowReactionsCount && message.reactors?.count ? (\n                    canShowSeenBy && seenByDatesCount\n                      ? lang(\n                        'Chat.OutgoingContextMixedReactionCount',\n                        [message.reactors.count, seenByDatesCount],\n                      )\n                      : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                  ) : (\n                    seenByDatesCount === 1 && seenByRecentPeers\n                      ? renderText(\n                        isUserId(seenByRecentPeers[0].id)\n                          ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                          : (seenByRecentPeers[0] as ApiChat).title,\n                      ) : (\n                        seenByDatesCount\n                          ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                          : lang('Conversation.ContextMenuNoViews')\n                      )\n                  )}\n                </span>\n              </span>\n              <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n            </MenuItem>\n          </>\n        )}\n        {!isSponsoredMessage && (canLoadReadDate || shouldRenderShowWhen) && (\n          <ReadTimeMenuItem\n            canLoadReadDate={canLoadReadDate}\n            shouldRenderShowWhen={shouldRenderShowWhen}\n            message={message}\n            menuSeparatorSize={hasCustomEmoji ? 'thin' : 'thick'}\n            closeContextMenu={onClose}\n          />\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type { IAlbum, IAnchorPosition, ThreadId } from '../../../types';\nimport {\n  type ApiAvailableReaction,\n  type ApiChatReactions,\n  type ApiMessage,\n  type ApiReaction,\n  type ApiStickerSet,\n  type ApiStickerSetInfo,\n  type ApiThreadInfo,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageVideo,\n  hasMessageTtl,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsMessageUnread,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getSelectionAsFormattedText } from './helpers/getSelectionAsFormattedText';\nimport { isSelectionRangeInsideMessage } from './helpers/isSelectionRangeInsideMessage';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal.async';\nimport ReportModal from '../../common/ReportModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  threadId?: ThreadId;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  isMessageTranslated?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  canLoadReadDate?: boolean;\n  shouldRenderShowWhen?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  isInSavedMessages?: boolean;\n};\n\nconst selection = window.getSelection();\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  threadId,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  canLoadReadDate,\n  shouldRenderShowWhen,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  isMessageTranslated,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  isInSavedMessages,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openThread,\n    updateDraftReplyInfo,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n    openPremiumModal,\n    loadOutboxReadDate,\n    copyMessageLink,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n  const [canQuoteSelection, setCanQuoteSelection] = useState(false);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canLoadReadDate && isOpen) {\n      loadOutboxReadDate({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canLoadReadDate, isOpen, message.chatId, message.id, message.readDate]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const selectionRange = canReply && selection?.rangeCount ? selection.getRangeAt(0) : undefined;\n\n  useEffect(() => {\n    if (isMessageTranslated) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const isMessageTextSelected = selectionRange\n      && !selectionRange.collapsed\n      && Boolean(message.content.text?.text)\n      && isSelectionRangeInsideMessage(selectionRange);\n\n    if (!isMessageTextSelected) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const selectionText = getSelectionAsFormattedText(selectionRange);\n\n    setCanQuoteSelection(\n      selectionText.text.trim().length > 0\n      && message.content.text!.text!.includes(selectionText.text),\n    );\n  }, [\n    selectionRange, selectionRange?.collapsed, selectionRange?.startOffset, selectionRange?.endOffset,\n    isMessageTranslated, message.content.text,\n  ]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    updateDraftReplyInfo({\n      replyToMsgId: message.id,\n      quoteText: canQuoteSelection && selectionRange ? getSelectionAsFormattedText(selectionRange) : undefined,\n    });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyMessageLink({\n      chatId: message.chatId,\n      messageId: message.id,\n      shouldIncludeThread: threadId !== MAIN_THREAD_ID,\n      shouldIncludeGrouped: true, // TODO: Provide correct value when ability to target specific message is added\n    });\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isInSavedMessages && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n    } else {\n      toggleReaction({\n        chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        defaultTagReactions={defaultTagReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canQuote={canQuoteSelection}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        shouldRenderShowWhen={shouldRenderShowWhen}\n        canLoadReadDate={canLoadReadDate}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        isInSavedMessages={isInSavedMessages}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n\n    const { defaultTags, topReactions, availableReactions } = global.reactions;\n\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const {\n      seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions, readDateExpiresAt,\n    } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const userStatus = isPrivate ? selectUserStatus(global, chat.id) : undefined;\n    const isOwn = isOwnMessage(message);\n    const isMessageUnread = selectIsMessageUnread(global, message);\n    const canLoadReadDate = Boolean(\n      isPrivate\n        && isOwn\n        && !isMessageUnread\n        && readDateExpiresAt\n        && message.date > Date.now() / 1000 - readDateExpiresAt\n        && !userStatus?.isReadDateRestricted\n        && messageListType !== 'scheduled',\n    );\n    const shouldRenderShowWhen = Boolean(\n      canLoadReadDate && isPrivate && selectUserStatus(global, chat.id)?.isReadDateRestrictedByMe,\n    );\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const hasTtl = hasMessageTtl(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && !isMessageUnread\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n\n    return {\n      threadId,\n      availableReactions,\n      topReactions,\n      defaultTagReactions: defaultTags,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: (canCopyNumber || (!isProtected && canCopy)),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      canLoadReadDate,\n      shouldRenderShowWhen,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction\n        && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID && !hasTtl,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      isMessageTranslated: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      isInSavedMessages,\n    };\n  },\n)(ContextMenuContainer));\n","export function isSelectionRangeInsideMessage(range: Range) {\n  const ancestor = range.commonAncestorContainer;\n  const el = ancestor.nodeType === Node.TEXT_NODE\n    ? ancestor.parentNode! as Element\n    : ancestor as Element;\n\n  return Boolean(el.closest('.message-content-wrapper .text-content'))\n    && !(Boolean(el.closest('.EmbeddedMessage')) || Boolean(el.closest('.WebPage')));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: NoneToVoidFunction;\n  onReportAd: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onReportAd,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    closeMenu();\n    onReportAd();\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={handleSponsoredHide}\n        onSponsorInfo={handleSponsorInfo}\n        onSponsoredReport={handleReportSponsoredMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(SponsoredMessageContextMenuContainer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat, chatFullInfo) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo)\n        && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanManage, selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsPremiumPurchaseBlocked,\n  selectIsRightColumnShown, selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openBoostStatistics,\n    openGiftPremiumModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserIds: [chatId] });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    blockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return lang('Delete');\n    }\n\n    if (isPrivate) {\n      return lang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return lang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return lang('LeaveChannel');\n    }\n\n    return lang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, lang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? lang('BotRestart') : lang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? lang('Unblock') : lang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            peerId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS } from '../../util/windowEnvironment';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\nimport SavedTagButton from './message/reactions/SavedTagButton';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: ThreadId;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  savedTags,\n  searchTag,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  const hasQueryData = Boolean(query || searchTag);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (hasQueryData) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"tags-subheader custom-scroll-x no-scrollbar\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"mobile-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {hasQueryData ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiAvailableReaction, ApiChatReactions, ApiReaction } from '../../../../api/types';\n\nimport { getReactionKey, sortReactions } from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiMessageEntity,\n  ApiReaction, ApiReactionCustomEmoji, ApiSticker, ApiStory, ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\n\nimport { getReactionKey, getStoryKey, isUserId } from '../../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectPeerStory, selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n  sendAsMessage,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReaction | ApiSticker) => {\n    const reaction = 'id' in item ? { documentId: item.id } : item;\n\n    const sticker = 'documentId' in item\n      ? getGlobal().customEmojis.byId[item.documentId] : 'emoticon' in item ? undefined : item;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in item) {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        chatId={renderedChatId}\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              'icon',\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"drop-target\":\"LhhRTsy6\",\"dropTarget\":\"LhhRTsy6\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentType, isUserId } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = attachments?.length && getAttachmentType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                        {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {lang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {lang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n                // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? lang('Next') : editingMessage ? lang('Save') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text,\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [addedSetIds, stickerSetsById, favoriteStickers, recentStickers, chatStickerSetId, lang]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{command}</span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const linkUrlInputRef = useRef<HTMLInputElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <i className=\"icon icon-eye-closed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <i className=\"icon icon-bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <i className=\"icon icon-italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <i className=\"icon icon-underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <i className=\"icon icon-strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <i className=\"icon icon-monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <i className=\"icon icon-link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <i className=\"icon icon-check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { ANONYMOUS_USER_ID, REPLIES_USER_ID } from '../../config';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectCurrentTextSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport { debounce } from '../../util/schedulers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport SavedTagButton from '../middle/message/reactions/SavedTagButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  savedTags,\n  searchTag,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    setLocalTextSearchTag,\n    focusMessage,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleSearchTextMessagesLocal = useLastCallback(() => {\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    if (isSameReaction(tag, searchTag)) {\n      setLocalTextSearchTag({ tag: undefined });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n    handleSearchTextMessagesLocal();\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !searchTag) || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      const originalSender = (isSavedMessages || chatId === REPLIES_USER_ID || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n\n      const senderPeer = originalSender || messageSender;\n\n      const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n      return {\n        message,\n        senderPeer,\n        hiddenForwardTitle,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, searchTag, viewportIds, messagesById, isSavedMessages, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, hiddenForwardTitle, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer?: ApiPeer;\n    hiddenForwardTitle?: string;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n          text={hiddenForwardTitle}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            {senderPeer && <FullNameTitle peer={senderPeer} withEmojiStatus />}\n            {!senderPeer && hiddenForwardTitle}\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"search-tags custom-scroll-x no-scrollbar\"\n          key=\"search-tags\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"local-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      isSavedMessages,\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && lang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: LangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small-mobile\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview\n        statistics={statistics}\n        type={isGroup ? 'group' : 'channel'}\n        title={lang('StatisticOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage } from '../../api/types';\n\nimport { getMessagePoll } from '../../global/helpers';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}` });\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  canPost?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  canPost,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {canPost && (\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isSignaturesShown}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      canPost: getHasAdminRight(chat, 'postMessages'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || chat?.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  filterUsersByName, getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n        || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n      || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <LinkField\n            className=\"section\"\n            link={primaryInviteLink}\n            withShare\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice, ApiPaymentCredentials,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n    botName?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} draggable={false} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { RefObject } from 'react';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { Price, ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest, isPaymentFormUrl,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n      botName,\n    } = selectTabState(global).payment;\n\n    let providerName = nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId!) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider: providerName,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\nimport type { Price } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id), [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds! });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds!.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  if (!userIds) return undefined;\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <Picker\n            className={styles.userPicker}\n            itemIds={userIds!}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            isRoundCheckbox\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","getNodes","message","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","SharedMedia","SearchResult","MiddleHeaderAvatar","SuggestedAvatar","ScheduledInline","Inline","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","element","selector","matches","isAvatar","sender","selectPeer","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","peerId","MediaViewerSlides","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","BASE_SCREEN_WIDTH","BASE_SCREEN_HEIGHT","BASE_ACTIVE_SLIDE_WIDTH","BASE_ACTIVE_SLIDE_HEIGHT","BASE_SLIDE_WIDTH","BASE_SLIDE_HEIGHT","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","tabState","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","usersById","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterUsersByName","Picker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","forceShowSelf","onSelectedIdsChange","onFilterChange","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","closeFriends","denyList","handleActionClick","actionInner","getUserFullName","Switcher","label","footer","info","submit","renderPrivacyList","CloseFriends","AllowDenyList","modal","noBackdrop","onCloseAnimationEnd","header","closeButton","headerTitle","renderHeaderContent","slideClassName","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","toLowerCase","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","fromPeerId","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","Icon","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","parseInt","getComputedStyle","isOverflowing","overflowShift","scrollTo","fullClassName","EmbeddedStoryForward","MessageText","messageOrStory","withTranslucentThumbs","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isChannel","isSentStoryReactionHeart","emoticon","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","documentId","withEffectOnly","DEFAULT_STORY_DURATION_S","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","isChatChannel","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","usernames","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","isLongPressActive","isPressed","timerId","canProcessEvent","cancel","useLongPress","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","StoryProgress","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryFooter","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","parts","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","isLoading","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","query","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","selected","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","StoryView","Array","_","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","thumb","safeAreaBottom","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StealthModeModal","StorySettings","TOPIC_ICON_SIZE","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","topicsResult","searchTitle","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","Loading","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","ChatOrUserPicker","isManyMessages","isStory","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","isSelf","toChatId","getChatTitle","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","openUrl","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","isSettingsButtonVisible","setIsSettingsButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","shouldConfirmClosing","setShouldConfirmClosing","isCloseModalOpen","openCloseModal","hideCloseModal","isRemoveModalOpen","openRemoveModal","hideRemoveModal","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequesingWriteAccess","setIsRequestingWriteAccess","unlockPopupsAt","handlePopupOpened","handlePopupClosed","sequentialLimit","resetAfter","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyInfo","isSimple","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","openInvoice","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","forceReloadFrame","once","eventType","isNonStable","eventData","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","color_key","newColor","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","shouldShowMainButton","useInterval","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","buttonId","button_id","handleAppPopupModalClose","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleToggleClick","handleBackClick","handleAcceptPhone","handleAcceptWriteAccess","openBotChat","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","shortName","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","isFontIcon","count","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","description","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","fill","isLast","isPreLast","isFirst","isPreFirst","isInvisible","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","COLOR_START","COLOR_END","colorStepProgress","lerp","PremiumLimitsCompare","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","PremiumFeatureItem","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","LIMITS_DESCRIPTIONS","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","amount","months","currency","perMonthPrice","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","PremiumFeaturePreviewStories","videoSections","PremiumFeaturePreviewVideo","videos","PREMIUM_BOTTOM_VIDEOS","SliderDots","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","dialogRef","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","options","showConfetti","prevIsPremium","defaultOption","handleOpenStatusSet","stickerSetTitle","template","first","second","emoji","thumbCustomEmojiId","CustomEmoji","link","monthOption","subscribeButtonText","PremiumFeatureModal","isBig","PremiumLogo","PremiumSubscriptionOption","statusText","entities","statusEntities","renderFooterText","gifts","forUserIds","isCompleted","giftPremiumModal","boostPerSentGift","boostsPerSentGift","BOOST_PER_SENT_GIFT","closeGiftPremiumModal","selectedMonthOption","setSelectedMonthOption","selectedUserQuantity","giftingUserList","selectedGift","gift","filteredGifts","fullMonthlyGiftAmount","basicGift","handlePremiumClick","userNameList","modalDialog","avatars","headerText","center","part","subpart","boostIcon","subscriptionOptions","match","premiumFeatures","Link","isPrimary","renderPremiumFeaturesLink","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","noScrollRestore","isCountryList","entityType","statusesById","userStatusesById","isSuperGroup","members","adminMembersById","chatFullInfo","selectChatFullInfo","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","pendingChannelId","setPendingChannelId","channelsIds","adminIds","memberIds","sortUserIds","displayedMembersIds","filteredContactIds","isUserBot","displayedChannelIds","foundChannelIds","contactId","handleSendIdList","confirmPrivateLinkChannelSelection","prevIds","handleSelectedMemberIdsChange","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","isLink","onClickAction","userNames","selectedMemberIds","displayText","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isEntityPickerModalOpen","openEntityPickerModal","closeEntityPickerModal","setEntityType","TYPE_OPTIONS","GiveawayUsersRound","customExpireDate","setCustomExpireDate","selectedUserCount","setSelectedUserCount","selectedGiveawayOption","setGiveawayOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountriesIds","setSelectedCountriesIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","boostQuantity","isRandomUsers","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","userCountOptions","uniqueUserCounts","Set","quantity","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleUserCountChange","newValue","handlePrizeDescriptionChange","handleAdd","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSetIdsListChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","GiveawayTypeOption","RangeSliderWithMarks","rangeCount","marks","filteredChannelIds","deleteParticipantsHandler","iconClassName","RadioGroup","subLabelClassName","formatDateTimeToString","CountryPickerModal","AppendEntityPickerModal","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","closePremiumGiftingModal","openGiftPremiumModal","displayedUserIds","handleSelectedUserIdsChange","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","currentIndex","stickerSetEl","isClose","animateScroll","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","coords","useCoordsInSharedCanvas","accessHash","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","noContextMenu","isSavedMessages","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","setEmojiStatus","menuRef","isCustomEmoji","hasEffect","isLocked","shouldLoad","isIntesectingForShowing","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","shouldRenderContextMenu","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","expires","getServerTimeOffset","shouldShowCloseButton","contextMenuItems","item","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","withSharedAnimation","noFastClick","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","isSameReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","getReactionKey","ReactionEmoji","isHqEmoji","canvasRef","StickerButton","has","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","defaultTagReactions","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","cleanRecentReactions","some","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","userSetIds","unshift","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","StickerSetCover","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","boosts","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","handleCloseClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","formatDateInFuture","chatMessage","messageSender","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","LinkField","PickerSelectedItem","isFromGiveaway","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","newChatsCount","badgeText","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","alreadyPeerIds","Badge","buttonBadge","isAlternateColor","suggestedPeerIds","leaveChatlist","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","ChatlistAlready","ChatlistNew","ChatlistDelete","folderTitle","foldersWrapper","folders","badgeCount","isBadgeActive","isRevenueSharing","minLevelSignal","useSelectorSignal","channelRestrictAdsLevelMin","minLevelToRestrictAds","regularAdContent","SafeLink","revenueSharingAdContent","isStatic","Separator","reportSponsoredMessage","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","randomId","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","subtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","isPrivateChat","isGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","userName","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","LOCAL_TGS_URLS","ReadTime","LastSeen","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","LoadMoreDirection","Backwards","formatIntegerCompact","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","chip","createMapStateToProps","fetchingStatus","globalSearch","currentType","isVoice","byChatId","globalMessagesByChatId","activeDownloads","searchChatId","shouldWarnAboutSvg","byKey","runThrottled","cb","searchMessagesGlobal","openAudioPlayer","foundMessages","handleMessageFocus","handlePlayAudio","canRenderContents","noFastList","NothingFound","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","privateChatUserId","privateChatUser","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","shouldReplaceHistory","useSelectWithEnter","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","foundTopicIds","dateSearchQuery","onSearchDateSelect","onReset","openThread","nothingFound","DateSuggest","LeftSearchResultTopic","ChatMessage","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","storyViewerOrigin","MuteChatModal","ChatFolderModal","topUserIds","topPeers","recentlyFoundChatIds","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","LeftSearchResultChat","isChannelList","globalResults","localResults","globalChatIds","globalUserIds","accountChatIds","accountUserIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localContactIds","localPeerIds","accountPeerIds","accountPeerId","filteredIds","handleClickShowMoreLocal","handleClickShowMoreGlobal","noScrollRestoreOnTop","RecentContacts","CURRENT_TYPE","observeIntersectionForMedia","Document","withDate","datetime","smaller","WebLink","onMessageClick","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","TABS","GlobalSearchContent","ChannelList","Links","Files","Music","Voice","CHAT_TABS","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","tabs","handleSwitchTab","tab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","maxChats","selectCurrentLimit","mode","selectedChatTypes","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","openLimitReachedModal","chatTypes","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","shouldMinimize","isTouched","setIsTouched","handleItemClick","splice","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","typeKey","isMinimized","canClose","withChatType","dispatch","chatFilter","selectedChatIds","selectChatFilters","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","isChatList","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","renderChatType","ShowMoreButton","itemName","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","FoldersShare","withShare","onRevoke","onDisabledClick","isRoundCheckbox","currentScreen","shownScreen","onScreenSelect","openShareChatFolderModal","editChatFolder","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","fullReset","STICKER_SIZE_PASSCODE","Congratulations","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","passcode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","PasscodeEnabled","SettingsPasscodeEnabled","premiumSection","handleOpenPremiumModal","PremiumIcon","withGradient","big","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","canLimitNewMessagesWithoutPremium","canChange","PrivacyLockedOption","hidden","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","activeSessions","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","SettingsActiveSession","iconDevice","dateActive","box","appName","appVersion","ip","region","getLocation","note","actionHeader","actionName","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","avatar","SettingsActiveWebsite","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","StickerSetCard","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","language","doNotTranslate","displayedOptions","setDisplayedOptions","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","ManageUsernames","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","Experimental","IS_ELECTRON","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","newSize","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","Notifications","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyGroupChats","PrivacyPhoneCall","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","languages","canTranslate","canTranslateChats","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","loadProfilePhotos","openSupportChat","openPremiumGiftingModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","langName","FAQ_URL","PRIVACY_URL","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","hasPasscode","blockedCount","totalCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","shouldAllowPremium","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","lastSeen","profilePhoto","birthday","forwards","phoneCall","allowDisabledClick","voiceMessages","chatInvite","blockedIds","userSearch","localUserIds","setUserSearchQuery","availableContactIds","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","BlockUserModal","getPrivacyKey","screen","PrivacyPhoneP2P","PrivacyAddByPhone","selectShouldHideReadMarks","canShowHideReadTime","handleChangeShouldHideReadMarks","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","prepareSubtitle","userIdsCount","chatIdsCount","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","addByPhone","phoneP2P","secondaryScreen","SettingsPrivacyPublicProfilePhoto","SettingsPrivacyLastSeen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","isAllowList","withPremiumCategory","setPrivacySettings","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","categories","selectedCategories","onSelectedCategoriesChange","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","addedSetIds","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","STICKER_SIZE_TWO_FA","animatedEmoji","selectAnimatedEmoji","codeLength","twoFaSettings","waitingEmailCodeLength","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","_isFrom","_currentKey","SettingsHeader","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","openNewContactDialog","isSearching","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","div","ALLOWED_QUOTE_ENTITIES","ApiMessageEntityTypes","Bold","Italic","Underline","Strike","Spoiler","getSelectionAsFormattedText","range","html","clonedSelection","cloneContents","commonAncestorContainer","nodeType","Node","ELEMENT_NODE","currentElement","tag","wrapHtmlWithMarkupTags","innerHTML","getSelectionAsHtml","entity","stripEntitiesForQuote","parseHtmlAsFormattedText","PinMessageModal","useModuleLoader","Bundles","Extra","getCopyLabel","hasSelection","shouldRenderShowWhen","canLoadReadDate","closeContextMenu","menuSeparatorSize","openPrivacySettingsNoticeModal","readDate","MenuSeparator","handleOpenModal","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canQuote","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","isInSavedMessages","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onSponsoredReport","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","selectionParentNode","selectedMessageElement","checkMessageHasSelection","getMessageIdsForSelectedText","execCommand","clipboardText","shouldRenderAsHtml","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","extraMarginTop","menuElMinWidth","withScroll","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","withPreventDefaultOnMouseDown","inline","withWrap","sponsorInfo","ReadTimeMenuItem","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","readDateExpiresAt","noOptions","isOwn","isOwnMessage","isMessageUnread","selectIsMessageUnread","isReadDateRestricted","isReadDateRestrictedByMe","isScheduled","isMessageLocal","hasTtl","hasMessageTtl","isChatGroup","membersCount","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","canScheduleUntilOnline","selectCanScheduleUntilOnline","isMessageTranslated","selectIsReactionPickerOpen","updateDraftReplyInfo","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","loadOutboxReadDate","copyMessageLink","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","canQuoteSelection","setCanQuoteSelection","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","selectionRange","getRangeAt","collapsed","ancestor","TEXT_NODE","isSelectionRangeInsideMessage","selectionText","startOffset","endOffset","handleDelete","handleReport","closeMenu","closePinModal","handleReply","replyToMsgId","quoteText","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","shouldIncludeThread","shouldIncludeGrouped","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","onReportAd","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","handleReportSponsoredMessage","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","premiumGifts","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openBoostStatistics","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","cmd","deleteTitle","DeleteChatModal","isSavedDialog","runDebouncedForSearch","savedTag","selectCurrentTextSearch","savedTags","savedReactionTags","isHistoryCalendarOpen","searchTag","setLocalTextSearchQuery","setLocalTextSearchTag","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","loadSavedReactionTags","tagsRef","focusedIndex","setFocusedIndex","hasQueryData","visualViewport","mainEl","pageTop","blur","tags","hasTags","areTagsDisabled","handleMessageSearchQueryChange","newQuery","handleTagClick","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SavedTagButton","withCount","isChosen","getDayStartAt","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","isFree","customEmojiMessage","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","ReactionPickerLimited","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","isInAlbum","groupedId","notEditingFile","getAttachmentType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","requestNextMutation","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","noReplaceNewlines","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","favorite","chatStickerSetId","recentStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","isMessageComposer","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseEnter","withAvatar","freezeWhenClosed","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","ChatCommand","botCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","EDITABLE_INPUT_ID","textFormat","restoreSelection","removeAllRanges","addRange","updateSelectedRange","getSelectedText","shouldDropCustomEmoji","replaceChildren","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbnailDataUrl","decoding","inlineResult","webThumbnail","BaseResult","_gif","isForGallery","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","senderPeer","hiddenForwardTitle","hiddenUserName","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","toggleMessageStatistics","StatisticsRecentPostMeta","toggleStoryStatistics","imgBlobUrl","withStorySolid","forceUnreadStorySolid","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","storiesById","selectPeerStories","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","msgId","StatisticsRecentMessage","StatisticsRecentStory","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","StatisticsMessagePublicForward","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","isSignaturesShown","canChangeInfo","canInvite","exportedInvites","updateChat","toggleSignatures","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","onChatMemberSelect","canAddNewAdmins","adminRights","addAdmins","adminMembers","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","bannedRights","RemoveGroupUserModal","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canBanUsers","isChannelsPremiumLimitReached","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","permissions","setPermissions","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handlePermissionChange","handleSavePermissions","handleDismissAdmin","getControlIsDisabled","memberStatus","handleCustomTitleChange","changeInfo","blocking","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","inviteUsers","pinMessages","manageCall","manageTopics","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","havePermissionChanged","setHavePermissionChanged","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","assign","embedLinks","sendPlain","sendMessages","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleSaveClick","formatFullDate","n","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","JoinRequest","STICKER_SIZE_JOIN_REQUESTS","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","personalPhoto","notPersonalPhoto","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","managementType","selectCurrentManagementType","ManageBot","ManageUser","ManageGroup","GroupRecentActions","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","defaultName","invoice","prices","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","botName","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","invoiceInfo","renderCheckoutItem","customIcon","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","noRedirect","onPaymentFormSubmit","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","useFocusAfterAnimation","animationDuration","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","Select","hasArrow","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","providerName","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","ConfirmPayment","setStep","nextStep","Checkout","field","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","SavedPaymentCredentials","PasswordConfirm","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedIds","lockedUnselectedSubtitle","isViewOnly","closeOneTimeMediaModal","handlePlayVoice","closeBtnTitle","voice","OneTimeModal","isRound","RoundVideo","onStop","renderMedia","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","MonkeyClose","playSegment","MonkeyPeek","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}