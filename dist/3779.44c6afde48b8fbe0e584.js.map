{"version":3,"file":"3779.44c6afde48b8fbe0e584.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete\"\n      title=\"Are you sure?\"\n    >\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n        {lang('Preview.DeletePhoto')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) return;\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations, currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  isForumPanelOpen?: boolean;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  onReset,\n  onTopicSearch,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} isForumPanelOpen={isForumPanelOpen} />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useLayoutEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage, ApiReaction, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  threadId,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = !renderingStickerSet?.isArchived && renderingStickerSet?.installedDate;\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !isAdded && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: global.isChatInfoShown && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst CAPTION_SYMBOLS_LEFT_THRESHOLD = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n  const lang = useLang();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    onCaptionUpdate,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(shouldSendCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSendCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSend, updateAttachmentSettings, shouldSendCompressed, shouldSendGrouped,\n    onSendSilent,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(styles.dropTarget) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(styles.hovered)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const leftChars = useMemo(() => {\n    const captionLeftBeforeLimit = captionLimit - getHtmlTextLength(caption);\n    return captionLeftBeforeLimit <= CAPTION_SYMBOLS_LEFT_THRESHOLD ? captionLeftBeforeLimit : undefined;\n  }, [caption, captionLimit]);\n\n  const isQuickGallery = shouldSendCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                shouldSendCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                )\n              }\n              {shouldSendCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={shouldSendCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <div className={styles.caption}>\n            <MessageInput\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              html={caption}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && attachments.length)}\n              captionLimit={leftChars}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst CONTAINER_PADDING = IS_SINGLE_COLUMN_LAYOUT ? 8 : 0;\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor((width - CONTAINER_PADDING) / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  defaultTopicIconsId?: string;\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(featuredCustomEmojiIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, defaultTopicIconsId, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById,\n    withDefaultTopicIcons,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            shouldHideRecentHeader={withDefaultTopicIcons}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: GlobalState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = global;\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: GlobalState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = global;\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n  isChatSuperGroup,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 9;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n      'manageTopics',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && isChatSuperGroup(chat) && getHasAdminRight(chat, 'changeInfo');\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    error: global.payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: global.payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","IS_SINGLE_COLUMN_LAYOUT","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","lastFrameSizeRef","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","handleConfirm","shortName","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","forEach","reaction","some","r","isSameReaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","foundTopicIds","searchChatId","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","isDragged","draggedTop","subtitle","narrow","secondaryIcon","multiline","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","sharedCanvasRef","loadStickers","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","stickerSetInfo","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","isForumPanelOpen","onTopicSearch","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","has","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","reportMessageIds","scheduledMaxDate","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isAdded","isArchived","installedDate","isEmoji","isButtonLocked","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","getDayStartAt","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","caption","canShowCustomSendMenu","shouldSuggestCompression","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","shouldSendCompressed","setShouldSendCompressed","shouldCompress","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","captionLeftBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","CONTAINER_PADDING","loadAndPlay","favoriteStickers","isCustomEmojiPicker","shouldHideRecentHeader","withDefaultTopicIcon","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isRecent","isFavorite","FAVORITE_SYMBOL_SET_ID","isPremiumSet","handleClearRecent","handleAddClick","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","calculateItemsPerRow","contentRect","useResizeObserver","isLocked","isFree","isInstalled","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","grey","isHqEmoji","canvasRef","canViewSet","onUnfaveClick","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","defaultTopicIconsId","withDefaultTopicIcons","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","stickerSetEl","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","file","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}