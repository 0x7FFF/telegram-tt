{"version":3,"file":"3779.7aa8b08432c47e68917c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/MediaAreaOverlay.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.module.scss?df39","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getMessageActionPhoto,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoAvatarMediaHash,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsDownloading,\n  selectIsMessageProtected,\n} from '../../global/selectors';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectTabState, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { ARE_WEBCODECS_SUPPORTED, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({ message, forcePlayback: true, isForMediaViewer: true });\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!]?.id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gJ2Z_EQBnbDYMJ2NKHPj\",\"fullSize\":\"F47ywnKRf0QnMNfkDAhN\",\"backdrop\":\"aZegQFa4eGDydcez2hhX\",\"captionBackdrop\":\"tt0i3c46mBP8eper4sX9\",\"backdropNonInteractive\":\"qBNqjd4Jivn9JZM9LTR1\",\"close\":\"oHmnmRivkoOTtFlipOlm\",\"wrapper\":\"tfRbD6UXCoHpURk9jkFs\",\"slideAnimation\":\"KeE62xWk53FkLDgmLDHC\",\"slideAnimationToActive\":\"u4UY_cga_HGYeSeXtJFy\",\"content\":\"AS2XHnign2xV16Kjj6bL\",\"slideAnimationFromActive\":\"fMXsSVdwtbHbHVPe7TRY\",\"composer\":\"RrR48bdsuf7ziCaT39SR\",\"caption\":\"DfZIQpvbsc1Lopohx81T\",\"storyIndicators\":\"E5huzrUvL4LEC9dx4KwW\",\"slide\":\"Xd5grwcEn6r_RQyYYwTw\",\"slidePreview\":\"fH5dgpor5kv4sjYevuiU\",\"activeSlide\":\"Cs943zlR1iWQhsSG8QUZ\",\"slideInner\":\"UxBW6ApLLCk97qq1YxJH\",\"mediaWrapper\":\"tOO6t_Iv78rQnpDEOgh8\",\"media\":\"IWB6V7TuwMQUqxdPJDKT\",\"name\":\"zX3llen5J3KlIJGrCz2u\",\"forward\":\"mFCpxKAL5_Xa89VkFv5i\",\"storyHeader\":\"Kcahvy487TvQIEvXamQu\",\"sender\":\"E1bHDTXle6dida5Kw_Ob\",\"senderInfo\":\"MtJgsqpsPRYORGENbJDM\",\"senderName\":\"h7HZqUP3UoB_TWRA3ien\",\"storyMetaRow\":\"N9xfCNDRX4SkiLZ4_S9E\",\"storyMeta\":\"_fljB0mSVyj1YctbrtIQ\",\"topIcon\":\"ZSxV9fv0jbSUxkZjI4hF\",\"actions\":\"rlPJs7dRj8mRAAzEoxxg\",\"visibilityButton\":\"L2DlAgxoJ9gNRcSiZRkI\",\"visibilityButtonSelf\":\"uFpWDsHmcfI_qQSfKtph\",\"button\":\"Njk4jy0AOyHD31ABkS6M\",\"buttonMenu\":\"nqQ3MS3rHe4c00GJvtwh\",\"captionGradient\":\"MnckwrDaIp2zIGy011sM\",\"captionInner\":\"jXIvfN5QPnrzWo9eANQf\",\"captionContent\":\"_nAzidGNr0mdSkqyvmj_\",\"hasOverflow\":\"d3FJsMTVC2kORJMGxgbG\",\"expanded\":\"zAH8_B8BrtyxRZR_iHvS\",\"animate\":\"ZguPPKlRJgtkBr7ENcvT\",\"withShowMore\":\"XOq3cloVnzuYbz2bQw_b\",\"captionShowMore\":\"OIcA1buYWPCjn6NzLZJn\",\"navigate\":\"nAa_W_FxKosbXRpB3tgu\",\"prev\":\"zwhGmE8SJA8XAnthasxt\",\"next\":\"a9J5InzXCE1XEX5m3A6J\",\"ownForward\":\"coOmRBCnVtcQ0E5zX96Z\",\"recentViewers\":\"N8tqQ_Z0rKf1tO_Bcg78\",\"recentViewersInteractive\":\"ftzBm5h1HJpZMMU5eWg8\",\"recentViewersAvatars\":\"sgevTC3Q3gTcGD4W1gEG\",\"reactionCount\":\"fJ5u5gkvrTgsVt354fHT\",\"reactionCountHeart\":\"XhkyppmXT3y48487dgF4\",\"modal\":\"RiK8REKD0zdsqi8XRHh5\",\"thumbnail\":\"lFdi4MIeHlnMCtiJbwTA\",\"mediaAreaOverlay\":\"cJhAHhuicOv3OUCyWd1g\",\"mediaArea\":\"CJUu2GmoJLdL5QkCCeOH\",\"ghost\":\"zY4iKmbIIQ3TXtFU3PvS\",\"ghost2\":\"b1yiparcCewkKHh2aOHA\",\"ghostImage\":\"rAlVsvmsoSnnvgZfAsc5\"};","import type { IDimensions } from '../../../global/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getUserStoryHtmlId } from '../../../global/helpers';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_DESKTOP = 3.5 * REM;\nconst OFFSET_MOBILE = 4 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth;\n    toHeight = windowHeight - OFFSET_MOBILE;\n  }\n\n  const toLeft = isMobile ? 0 : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? 0 : (windowHeight - (toHeight + OFFSET_DESKTOP)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getUserStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyStyles(element: HTMLElement, css: Record<string, string>) {\n  Object.assign(element.style, css);\n}\n","import type { IDimensions } from '../../../global/types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale),\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: roundToNearestEven(BASE_SLIDE_WIDTH * scale),\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    mediaAreas,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GNraau1Tus9Dhh2t0acA\",\"close\":\"m12ugKt9ihAO1ej1_y9n\",\"stealthIcon\":\"VLiBdviejkHCeGYNuGbe\",\"title\":\"uEr8ArVuYRUD3Ca3K1Sr\",\"description\":\"uV7xfk10UeLETmkHjCSv\",\"listItem\":\"P7J78AMcEBuYTdRnkNpv\",\"icon\":\"cFpiujXxzIbtMShso6wr\",\"button\":\"z5JVVwDZqJmujLRuZYiL\",\"subtitle\":\"ADx8YQgxcFasnFZ14Tcy\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium } : StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.close}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <i className=\"icon icon-eye-closed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-past', styles.icon)} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-future', styles.icon)} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  storyId?: number;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({ isOpen, storyId, onClose }: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!storyId) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ storyId });\n    onClose();\n  }, [onClose, storyId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"wU1uWdwnVeSGSB5gOjJ6\",\"active\":\"SlrHi8_ck8rgqhL48EhA\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Tc2kIulYTlFPvwfiTsFu\",\"header\":\"JXAfpcoB9izWjIX_WP0Q\",\"closeButton\":\"Hku60UdVn3LASgJdRQuw\",\"headerTitle\":\"L0Y7Snis7FiIcjMWZBBV\",\"content\":\"TBDaWd1Xw_wRqKUfj6IE\",\"section\":\"aNUFlXJVOpJVBLust1Ow\",\"title\":\"zNuDMViBzMNzGZxwFYGt\",\"list\":\"uW2YeebP6I62I5STt6az\",\"option\":\"CmouOddJNYo5qMb1eDhZ\",\"checked\":\"PxjIam8OpB7IAvp7fByQ\",\"input\":\"K9FImlb6XOJreshP5cfK\",\"icon\":\"Wpl9IXFnTYZf8HWj8H7_\",\"action\":\"oOUd_PRdTkIxpN_BekC1\",\"optionContent\":\"BkziTDKbvbzgii4mPbsx\",\"footer\":\"gH3hgLj6tnN_xhycOx0Q\",\"info\":\"i2HOS8g2UGDP69ABnvAe\",\"submit\":\"XwAIvijHgerStkRxm6rt\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectTabState, selectUserStory } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryPinned } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isPinned);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isPinned !== isPinned) {\n      toggleStoryPinned({ storyId: story!.id, isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getUserFullName(usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, userId,\n    },\n  } = selectTabState(global);\n  const story = (userId && storyId)\n    ? selectUserStory(global, userId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMediaArea } from '../../api/types';\nimport type { IDimensions } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport styles from './StoryViewer.module.scss';\n\ntype OwnProps = {\n  mediaAreas?: ApiMediaArea[];\n  mediaDimensions: IDimensions;\n};\n\nconst MediaAreaOverlay = ({ mediaAreas, mediaDimensions }: OwnProps) => {\n  const { openMapModal } = getActions();\n  const handleMediaAreaClick = (mediaArea: ApiMediaArea) => {\n    if (mediaArea.geo) {\n      openMapModal({ geoPoint: mediaArea.geo });\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.mediaAreaOverlay, styles.media)}\n      style={buildStyle(`aspect-ratio: ${mediaDimensions.width} / ${mediaDimensions.height}`)}\n    >\n      {mediaAreas?.map((mediaArea) => (\n        <div\n          className={styles.mediaArea}\n          style={prepareStyle(mediaArea)}\n          onClick={() => handleMediaAreaClick(mediaArea)}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction prepareStyle(mediaArea: ApiMediaArea) {\n  const {\n    x, y, width, height, rotation,\n  } = mediaArea.coordinates;\n\n  return buildStyle(\n    `left: ${x}%`,\n    `top: ${y}%`,\n    `width: ${width}%`,\n    `height: ${height}%`,\n    `transform: rotate(${rotation}deg) translate(-50%, -50%)`,\n  );\n}\n\nexport default memo(MediaAreaOverlay);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst OVERFLOW_THRESHOLD_PX = 5.75 * REM;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const showMoreButtonRef = useRef<HTMLDivElement>(null);\n\n  const caption = story.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const { clientHeight } = ref.current;\n    setHasOverflow(clientHeight > OVERFLOW_THRESHOLD_PX);\n  }, [caption]);\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransition(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  useEffect(() => {\n    if (!showMoreButtonRef.current || !contentRef.current) {\n      return;\n    }\n\n    const button = showMoreButtonRef.current;\n    const container = contentRef.current;\n\n    const { offsetWidth } = button;\n    requestMutation(() => {\n      container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n    });\n  }, [canExpand]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    hasOverflow && !isExpanded && styles.hasOverflow,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          <MessageText\n            messageOrStory={story}\n            withTranslucentThumbs\n            forcePlayback\n          />\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"uXHBlEUDZKJr1u7dvj4k\",\"viewed\":\"GiJXPT0zbAmsx82Nm8ci\",\"active\":\"PaCfy7Nei0tOQAE9i0XV\",\"inner\":\"goBtmBaUzEEUaT_NbrvT\",\"progress\":\"kvGsn6HE3seo_5jfVRs1\",\"paused\":\"J1oS3YeXCbdBhKm3eIBi\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiStealthMode, ApiStory, ApiTypeStory, ApiUser,\n} from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat, selectIsCurrentUserPremium,\n  selectTabState, selectUserStories, selectUserStory,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativeTime } from '../../util/dateFormat';\nimport download from '../../util/download';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport AvatarList from '../common/AvatarList';\nimport Composer from '../common/Composer';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport MediaAreaOverlay from './MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  userId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (storyId: number) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  user: ApiUser;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  isSelf: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n}\n\nconst VIDEO_MIN_READY_STATE = 4;\nconst SPACEBAR_CODE = 32;\n\nconst PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';\nconst SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  isSelf,\n  userId,\n  storyId,\n  user,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadUserSkippedStories,\n    openForwardMenu,\n    openStoryViewModal,\n    copyStoryLink,\n    toggleStoryPinned,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const {\n    isDeletedStory,\n    hasText,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    mediaAreas,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n\n  const isChangelog = userId === storyChangelogUserId;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? !story.isPinned : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? story.isPinned : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isSelf && isLoadedStory && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && user?.usernames?.length,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n  const canShareOwn = Boolean(\n    isSelf\n    && isLoadedStory\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const {\n    shouldRender: shouldRenderSkeleton, transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(!isSelf && !isChangelog);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n\n  useStoryPreloader(userId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ userId, storyId });\n    }\n  }, [storyId, userId]);\n\n  useEffect(() => {\n    loadUserSkippedStories({ userId });\n  }, [userId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    if (!isChatExist) {\n      fetchChat({ chatId: userId });\n    }\n  }, [isChatExist, userId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: userId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, userId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !isVideo || !fullMediaData);\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => { if (hasAllData && !isUnsupported) handlePlayStory(); }, [hasAllData, isUnsupported]);\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isSelf || isDeletedStory || areViewsExpired) return;\n\n    // Refresh recent viewers list each time\n    loadStoryViews({ storyId, isPreload: true });\n  }, [isDeletedStory, areViewsExpired, isSelf, storyId]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) return;\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: userId });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openNextStory();\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ userId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    setCurrentTime(0);\n    onDelete(story!.id);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: userId, storyId });\n    handlePauseStory();\n  });\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getUserFirstOrLastName(user);\n    switch (visibility) {\n      case 'nobody':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: lang('StealthModeOn'),\n        message: lang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${userId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className={isOpen ? 'active' : ''}\n          onClick={onTrigger}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className={buildClassName('icon icon-more', styles.topIcon)} aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    const duration = isLoadedStory && story.content.video?.duration\n      ? story.content.video.duration\n      : undefined;\n\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isSelf) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isSelf && styles.visibilityButtonSelf)}\n        onClick={isSelf ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isSelf && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Avatar\n          peer={user}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderInfo}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getUserFirstOrLastName(user) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={buildClassName(styles.button, styles.buttonVolume)}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                  styles.topIcon,\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={buildClassName(styles.button, styles.buttonMenu)}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>{lang('StorySave')}</MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>{lang('ArchiveStory')}</MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {lang('lng_media_download')}\n              </MenuItem>\n            )}\n            <MenuItem icon=\"eye-closed-outline\" onClick={handleOpenStealthModal}>{lang('StealthMode')}</MenuItem>\n            {!isSelf && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('lng_report_story')}</MenuItem>}\n            {isSelf && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n          </DropdownMenu>\n        </div>\n      </div>\n    );\n  }\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = story && 'recentViewerIds' in story ? story.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [story]);\n\n  function renderRecentViewers() {\n    const { viewsCount, reactionsCount } = story as ApiStory;\n\n    if (!viewsCount) {\n      return (\n        <div className={buildClassName(styles.recentViewers, appearanceAnimationClassNames)}>\n          {lang('NobodyViewed')}\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={buildClassName(\n          styles.recentViewers,\n          styles.recentViewersInteractive,\n          appearanceAnimationClassNames,\n        )}\n        onClick={handleOpenStoryViewModal}\n      >\n        {!areViewsExpired && Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.recentViewersAvatars}\n          />\n        )}\n\n        <span>{lang('Views', viewsCount, 'i')}</span>\n        {Boolean(reactionsCount) && (\n          <span className={styles.reactionCount}>\n            <i className={buildClassName(styles.reactionCountHeart, 'icon icon-heart')} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img src={previewBlobUrl} alt=\"\" className={buildClassName(styles.media, previewTransitionClassNames)} />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPlaying={markStoryPlaying}\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n            onEnded={handleOpenNextStory}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n        <MediaAreaOverlay mediaAreas={mediaAreas} mediaDimensions={dimensions} />\n      </div>\n\n      {isSelf && renderRecentViewers()}\n      {canShareOwn && (\n        <Button\n          className={styles.ownForward}\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n        >\n          <i className=\"icon icon-forward\" aria-hidden />\n        </Button>\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && <div className={styles.captionGradient} />}\n      {hasText && (\n        <StoryCaption\n          key={`caption-${storyId}-${userId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={appearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={userId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isSelf}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang('ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  userId, storyId, isPrivateStories, isArchivedStories, isReportModalOpen, isDeleteModalOpen,\n}): StateProps => {\n  const { currentUserId, appConfig } = global;\n  const user = global.users.byId[userId];\n  const chat = selectChat(global, userId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const { orderedIds, pinnedIds, archiveIds } = selectUserStories(global, userId) || {};\n  const story = selectUserStory(global, userId, storyId);\n  const shouldForcePause = Boolean(\n    viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal,\n  );\n\n  return {\n    user,\n    story,\n    orderedIds: isArchivedStories ? archiveIds : (isPrivateStories ? pinnedIds : orderedIds),\n    isMuted,\n    isSelf: currentUserId === userId,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n    stealthMode: global.stories.stealthMode,\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory, ApiUser, ApiUserStories } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  user?: ApiUser;\n  userStories?: ApiUserStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n}\n\nfunction StoryPreview({\n  user, userStories, lastViewedId, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadUserSkippedStories } = getActions();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!userStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = userStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1);\n    const resultId = byId[previewIndexId]?.id || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, userStories]);\n\n  useEffect(() => {\n    if (story && !('content' in story)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [story]);\n\n  const video = story && 'content' in story ? story.content.video : undefined;\n  const imageHash = story && 'content' in story\n    ? getStoryMediaHash(story)\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!user || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ userId: story.userId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n\n      <div className={styles.content}>\n        <Avatar\n          peer={user}\n          withStory\n          storyViewerMode=\"disabled\"\n        />\n        <div className={styles.name}>{renderText(getUserFirstOrLastName(user) || '')}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { user }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByUserIds,\n      origin,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: user?.id ? lastViewedByUserIds?.[user.id] : undefined,\n    origin,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiUserStories } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getStoryKey } from '../../global/helpers';\nimport { selectIsStoryViewerOpen, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { IS_FIREFOX, IS_SAFARI } from '../../util/windowEnvironment';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSignal from '../../hooks/useSignal';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (storyId: number) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  userIds: string[];\n  currentUserId?: string;\n  currentStoryId?: number;\n  byUserId?: Record<string, ApiUserStories>;\n  isSingleUser?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ANIMATION_DURATION_MS = 350 + (IS_SAFARI || IS_FIREFOX ? ANIMATION_END_DELAY : 20);\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst FROM_ACTIVE_SCALE_VALUE = 0.333;\nconst ANIMATION_TO_ACTIVE_SCALE = '3';\nconst ANIMATION_FROM_ACTIVE_SCALE = `${FROM_ACTIVE_SCALE_VALUE}`;\n\nfunction StorySlides({\n  userIds,\n  currentUserId,\n  currentStoryId,\n  isOpen,\n  isSingleUser,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byUserId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const [renderingUserId, setRenderingUserId] = useState(currentUserId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevUserId = usePrevious(currentUserId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSingleUser = useCurrentOrPrev(isSingleUser, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | null, userId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[userId]) {\n      rendersRef.current[userId] = { current: ref };\n    } else {\n      rendersRef.current[userId].current = ref;\n    }\n  }\n\n  const renderingUserIds = useMemo(() => {\n    if (renderingUserId && (renderingIsSingleUser || renderingIsSingleStory)) {\n      return [renderingUserId];\n    }\n\n    const index = renderingUserId ? userIds.indexOf(renderingUserId) : -1;\n    if (!renderingUserId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, userIds.length);\n\n    return userIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSingleUser, renderingUserId, userIds]);\n\n  const renderingUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !renderingUserId) {\n      return -1;\n    }\n\n    return renderingUserIds.indexOf(renderingUserId);\n  }, [renderingUserId, renderingUserIds]);\n\n  const currentUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !currentUserId) {\n      return -1;\n    }\n    return renderingUserIds.indexOf(currentUserId);\n  }, [currentUserId, renderingUserIds]);\n\n  useEffect(() => {\n    const timeoutId = window.setTimeout(() => {\n      setRenderingUserId(currentUserId);\n    }, ANIMATION_DURATION_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [currentUserId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (renderingUserId !== currentUserId) {\n      timeOutId = window.setTimeout(() => {\n        setRenderingStoryId(currentStoryId);\n      }, ANIMATION_DURATION_MS);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n\n    return () => {\n      window.clearTimeout(timeOutId);\n    };\n  }, [renderingUserId, currentStoryId, currentUserId, renderingStoryId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (prevUserId && prevUserId !== currentUserId) {\n      setIsAnimating(true);\n      timeOutId = window.setTimeout(() => {\n        setIsAnimating(false);\n      }, ANIMATION_DURATION_MS);\n    }\n\n    return () => {\n      setIsAnimating(false);\n      window.clearTimeout(timeOutId);\n    };\n  }, [prevUserId, currentUserId, setIsAnimating]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentUserId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentUserId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentUserId]);\n\n  const slideAmount = currentUserPosition - renderingUserPosition;\n  const isBackward = renderingUserPosition > currentUserPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return userIds.reduce<Record<string, number>>((transformX, userId, index) => {\n      if (userId === renderingUserId) {\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && userIds[index - 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < userIds.length - 1 && userIds[index + 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentUserId === userId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useLayoutEffect(() => {\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([userId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n\n        return;\n      }\n\n      const scale = currentUserId === userId\n        ? ANIMATION_TO_ACTIVE_SCALE\n        : userId === renderingUserId ? ANIMATION_FROM_ACTIVE_SCALE : '1';\n\n      let offsetY = 0;\n      if (userId === renderingUserId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * FROM_ACTIVE_SCALE_VALUE;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (userId === currentUserId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[userId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', scale);\n    });\n  }, [currentUserId, getIsAnimating, renderingUserId]);\n\n  function renderStoryPreview(userId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          user={selectUser(getGlobal(), userId)}\n          userStories={byUserId?.[userId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(userId: string) {\n    const style = buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          userId={userId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper} style={`--story-viewer-scale: ${slideSizes.scale}`}>\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingUserIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingUserIds.map((userId, index) => {\n        if (userId === renderingUserId) {\n          return renderStory(renderingUserId);\n        }\n\n        return renderStoryPreview(userId, index, index - renderingUserPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      userId: currentUserId, storyId: currentStoryId, isSingleUser, isSingleStory, isPrivate, isArchive,\n    },\n  } = selectTabState(global);\n  const { byUserId, orderedUserIds: { archived, active } } = global.stories;\n  const user = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    byUserId,\n    userIds: user?.areStoriesHidden ? archived : active,\n    currentUserId,\n    currentStoryId,\n    isSingleUser,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"hOwWWII6h241MvvB87N5\",\"viewsList\":\"hOwWWII6h241MvvB87N5\",\"views-list-loading\":\"ZaMMMcb_gGs7nmClMvzj\",\"viewsListLoading\":\"ZaMMMcb_gGs7nmClMvzj\",\"info\":\"Yt7QHLaCNE1N3OSWXa_n\",\"centeredInfo\":\"vKqMQNiuvK152lO__j16\",\"view-reaction\":\"x77ctFpUWd2rG2IUxz7y\",\"viewReaction\":\"x77ctFpUWd2rG2IUxz7y\",\"header\":\"oGYCTCHvXEkdIBMd0dHh\",\"content\":\"NfqCS7dx9c9nxYXZc3p2\",\"top-button\":\"hMKJ4bqsyGw0fQn5RwVQ\",\"topButton\":\"hMKJ4bqsyGw0fQn5RwVQ\",\"contact-filter\":\"RnVt9sK0OgnrHADARI9k\",\"contactFilter\":\"RnVt9sK0OgnrHADARI9k\",\"selected\":\"deHea5ii46_J57LhYmaj\",\"sort\":\"Mq_j5_FRMS06qJcPCwmC\",\"sort-button\":\"BYQ1X4iADCMrIUqdd3Lt\",\"sortButton\":\"BYQ1X4iADCMrIUqdd3Lt\",\"icon-sort\":\"yq5P30VXV4gSKmSHmXLL\",\"iconSort\":\"yq5P30VXV4gSKmSHmXLL\",\"icon-down\":\"mjcXdhEuASJWWO5Cqlxq\",\"iconDown\":\"mjcXdhEuASJWWO5Cqlxq\",\"search\":\"vs1AYj85WQxzI646EBZt\",\"bottom-info\":\"sWTOVQoWoeNAu2G8kVOl\",\"bottomInfo\":\"sWTOVQoWoeNAu2G8kVOl\",\"scrolled\":\"knxco2DJ3lthvQo2SOG6\",\"footer\":\"RqsPFLpLbJYFm50JYSiw\",\"close\":\"pONeLHkbjIjtqQT59wyh\",\"opacity-fade-in\":\"h15igx036PH4epiXwUBg\",\"opacityFadeIn\":\"h15igx036PH4epiXwUBg\",\"fadeIn\":\"T9DzW6zCmxNgXv1YaUji\",\"blocked\":\"EVxErnsRszao77tgwSaA\",\"check\":\"HbQucamQwAYpvNnTqHVM\",\"menuBubble\":\"Y3KJ1StmiJpvbpeqbMuv\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiStoryView, ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiStoryView;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\nconst StoryView = ({\n  storyView,\n  user,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat, closeStoryViewer, unblockUser, blockUser, deleteContact, updateStoryView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    closeStoryViewer();\n\n    setTimeout(() => {\n      openChat({ id: storyView.userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    const { userId, areStoriesBlocked, isUserBlocked } = storyView;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId, isOnlyStories: true });\n            updateStoryView({ userId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId, isOnlyStories: true });\n            updateStoryView({ userId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId });\n            updateStoryView({ userId, isUserBlocked: false });\n          } else {\n            blockUser({ userId });\n            updateStoryView({ userId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, user]);\n\n  return (\n    <ListItem\n      key={storyView.userId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => handleClick()}\n      rightElement={storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      <PrivateChatInfo\n        userId={storyView.userId}\n        noStatusOrTyping\n        status={formatDateAtTime(lang, storyView.date * 1000)}\n        statusIcon=\"message-read\"\n        withStory\n        forceShowSelf\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const user = selectUser(global, storyView.userId);\n\n  return {\n    user,\n    availableReactions: global.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectUserStory,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  viewsById?: Record<string, ApiStoryView>;\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  viewsById,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViews, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story!.date + viewersExpirePeriod) < getServerTime();\n  const viewsCount = story?.viewsCount || 0;\n  const reactionsCount = story?.reactionsCount || 0;\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViewIds = useMemo(() => {\n    if (!viewsById) {\n      return undefined;\n    }\n\n    return Object.values(viewsById)\n      .sort(prepareComparator(areReactionsFirst))\n      .map((view) => view.userId);\n  }, [areReactionsFirst, viewsById]);\n\n  const placeholderCount = !sortedViewIds?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViewIds?.length) && sortedViewIds!.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViews({\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <i className={buildClassName(\n          'icon',\n          areReactionsFirst ? 'icon-heart-outline' : 'icon-recent',\n          styles.iconSort,\n        )}\n        />\n        <i className={buildClassName('icon icon-down', styles.iconDown)} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViewIds?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViewIds?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViewIds}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViewIds?.map((id) => (\n            <StoryView key={id} storyView={viewsById![id]} />\n          ))}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              // eslint-disable-next-line react/no-array-index-key\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiStoryView, b: ApiStoryView) => {\n    if (areReactionsFirst) {\n      if (a.reaction && !b.reaction) {\n        return -1;\n      }\n      if (!a.reaction && b.reaction) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, viewsById, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectUserStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    viewsById,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUserStory,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  userId?: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  userId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [idStoryForDelete, setIdStoryForDelete] = useState<number | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePrevious(isOpen);\n  const prevBestImageData = usePrevious(bestImageData);\n  const prevUserId = usePrevious(userId);\n  const prevOrigin = usePrevious(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIdStoryForDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((id: number) => {\n    setIdStoryForDelete(id);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setIdStoryForDelete(undefined);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && userId && thumbnail && origin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(userId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevUserId && prevBestImageData && prevOrigin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevUserId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    userId,\n    prevUserId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className={buildClassName('icon icon-close', styles.topIcon)} aria-hidden />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        storyId={idStoryForDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        userId={userId}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, userId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = userId && storyId ? selectUserStory(global, userId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    userId,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"pZFkNPeaXsO10mdITSZR\",\"buttons\":\"bYI0Nm410CJjgAhnH3EL\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiGeoPoint } from '../../../api/types';\n\nimport { prepareMapUrl } from '../../../util/map';\nimport { IS_IOS, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  geoPoint?: ApiGeoPoint;\n  zoom?: number;\n};\n\nconst OpenMapModal = ({ geoPoint, zoom }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          Open Street Maps\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"jztdH6qO5uz3c2muOpPT\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\n\nimport useWindowSize from '../../../../hooks/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        closeWebApp();\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport type { PopupOptions, WebAppInboundEvent } from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst LUMA_THRESHOLD = 128;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n\n  const [shouldConfirmClosing, setShouldConfirmClosing] = useState(false);\n  const [isCloseModalOpen, openCloseModal, hideCloseModal] = useFlag(false);\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequesingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(webApp!.url);\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (shouldConfirmClosing) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    const result = await callApi('allowBotSendMessages', { bot: bot! });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot: bot!,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n\n      setShouldConfirmClosing(false);\n      hideCloseModal();\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n      markUnloaded();\n    }\n  }, [hideCloseModal, isOpen, markUnloaded]);\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      if (eventData.color_key) {\n        const themeParams = extractCurrentThemeParams();\n        const key = eventData.color_key;\n        const newColor = themeParams[key];\n        const color = validateHexColor(newColor) ? newColor : headerColor;\n        setHeaderColor(color);\n      }\n\n      if (eventData.color) {\n        const color = validateHexColor(eventData.color) ? eventData.color : headerColor;\n        setHeaderColor(color);\n      }\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setShouldConfirmClosing(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n      || eventData.buttons.length > 3 || isRequestingPhone || isRequesingWriteAccess\n      || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequesingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n  }\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.moreButton, isMenuOpen && 'active')}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme]);\n\n  function renderHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        text={lang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequesingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={lang('lng_bot_allow_write_title')}\n        text={lang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={lang('lng_bot_allow_write_confirm')}\n      />\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={hideCloseModal}\n        title={lang('lng_bot_close_warning_title')}\n        text={lang('lng_bot_close_warning')}\n        confirmHandler={closeWebApp}\n        confirmIsDestructive\n        confirmLabel={lang('lng_bot_close_warning_sure')}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CWJDTp88gsPYaq6de8yn\",\"more-button\":\"_VJv8UKGVoUJKFRjrn8B\",\"moreButton\":\"_VJv8UKGVoUJKFRjrn8B\",\"close-icon\":\"l4SsaN4Dx0bKGb83CYhA\",\"closeIcon\":\"l4SsaN4Dx0bKGb83CYhA\",\"state-back\":\"jscxQ3PMmXnE2oWrMVBY\",\"stateBack\":\"jscxQ3PMmXnE2oWrMVBY\",\"loading-spinner\":\"ElvN45roGsPDzZuJjk3H\",\"loadingSpinner\":\"ElvN45roGsPDzZuJjk3H\",\"hide\":\"L441lq9G5_x3lNeWNFlB\",\"frame\":\"uFAepVSf6dgEREGs6Kio\",\"with-button\":\"ruOZRuUOenMeQp5WIpy0\",\"withButton\":\"ruOZRuUOenMeQp5WIpy0\",\"main-button\":\"QoAHIcQHa0NNmR8fma3w\",\"mainButton\":\"QoAHIcQHa0NNmR8fma3w\",\"visible\":\"OViz2KN7MjYjs1f5Z3JN\",\"hidden\":\"IEfxtMw7c1U4BRBpulWm\",\"main-button-spinner\":\"e4f56fQ8AjPxn8H1Avdv\",\"mainButtonSpinner\":\"e4f56fQ8AjPxn8H1Avdv\",\"web-app-popup\":\"afCqZ6iSD2Iw6bKyAKO1\",\"webAppPopup\":\"afCqZ6iSD2Iw6bKyAKO1\",\"without-title\":\"GuFs2OL_xXL5ODh10kTj\",\"withoutTitle\":\"GuFs2OL_xXL5ODh10kTj\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {bot?.isInactive && bot.isForSideMenu && (\n        renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\",\"font-icon\":\"r6_o8xZKIo11QFFYm2Hv\",\"fontIcon\":\"r6_o8xZKIo11QFFYm2Hv\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  isFontIcon?: boolean;\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  onClick?: VoidFunction;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  onClick,\n}) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <i\n          className={buildClassName(styles.fontIcon, `icon icon-${icon}`)}\n          aria-hidden\n          style={`--item-color: rgb(${r},${g},${b})`}\n        />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport Button from '../ui/Button';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, `icon-${floatingBadgeIcon}`, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dfgGrPUU6AC7NazJh8Ut\",\"header\":\"Y9bbyTXeZIKzoa8wtnkn\",\"circle\":\"eTSbeIbZl_YRbAPcqHhQ\",\"title\":\"me5CfUvQ6RleMxtFjIaR\",\"features\":\"ssjliTyWlTUXFLdz5NJd\",\"mobile\":\"ckFVT8AXlwgCejTXWdfQ\",\"scrolled\":\"T0nWA26c2Q0j0Z_PpexK\"};","import React, { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { DPR } from '../../../../util/windowEnvironment';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\n\nimport Avatar from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-closed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = 5.25 * DPR * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n    });\n  }, []);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE / DPR;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"stories\":\"uOZMPO0FyBVTsM6ACXDw\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'stories',\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"status-emoji\":\"ZDQ58Gu2MpISHIigNnCf\",\"statusEmoji\":\"ZDQ58Gu2MpISHIigNnCf\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\",\"stickerSetText\":\"CCRIHzjKzzj6y3nYJQKk\",\"stickerSetLink\":\"_G_ogp7ec2JUxZUhoaAi\",\"stickerSetLinkIcon\":\"vJ2GKZFltN22CJDw5Bdu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  const handleClick = useLastCallback(() => {\n    handleClickWithStartParam();\n  });\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const stickerSetTitle = useMemo(() => {\n    if (!fromUserStatusSet || !fromUser) return undefined;\n\n    const template = lang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n    const [first, second] = template.split('{link}');\n\n    const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n      <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n    ) : undefined;\n    const link = (\n      <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n        {emoji}{renderText(fromUserStatusSet.title)}\n      </span>\n    );\n    return [renderText(first), link, renderText(second)];\n  }, [fromUser, fromUserStatusSet, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return lang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            {fromUserStatusEmoji ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {fromUserStatusSet ? stickerSetTitle : renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Modal from '../../ui/Modal';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          peer={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTimeOffset } from '../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, !hasCustomColor);\n\n  const {\n    id, isCustomEmoji, hasEffect: isPremium, stickerSetInfo,\n  } = sticker;\n  const isLocked = !isCurrentUserPremium && isPremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuPosition);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n\n  const getLayout = () => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true });\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      openPremiumModal({ initialSection: 'premium_stickers' });\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: sticker,\n      expires: Date.now() / 1000 + duration + getServerTimeOffset(),\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <i className=\"icon icon-lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <i className=\"icon icon-premium\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport CustomEmoji from './CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionUniqueKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport ReactionEmoji from './ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isPopular\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiReaction, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionUniqueKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"syvgWO0b6lIEPd3iu1TA\",\"list-item\":\"_nKqEo7SgYwpaclSSCIx\",\"listItem\":\"_nKqEo7SgYwpaclSSCIx\",\"title\":\"R7LNh8TMqiktRuTuESsf\",\"subtitle\":\"so4259O2hcdGOxENXdqc\",\"languages\":\"DiSTH_4CZnPK8Dh8Tpfq\"};","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getPrivateChatUserId, isUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyExceptions,\n  selectNotifySettings, selectUser,\n} from '../../../global/selectors';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"large\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  filterUsersByName,\n  sortChatIds,\n} from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  localContactIds,\n  localChatIds,\n  localUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport Checkbox from '../../../ui/Checkbox';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\n\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport Loading from '../../../ui/Loading';\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useLastCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleCopyPrimaryClicked = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink(inviteLink);\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={!url ? lang('Loading') : url}\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\",\"subtitle\":\"t3PK9_nPdL12eMsiMNcM\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition, unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <Checkbox\n          label=\"Enable autoupdates\"\n          checked={Boolean(isAutoUpdateEnabled)}\n          onCheck={handleIsAutoUpdateEnabledChange}\n        />\n\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('GeneralSettings.StatusBarItem')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{lang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiLanguage } from '../../../api/types';\nimport type { ISettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    loadAuthorizations();\n  }, []);\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('TelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('PrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('lng_settings_ask_ok')}\n        title={lang('AskAQuestion')}\n        text={lang('lng_settings_ask_sure')}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyBio?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyBio,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedUsers();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, []);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBio)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyBio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyBio: privacy.bio,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  onScreenSelect,\n  onReset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        onScreenSelect={onScreenSelect}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {secondaryScreen && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n          onScreenSelect={onScreenSelect}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  onScreenSelect,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  onScreenSelect: (screen: SettingsScreens) => void;\n}) {\n  const { setPrivacyVisibility } = getActions();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n    ];\n    if (hasNobody) {\n      options.push({ value: 'nobody', label: lang('P2PNobody') });\n    }\n    return options;\n  }, [lang, screen]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? lang('PrivacyPhoneInfo') : lang('PrivacyPhoneInfo3');\n      }\n      default:\n        return undefined;\n    }\n  }, [lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return lang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return lang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const prepareSubtitle = useLastCallback((userIds?: string[], chatIds?: string[]) => {\n    const userIdsCount = userIds?.length || 0;\n    const chatIdsCount = chatIds?.length || 0;\n\n    if (!userIdsCount && !chatIdsCount) {\n      return lang('EditAdminAddUsers');\n    }\n\n    const userCountString = userIdsCount > 0 ? lang('Users', userIdsCount) : undefined;\n    const chatCountString = chatIdsCount > 0 ? lang('Chats', chatIdsCount) : undefined;\n\n    return [userCountString, chatCountString].filter(Boolean).join(', ');\n  });\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(privacy?.allowUserIds, privacy?.allowChatIds);\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {(primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(allowedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(deniedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { filterChatsByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) setNewSelectedContactIds(selectedContactIds);\n  }, [isActive, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => chatId !== currentUserId);\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: (ApiChat | ApiUser)[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n              <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {canShowReactionsCount && message.reactors?.count ? (\n                  canShowSeenBy && seenByDatesCount\n                    ? lang(\n                      'Chat.OutgoingContextMixedReactionCount',\n                      [message.reactors.count, seenByDatesCount],\n                    )\n                    : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                ) : (\n                  seenByDatesCount === 1 && seenByRecentPeers\n                    ? renderText(\n                      isUserId(seenByRecentPeers[0].id)\n                        ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                        : (seenByRecentPeers[0] as ApiChat).title,\n                    ) : (\n                      seenByDatesCount\n                        ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                        : lang('Conversation.ContextMenuNoViews')\n                    )\n                )}\n              </span>\n            </span>\n            <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage, ApiReaction, ApiStickerSet, ApiStickerSetInfo, ApiThreadInfo,\n} from '../../../api/types';\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageVideo,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageLink,\n  selectMessageTranslations,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  messageLink?: string;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  messageLink,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(messageLink!);\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n    const messageLink = selectMessageLink(global, message.chatId, threadId, message.id);\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      messageLink,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanManage, selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectIsRightColumnShown, selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    blockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? lang('BotRestart') : lang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? lang('Unblock') : lang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectTabState,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChatReactions, ApiReaction } from '../../../api/types';\n\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiMessageEntity,\n  ApiReaction, ApiReactionCustomEmoji, ApiSticker, ApiStory, ApiStorySkipped,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectTabState, selectUserStory,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n  sendAsMessage,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryUserId = useCurrentOrPrev(story?.userId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryUserId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReaction | ApiSticker) => {\n    const reaction = 'id' in item ? { documentId: item.id } : item;\n\n    const sticker = 'documentId' in item\n      ? getGlobal().customEmojis.byId[item.documentId] : 'emoticon' in item ? undefined : item;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        userId: renderedStoryUserId!, storyId: renderedStoryId!, reaction, shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in item) {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseMessageInput(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyUserId, storyId, position, sendAsMessage,\n  } = state.reactionPicker || {};\n  const story = storyUserId && storyId\n    ? selectUserStory(global, storyUserId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : Boolean(storyUserId);\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"storyMenu\":\"nwZabdh1rB72Eb1x64Og\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { isUserId } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_ELECTRON_BUILD } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON_BUILD ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessages,\n  selectCurrentTextSearch,\n  selectUser,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      let senderPeer = message.senderId\n        ? selectUser(global, message.senderId) || selectChat(global, message.senderId)\n        : undefined;\n\n      if (!senderPeer && message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        const originalSender = isChannelPost && fromChatId ? selectChat(global, fromChatId) : undefined;\n        if (originalSender) senderPeer = originalSender;\n      }\n\n      if (!senderPeer) {\n        return undefined;\n      }\n\n      return {\n        message,\n        senderPeer: senderPeer!,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer: ApiUser | ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={senderPeer} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessage,\n  StatisticsGraph,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n} from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessagePublicForward, ApiMessageStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage } from '../../api/types';\n\nimport { getMessagePoll } from '../../global/helpers';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"general\":\"CSjgq5gkTxM3iZQ9oJ9b\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport {\n  filterUsersByName, getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, sortChatIds, sortUserIds,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiChat, ApiInvoice, ApiPaymentCredentials,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { RefObject } from 'react';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { Price, ShippingOption } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\nimport type { Price } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","OFFSET_DESKTOP","OFFSET_MOBILE","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getUserStoryHtmlId","StoryViewerOrigin","storyRibbonStyles","css","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlide","slide","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","mediaAreas","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","storyId","deleteStory","openNextStory","handleDeleteStoryClick","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","usersById","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterUsersByName","Picker","itemIds","MEMO_EMPTY_ARRAY","filterValue","filterPlaceholder","searchInputId","isSearchable","forceShowSelf","onSelectedIdsChange","onFilterChange","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectUserStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryPinned","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","option","checked","handleVisibilityChange","newVisibility","teactExperimentControlled","tabIndex","role","closeFriends","denyList","handleActionClick","getUserFullName","Switcher","label","renderPrivacyList","CloseFriends","AllowDenyList","noBackdrop","onCloseAnimationEnd","renderHeaderContent","slideClassName","prepareStyle","mediaArea","rotation","coordinates","buildStyle","mediaDimensions","openMapModal","geo","geoPoint","handleMediaAreaClick","OVERFLOW_THRESHOLD_PX","isExpanded","onExpand","onFold","contentRef","showMoreButtonRef","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","button","offsetWidth","setProperty","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","DEFAULT_STORY_DURATION_S","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","isPrivateStories","isArchivedStories","appConfig","tabState","viewModal","isPrivacyModalOpen","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","isPremiumModalOpen","orderedIds","pinnedIds","archiveIds","selectUserStories","shouldForcePause","reactionPicker","isSelf","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","isSingleStory","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadUserSkippedStories","openStoryViewModal","copyStoryLink","openChat","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","canPinToProfile","useCurrentOrPrev","canUnpinFromProfile","areViewsExpired","canCopyLink","isPublic","usernames","canShare","canShareOwn","canPlayStory","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","useStoryPreloader","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","onMouseDown","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","isLongPressActive","isPressed","timerId","canProcessEvent","cancel","useLongPress","hasAllData","useBackgroundMode","load","isPreload","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleVideoStoryTimeUpdate","handleOpenChat","handleOpenPrevStory","handleOpenNextStory","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleForwardClick","handleOpenStoryViewModal","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","recentViewers","getGlobal","recentViewerIds","StoryProgress","renderStoriesTabs","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","onPlaying","MediaAreaOverlay","viewsCount","reactionsCount","AvatarList","peers","renderRecentViewers","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByUserIds","lastViewedId","userStories","openStoryViewer","lastReadId","hasUnreadStories","imageHash","thumbUrl","withStory","storyViewerMode","ANIMATION_DURATION_MS","IS_SAFARI","IS_FIREFOX","currentStoryId","isSingleUser","isPrivate","isArchive","byUserId","orderedUserIds","archived","active","areStoriesHidden","selectIsStoryViewerOpen","stopActiveReaction","renderingUserId","setRenderingUserId","renderingStoryId","setRenderingStoryId","prevUserId","renderingIsArchive","renderingIsPrivate","renderingIsSingleUser","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingUserIds","slice","renderingUserPosition","currentUserPosition","timeoutId","timeOutId","containerId","getStoryKey","calculateTransformX","reduce","transformX","entries","Story","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","rightElement","reaction","ReactionStaticEmoji","withIconHeart","withPortalForMenu","menuBubbleClassName","PrivateChatInfo","noStatusOrTyping","status","formatDateAtTime","statusIcon","viewsById","nextOffset","isLoading","closeStoryViewModal","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","query","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViewIds","values","sort","a","b","prepareComparator","view","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","faded","SearchInput","onScroll","InfiniteScroll","items","onLoadMore","StoryView","Array","_","PlaceholderChatInfo","closeStoryPrivacyEditor","idStoryForDelete","setIdStoryForDelete","isPrevOpen","handleOpenDeleteModal","handleCloseDeleteModal","thumb","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StealthModeModal","StorySettings","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","Loading","GroupChatInfo","chats","listIds","orderedPinnedIds","activeListIds","archivedListIds","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","ChatOrUserPicker","isManyMessages","isStory","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getChatTitle","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","closeMapModal","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","openUrl","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","shouldConfirmClosing","setShouldConfirmClosing","isCloseModalOpen","openCloseModal","hideCloseModal","isLoaded","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequesingWriteAccess","setIsRequestingWriteAccess","unlockPopupsAt","handlePopupOpened","handlePopupClosed","sequentialLimit","resetAfter","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","openInvoice","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","eventType","eventData","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","color_key","newColor","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","canWrite","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","buttonId","button_id","handleAppPopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","handleAcceptPhone","handleAcceptWriteAccess","openBotChat","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","shortName","isInactive","isForSideMenu","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","_COLORS$Math$ceil","isFontIcon","count","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","fill","isLast","isPreLast","isFirst","isPreFirst","isInvisible","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","cycleRestrict","l","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","DPR","currentUser","circleRef","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","section","PremiumFeatureItem","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","months","scrollLeft","scrollLeftOriginal","toString","reverseIndex","prevElement","reverseElement","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","PremiumFeaturePreviewStories","videoSections","PremiumFeaturePreviewVideo","videos","SliderDots","formatCurrency","amount","currency","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isClosing","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","handleOpenStatusSet","stickerSetTitle","template","first","second","emoji","thumbCustomEmojiId","CustomEmoji","link","isClosed","PremiumFeatureModal","isBig","PremiumLogo","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","closeGiftPremiumModal","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","currentIndex","stickerSetEl","isClose","animateScroll","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","isLottie","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","coords","useCoordsInSharedCanvas","accessHash","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","noContextMenu","isSavedMessages","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","setEmojiStatus","menuRef","isCustomEmoji","hasEffect","isLocked","shouldLoad","isIntesectingForShowing","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","shouldRenderContextMenu","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","expires","getServerTimeOffset","shouldShowCloseButton","contextMenuItems","item","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","withSharedAnimation","noFastClick","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","AnimatedIconWithPreview","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","addSetButtonText","pill","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","canvasRef","StickerButton","has","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","some","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","StickerSetCover","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","newChatsCount","badgeText","descriptionText","handleButtonClick","peerIds","handleSelectionToggle","areAllSelected","alreadyPeerIds","Badge","isAlternateColor","suggestedPeerIds","leaveChatlist","joinedIds","isNotJoined","selectedCount","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","ChatlistAlready","ChatlistNew","ChatlistDelete","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","leftId","rightId","handleCloseSeenByModal","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","LoadMoreDirection","formatIntegerCompact","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","secondaryIcon","narrow","highlight","createMapStateToProps","fetchingStatus","globalSearch","currentType","isVoice","byChatId","globalMessagesByChatId","activeDownloads","searchChatId","shouldWarnAboutSvg","byKey","runThrottled","cb","searchMessagesGlobal","openAudioPlayer","foundMessages","handleMessageFocus","handlePlayAudio","canRenderContents","noFastList","NothingFound","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","Audio","AudioOrigin","getSenderName","onDateClick","buttonRef","activeElement","privateChatUserId","privateChatUser","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","shouldReplaceHistory","useSelectWithEnter","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","foundTopicIds","dateSearchQuery","onSearchDateSelect","onReset","nothingFound","DateSuggest","LeftSearchResultTopic","ChatMessage","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","storyViewerOrigin","MuteChatModal","ChatFolderModal","topUserIds","topPeers","recentlyFoundChatIds","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","LeftSearchResultChat","localContactIds","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","handleClickShowMoreLocal","handleClickShowMoreGlobal","noScrollRestoreOnTop","PickerSelectedItem","chatOrUserId","RecentContacts","CURRENT_TYPE","observeIntersectionForMedia","Document","withDate","datetime","smaller","WebLink","onMessageClick","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","maxChats","selectCurrentLimit","mode","selectedChatTypes","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","openLimitReachedModal","chatTypes","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","shouldMinimize","isTouched","setIsTouched","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","typeKey","isMinimized","canClose","withChatType","dispatch","chatFilter","selectedChatIds","selectChatFilters","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","isChatList","newFilter","handleSelectedIdsChange","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","renderChatType","ShowMoreButton","itemName","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","translation","handleDragEnd","canCreateNewFolder","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","isStatic","inviteLink","onRevoke","copyLink","copyTextToClipboard","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","readOnly","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","currentScreen","shownScreen","onScreenSelect","openShareChatFolderModal","editChatFolder","handleReset","SettingsScreens","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","fullReset","STICKER_SIZE_PASSCODE","previewUrl","lockPreviewUrl","passcode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleChangePasswordCurrent","currentPasscode","decryptSession","handleChangePasswordNew","handleTurnOff","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","getSessionIcon","session","platform","device","deviceModel","systemVersion","activeSessions","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","iconClassName","sessionHashes","sessionHash","RadioGroup","selected","areButtonsInColumn","SettingsActiveSession","activeWebSessions","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","newValue","customEmojiSets","StickerSetCard","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","language","doNotTranslate","displayedOptions","setDisplayedOptions","subLabel","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","_state$orderedUsernam","_state$dragOrderUsern","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","nonInteractive","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","IS_ELECTRON","IS_WINDOWS","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","languages","canTranslate","canTranslateChats","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","sessionCount","loadProfilePhotos","loadAuthorizations","openSupportChat","isSupportDialogOpen","openSupportDialog","closeSupportDialog","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","langName","PremiumIcon","withGradient","big","FAQ_URL","PRIVACY_URL","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","blocked","hasPasscode","blockedCount","totalCount","webAuthCount","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyBio","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","allowDisabledClick","blockedIds","userSearch","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","BlockUserModal","getPrivacyKey","screen","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","setPrivacyVisibility","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","prepareSubtitle","userIdsCount","chatIdsCount","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","addByPhone","phoneP2P","secondaryScreen","SettingsPrivacyPublicProfilePhoto","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","updatedIds","config","selectedReaction","defaultReaction","setDefaultReaction","emoticon","addedSetIds","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","STICKER_SIZE_TWO_FA","animatedEmoji","selectAnimatedEmoji","codeLength","twoFaSettings","waitingEmailCodeLength","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","onTransitionEnd","StoryToggler","canShow","StoryRibbon","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","getCopyLabel","hasSelection","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","shouldRenderAsHtml","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","menuElMinWidth","withScroll","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","MenuSeparator","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isChatGroup","membersCount","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","messageLink","selectMessageLink","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","getDayStartAt","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyUserId","sendAsMessage","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","sendStoryReaction","renderedMessageId","renderedChatId","renderedStoryUserId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","isFree","customEmojiMessage","parseMessageInput","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","ReactionPickerLimited","div","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","noReplaceNewlines","native","IS_ELECTRON_BUILD","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","handleMouseDown","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","isMessageComposer","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseEnter","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbnailDataUrl","decoding","inlineResult","webThumbnail","BaseResult","_gif","isForGallery","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderPeer","forwardInfo","isChannelPost","originalSender","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","CHANNEL_TITLE_EMPTY","management","isSignaturesShown","canChangeInfo","canInvite","exportedInvites","_chat$membersCount","updateChat","toggleSignatures","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","ManagementProgress","adminsCount","adminMembersById","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleToggleSignatures","handleClickSubscribers","handleRemovedUsersClick","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","isChatPublic","joinRequests","onChatMemberSelect","canAddNewAdmins","adminRights","addAdmins","adminMembers","isOwner","handleAdminMemberClick","promotedByUserId","handleAddAdminClick","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","bannedRights","RemoveGroupUserModal","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canBanUsers","isChannelsPremiumLimitReached","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","handleUpdateGroup","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","permissions","setPermissions","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handlePermissionChange","handleSavePermissions","handleDismissAdmin","getControlIsDisabled","memberStatus","handleCustomTitleChange","changeInfo","blocking","postMessages","editMessages","banUsers","inviteUsers","pinMessages","manageCall","manageTopics","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","havePermissionChanged","setHavePermissionChanged","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleAddExceptionClick","handleExceptionMemberClick","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","editExportedChatInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","STICKER_SIZE_INVITES","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","personalPhoto","notPersonalPhoto","uploadContactProfilePhoto","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","invoice","prices","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","noRedirect","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","useFocusAfterAnimation","animationDuration","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","Select","hasArrow","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}