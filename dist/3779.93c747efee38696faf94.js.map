{"version":3,"file":"3779.93c747efee38696faf94.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete\"\n      title=\"Are you sure?\"\n    >\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n        {lang('Preview.DeletePhoto')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) return;\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations, currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport, windowSize]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      text={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  isForumPanelOpen?: boolean;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  onReset,\n  onTopicSearch,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} isForumPanelOpen={isForumPanelOpen} />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useLayoutEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage, ApiReaction, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  threadId,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = renderingStickerSet?.installedDate;\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !isAdded && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getHasAdminRight,\n  getCanManageTopic,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && (withForumActions || isTopic)) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (chat.isCreator || getHasAdminRight(chat, 'manageTopics'));\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: global.isChatInfoShown && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { hasPreview } from '../../../util/files';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst CAPTION_SYMBOLS_LEFT_THRESHOLD = 100;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji } = getActions();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    onCaptionUpdate,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = Array.from(files).filter((file) => !isQuick || hasPreview(file));\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const leftChars = useMemo(() => {\n    const captionLeftBeforeLimit = captionLimit - getHtmlTextLength(caption);\n    return captionLeftBeforeLimit <= CAPTION_SYMBOLS_LEFT_THRESHOLD ? captionLeftBeforeLimit : undefined;\n  }, [caption, captionLimit]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvas2Ref = useRef<HTMLCanvasElement>(null);\n\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const canCut = !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = stickersPerRow * 3 - 1;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, stickerSet.count) / stickersPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(stickerSet.count / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n        {!isRecent && isEmoji && !stickerSet.installedDate && (\n          <Button\n            className=\"symbol-set-add-button\"\n            withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n            onClick={handleAddClick}\n            pill\n            size=\"tiny\"\n            fluid\n          >\n            {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n          </Button>\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvas2Ref} className=\"shared-canvas\" />}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvas2Ref\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              />\n            );\n          })}\n        {isCut && stickerSet.count > itemsBeforeCutout && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className: string;\n  loadAndPlay: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedCustomEmojiIds));\n\n    const filteredFeaturedIds = featuredCustomEmojiIds?.filter((id) => !addedCustomEmojiIds.includes(id)) || [];\n    const featuredSetIds = Object.values(pickTruthy(stickerSetsById, filteredFeaturedIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n      ...featuredSetIds,\n    ];\n  }, [addedCustomEmojiIds, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n  isChatSuperGroup,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 9;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n      'manageTopics',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && isChatSuperGroup(chat) && getHasAdminRight(chat, 'changeInfo');\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    error: global.payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: global.payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","IS_SINGLE_COLUMN_LAYOUT","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","lastFrameSizeRef","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","forEach","reaction","some","r","isSameReaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","foundTopicIds","searchChatId","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","isDragged","draggedTop","subtitle","narrow","secondaryIcon","multiline","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","sharedCanvasRef","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","isForumPanelOpen","onTopicSearch","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","has","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","toggleReaction","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","reportMessageIds","scheduledMaxDate","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isAdded","installedDate","isEmoji","isButtonLocked","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","getDayStartAt","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","customEmojiForEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","hasPreview","leftChars","captionLeftBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","isCustomEmojiPicker","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","sharedCanvas2Ref","isConfirmModalOpen","openConfirmModal","closeConfirmModal","isRecent","isFavorite","FAVORITE_SYMBOL_SET_ID","isPremiumSet","handleClearRecent","handleAddClick","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","canCut","isCut","expand","itemsBeforeCutout","heightWhenCut","favoriteStickerIdsSet","isHqEmoji","canvasRef","canViewSet","onUnfaveClick","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","sharedCanvasHqRef","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","filteredFeaturedIds","featuredSetIds","noPopulatedSets","stickerSetEl","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}