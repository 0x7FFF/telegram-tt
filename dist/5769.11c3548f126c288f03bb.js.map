{"version":3,"file":"5769.11c3548f126c288f03bb.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/ui/Toggle.module.scss?0590","webpack://telegram-t/./src/components/ui/Toggle.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport { useLastCallback } from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"pHTSMORJ7J73wlJmXnNb\",\"widget\":\"bCgS149_amzM_wXYhOwW\",\"min\":\"EIngX7JB2IwA5XnGAlpo\",\"mid\":\"bNWGD8kaT2IHf7HrmLoA\",\"max\":\"FiCjIrDiSiJDbaafBQ8V\",\"filler\":\"KAFaJ8frkI3Uu05TmeTH\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Toggle.module.scss';\n\ninterface OwnProps {\n  value: 'min' | 'mid' | 'max';\n}\n\nfunction Toggle({ value }: OwnProps) {\n  return (\n    <div className={buildClassName(styles.root, 'Toggle')} aria-hidden>\n      <i className={buildClassName(styles.filler, styles[value])} />\n      <i className={buildClassName(styles.widget, styles[value])} />\n    </div>\n  );\n}\n\nexport default memo(Toggle);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME, APP_VERSION,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isAuthRememberMe?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  isAuthRememberMe,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(isAuthRememberMe ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  }, [setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(global, id);\n\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n            } else {\n              openShareChatFolderModal({\n                folderId: id,\n              });\n            }\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [displayedFolders, folderCountersById, lang, maxFolders, folderInvitesById, maxFolderInvites]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={resizeRef}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      afterChildren={(\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n    >\n      {renderContent}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV, MouseButton } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.type === 'mousedown' && e.button !== MouseButton.Main) {\n      return;\n    }\n\n    onClick?.(e);\n  }, [onClick]);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={IS_TOUCH_ENV ? handleClick : undefined}\n        onMouseDown={!IS_TOUCH_ENV ? handleClick : undefined}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  }, [pinnedMessageIds, pinnedMessageId, onFocusPinnedMessage, chatId, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { LOCAL_MESSAGE_MIN_ID } from '../../../config';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 100;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useStateRef(toggleScrollTools);\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady, toggleScrollToolsRef]);\n\n  const freezeShortly = useCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, unfreezeForFab, unfreezeForNotch]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCanPlayAnimatedEmojis,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  },\n  [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying, senderChat,\n    senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { IS_TOUCH_ENV, MouseButton } from '../../util/windowEnvironment';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.type === 'mousedown' && e.button !== MouseButton.Main) {\n      return;\n    }\n\n    onClick?.();\n  }, [onClick]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && IS_TOUCH_ENV ? handleClick : undefined}\n      onMouseDown={message && !IS_TOUCH_ENV ? handleClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo, withEffect,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        user={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  const handleQuickButtonClick = useCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  }, [webPage]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            lastSyncTime={lastSyncTime}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.classList.add('has-appendix-thumb');\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, [setProgress]);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => (\n            <Avatar\n              key={user.id}\n              user={user}\n              size=\"micro\"\n            />\n          ))}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  LOCAL_MESSAGE_MIN_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectUserFullInfo,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = (\n      threadTopMessageId\n      && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n    )\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  }, [\n    updateStickyDates, hasTools, getForceNextPinnedInHeader, onPinnedIntersectionChange, type, chatId, threadId,\n  ]);\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          animateScroll(\n            container,\n            lastItemElement!,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { RefObject } from 'react';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, [setContainerHeight]);\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendWhenOnline = useCallback(() => {\n    handleMessageSchedule({ }, SCHEDULED_WHEN_ONLINE);\n  }, [handleMessageSchedule]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { IS_ANDROID, IS_IOS, MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id) && lastSyncTime,\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\n\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(chatId?: string, threadId?: number, pinnedIds?: number[]) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  }, [\n    chatId, threadId, key, pinnedIds, getLoadingPinnedId, getForceNextPinnedInHeader, setCurrentPinnedIndexes,\n    getCurrentPinnedIndexes, setLoadingPinnedId, setForceNextPinnedInHeader,\n  ]);\n\n  const onFocusPinnedMessage = useCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) return false;\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  }, [\n    chatId, getCurrentPinnedIndexes, getLoadingPinnedId, key, pinnedIds, setCurrentPinnedIndexes,\n    setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloadIds,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages![chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const hasActiveDownloads = Object.values(activeDownloads).some((messageIds) => messageIds.length);\n\n    return {\n      activeDownloads,\n      messages: hasActiveDownloads ? global.messages.byChatId : undefined,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default memo(ReactionPickerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default memo(ChatlistModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, loadTopReactions,\n    loadDefaultStatusIcons, loadRecentReactions, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, lastSyncTime, loadDefaultStatusIcons, loadRecentEmojiStatuses]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","filter","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","settings","byKey","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","sliceSize","from","to","areSomeLocal","areAllLocal","sendMessage","params","_len3","_ref6","_key3","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","pinnedIds","selectPinnedIds","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByUserIds","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","_ref7","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","currentReactions","reactions","isReactionChosen","chosenOrder","reaction","existingIndex","r","isSameReaction","recentReactions","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","selectDefaultReaction","isMessageLocal","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isAuthRememberMe","authRememberMe","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","includedChatIds","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","classList","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","afterChildren","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","MouseButton","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","requestMutation","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","SMALL_IMAGE_THRESHOLD","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","BOTTOM_FOCUS_OFFSET","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","useThrottledCallback","quickReactionContainer","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useStateRef","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","chatBotFullInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","isResized","newScrollTop","newAnchorTop","resetScroll","restartCurrentScrollAnimation","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_QUICK_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","appendChild","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","isTouchScreen","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","documentElement","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}